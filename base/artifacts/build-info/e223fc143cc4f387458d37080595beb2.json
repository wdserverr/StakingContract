{
	"id": "e223fc143cc4f387458d37080595beb2",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"base/ERC20Base.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\n\nimport \"../openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\";\n\nimport \"../extension/ContractMetadata.sol\";\nimport \"../extension/Multicall.sol\";\nimport \"../extension/Ownable.sol\";\n\n/**\n *  The `ERC20Base` smart contract implements the ERC20 standard.\n *  It includes the following additions to standard ERC20 logic:\n *\n *      - Ability to mint & burn tokens via the provided `mint` & `burn` functions.\n *\n *      - Ownership of the contract, with the ability to restrict certain functions to\n *        only be called by the contract's owner.\n *\n *      - Multicall capability to perform multiple actions atomically\n *\n *      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by\n *                             presenting a message signed by the account.\n */\n\ncontract ERC20Base is ContractMetadata, Multicall, Ownable, ERC20Permit {\n    /*//////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) ERC20Permit(_name, _symbol) {\n        _setupOwner(msg.sender);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            Minting logic\n    //////////////////////////////////////////////////////////////*/\n\n    /**\n     *  @notice          Lets an authorized address mint tokens to a recipient.\n     *  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.\n     *\n     *  @param _to       The recipient of the tokens to mint.\n     *  @param _amount   Quantity of tokens to mint.\n     */\n    function mintTo(address _to, uint256 _amount) public virtual {\n        require(_canMint(), \"Not authorized to mint.\");\n        require(_amount != 0, \"Minting zero tokens.\");\n\n        _mint(_to, _amount);\n    }\n\n    /**\n     *  @notice          Lets an owner a given amount of their tokens.\n     *  @dev             Caller should own the `_amount` of tokens.\n     *\n     *  @param _amount   The number of tokens to burn.\n     */\n    function burn(uint256 _amount) external virtual {\n        require(balanceOf(msg.sender) >= _amount, \"not enough balance\");\n        _burn(msg.sender, _amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        Internal (overrideable) functions\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Returns whether contract metadata can be set in the given execution context.\n    function _canSetContractURI() internal view virtual override returns (bool) {\n        return msg.sender == owner();\n    }\n\n    /// @dev Returns whether tokens can be minted in the given execution context.\n    function _canMint() internal view virtual returns (bool) {\n        return msg.sender == owner();\n    }\n\n    /// @dev Returns whether owner can be set in the given execution context.\n    function _canSetOwner() internal view virtual override returns (bool) {\n        return msg.sender == owner();\n    }\n}\n"
			},
			"extension/Ownable.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\n\nimport \"./interface/IOwnable.sol\";\n\n/**\n *  @title   Ownable\n *  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n *           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n *           information about who the contract's owner is.\n */\n\nabstract contract Ownable is IOwnable {\n    /// @dev Owner of the contract (purpose: OpenSea compatibility)\n    address private _owner;\n\n    /// @dev Reverts if caller is not the owner.\n    modifier onlyOwner() {\n        if (msg.sender != _owner) {\n            revert(\"Not authorized\");\n        }\n        _;\n    }\n\n    /**\n     *  @notice Returns the owner of the contract.\n     */\n    function owner() public view override returns (address) {\n        return _owner;\n    }\n\n    /**\n     *  @notice Lets an authorized wallet set a new owner for the contract.\n     *  @param _newOwner The address to set as the new owner of the contract.\n     */\n    function setOwner(address _newOwner) external override {\n        if (!_canSetOwner()) {\n            revert(\"Not authorized\");\n        }\n        _setupOwner(_newOwner);\n    }\n\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\n    function _setupOwner(address _newOwner) internal {\n        address _prevOwner = _owner;\n        _owner = _newOwner;\n\n        emit OwnerUpdated(_prevOwner, _newOwner);\n    }\n\n    /// @dev Returns whether owner can be set in the given execution context.\n    function _canSetOwner() internal view virtual returns (bool);\n}\n"
			},
			"extension/Multicall.sol": {
				"content": "// SPDX-License-Identifier: Apache 2.0\npragma solidity ^0.8.0;\n\n\n\nimport \"../lib/TWAddress.sol\";\nimport \"./interface/IMulticall.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\ncontract Multicall is IMulticall {\n    /**\n     *  @notice Receives and executes a batch of function calls on this contract.\n     *  @dev Receives and executes a batch of function calls on this contract.\n     *\n     *  @param data The bytes data that makes up the batch of function calls to execute.\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\n     */\n    function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = TWAddress.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
			},
			"extension/ContractMetadata.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\n\nimport \"./interface/IContractMetadata.sol\";\n\n/**\n *  @title   Contract Metadata\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\n *           for you contract.\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\n */\n\nabstract contract ContractMetadata is IContractMetadata {\n    /// @notice Returns the contract metadata URI.\n    string public override contractURI;\n\n    /**\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\n     *                  See {_canSetContractURI}.\n     *                  Emits {ContractURIUpdated Event}.\n     *\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")\n     */\n    function setContractURI(string memory _uri) external override {\n        if (!_canSetContractURI()) {\n            revert(\"Not authorized\");\n        }\n\n        _setupContractURI(_uri);\n    }\n\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\n    function _setupContractURI(string memory _uri) internal {\n        string memory prevURI = contractURI;\n        contractURI = _uri;\n\n        emit ContractURIUpdated(prevURI, _uri);\n    }\n\n    /// @dev Returns whether contract metadata can be set in the given execution context.\n    function _canSetContractURI() internal view virtual returns (bool);\n}\n"
			},
			"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../../../eip/interface/IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    // solhint-disable-next-line var-name-mixedcase\n    address private immutable _CACHED_THIS;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_THIS = address(this);\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator();\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR(), structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name())),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
			},
			"openzeppelin-presets/utils/Counters.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
			},
			"openzeppelin-presets/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../../lib/TWStrings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", TWStrings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
			},
			"openzeppelin-presets/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
			},
			"openzeppelin-presets/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../../eip/interface/IERC20.sol\";\nimport \"../../../eip/interface/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
			},
			"eip/interface/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"extension/interface/IOwnable.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\n\n/**\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n *  information about who the contract's owner is.\n */\n\ninterface IOwnable {\n    /// @dev Returns the owner of the contract.\n    function owner() external view returns (address);\n\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\n    function setOwner(address _newOwner) external;\n\n    /// @dev Emitted when a new Owner is set.\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\n}\n"
			},
			"extension/interface/IMulticall.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\ninterface IMulticall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\n}\n"
			},
			"lib/TWAddress.sol": {
				"content": "// SPDX-License-Identifier: Apache 2.0\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary TWAddress {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"extension/interface/IContractMetadata.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\n\n/**\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\n *  for you contract.\n *\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\n */\n\ninterface IContractMetadata {\n    /// @dev Returns the metadata URI of the contract.\n    function contractURI() external view returns (string memory);\n\n    /**\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\n     *       Only module admin can call this function.\n     */\n    function setContractURI(string calldata _uri) external;\n\n    /// @dev Emitted when the contract URI is updated.\n    event ContractURIUpdated(string prevURI, string newURI);\n}\n"
			},
			"lib/TWStrings.sol": {
				"content": "// SPDX-License-Identifier: Apache 2.0\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev String operations.\n */\nlibrary TWStrings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"openzeppelin-presets/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"eip/interface/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title ERC20Metadata interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20Metadata {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
			},
			"eip/interface/IERC20.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"base/ERC20Base.sol": {
				"ERC20Base": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "_symbol",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "string",
									"name": "prevURI",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "newURI",
									"type": "string"
								}
							],
							"name": "ContractURIUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "prevOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "contractURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "mintTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "setContractURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Caller should own the `_amount` of tokens.",
								"params": {
									"_amount": "The number of tokens to burn."
								}
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"mintTo(address,uint256)": {
								"details": "The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.",
								"params": {
									"_amount": "Quantity of tokens to mint.",
									"_to": "The recipient of the tokens to mint."
								}
							},
							"multicall(bytes[])": {
								"details": "Receives and executes a batch of function calls on this contract.",
								"params": {
									"data": "The bytes data that makes up the batch of function calls to execute."
								},
								"returns": {
									"results": "The bytes data that makes up the result of the batch of function calls executed."
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "See {IERC20Permit-nonces}."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "See {IERC20Permit-permit}."
							},
							"setContractURI(string)": {
								"details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
								"params": {
									"_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
								}
							},
							"setOwner(address)": {
								"params": {
									"_newOwner": "The address to set as the new owner of the contract."
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"base/ERC20Base.sol\":893:3202  contract ERC20Base is ContractMetadata, Multicall, Ownable, ERC20Permit {... */\n  mstore(0x40, 0x0100)\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1440:1535  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n  0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1387:1535  bytes32 private immutable _PERMIT_TYPEHASH =... */\n  0xe0\n  mstore\n    /* \"base/ERC20Base.sol\":1150:1274  constructor(string memory _name, string memory _symbol) ERC20Permit(_name, _symbol) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"base/ERC20Base.sol\":1218:1223  _name */\n  dup2\n    /* \"base/ERC20Base.sol\":1225:1232  _symbol */\n  dup2\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1829:1834  name_ */\n  dup2\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1836:1843  symbol_ */\n  dup2\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2083:2088  name_ */\n  dup2\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2075:2080  _name */\n  0x05\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2075:2088  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_8\n  swap3\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_8:\n  pop\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2098:2115  _symbol = symbol_ */\n  dup1\n  mload\n  tag_10\n  swap1\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2098:2105  _symbol */\n  0x06\n  swap1\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2098:2115  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_9\n  jump\t// in\ntag_10:\n  pop\n  pop\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1874:1887  block.chainid */\n  chainid\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1855:1887  _CACHED_CHAIN_ID = block.chainid */\n  0xa0\n  mstore\n  pop\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1920:1924  this */\n  address\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1897:1925  _CACHED_THIS = address(this) */\n  0xc0\n  mstore\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1962:1985  _buildDomainSeparator() */\n  tag_12\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1962:1983  _buildDomainSeparator */\n  tag_13\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1962:1985  _buildDomainSeparator() */\n  jump\t// in\ntag_12:\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":1935:1985  _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator() */\n  0x80\n  mstore\n  pop\n    /* \"base/ERC20Base.sol\":1244:1267  _setupOwner(msg.sender) */\n  tag_15\n  swap1\n  pop\n    /* \"base/ERC20Base.sol\":1256:1266  msg.sender */\n  caller\n    /* \"base/ERC20Base.sol\":1244:1255  _setupOwner */\n  tag_16\n    /* \"base/ERC20Base.sol\":1244:1267  _setupOwner(msg.sender) */\n  jump\t// in\ntag_15:\n    /* \"base/ERC20Base.sol\":1150:1274  constructor(string memory _name, string memory _symbol) ERC20Permit(_name, _symbol) {... */\n  pop\n  pop\n    /* \"base/ERC20Base.sol\":893:3202  contract ERC20Base is ContractMetadata, Multicall, Ownable, ERC20Permit {... */\n  jump(tag_43)\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3293:3731  function _buildDomainSeparator() private view returns (bytes32) {... */\ntag_13:\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3348:3355  bytes32 */\n  0x00\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3445:3540  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3578:3584  name() */\n  tag_19\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3578:3582  name */\n  tag_20\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3578:3584  name() */\n  jump\t// in\ntag_19:\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3562:3586  keccak256(bytes(name())) */\n  dup1\n  mload\n  0x20\n  swap2\n  dup3\n  add\n  keccak256\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3413:3710  abi.encode(... */\n  0x40\n  dup1\n  mload\n  swap3\n  dup4\n  add\n    /* \"#utility.yul\":1862:1887   */\n  swap4\n  swap1\n  swap4\n  mstore\n    /* \"#utility.yul\":1903:1921   */\n  swap2\n  dup2\n  add\n    /* \"#utility.yul\":1896:1930   */\n  swap2\n  swap1\n  swap2\n  mstore\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3608:3622  keccak256(\"1\") */\n  0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6\n    /* \"#utility.yul\":1946:1964   */\n  0x60\n  dup3\n  add\n    /* \"#utility.yul\":1939:1973   */\n  mstore\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"#utility.yul\":1989:2007   */\n  0x80\n  dup3\n  add\n    /* \"#utility.yul\":1982:2016   */\n  mstore\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3687:3691  this */\n  address\n    /* \"#utility.yul\":2032:2051   */\n  0xa0\n  dup3\n  add\n    /* \"#utility.yul\":2025:2086   */\n  mstore\n    /* \"#utility.yul\":1834:1853   */\n  0xc0\n  add\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3413:3710  abi.encode(... */\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3386:3724  keccak256(... */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3367:3724  return... */\n  swap1\n  pop\n    /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3293:3731  function _buildDomainSeparator() private view returns (bytes32) {... */\n  swap1\n  jump\t// out\n    /* \"extension/Ownable.sol\":1401:1573  function _setupOwner(address _newOwner) internal {... */\ntag_16:\n    /* \"extension/Ownable.sol\":1481:1487  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"extension/Ownable.sol\":1497:1515  _owner = _newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"extension/Ownable.sol\":1531:1566  OwnerUpdated(_prevOwner, _newOwner) */\n  mload(0x40)\n    /* \"extension/Ownable.sol\":1481:1487  _owner */\n  swap2\n  and\n  swap2\n    /* \"extension/Ownable.sol\":1497:1515  _owner = _newOwner */\n  swap1\n    /* \"extension/Ownable.sol\":1481:1487  _owner */\n  dup3\n  swap1\n    /* \"extension/Ownable.sol\":1531:1566  OwnerUpdated(_prevOwner, _newOwner) */\n  0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76\n  swap1\n    /* \"extension/Ownable.sol\":1460:1478  address _prevOwner */\n  0x00\n  swap1\n    /* \"extension/Ownable.sol\":1531:1566  OwnerUpdated(_prevOwner, _newOwner) */\n  log3\n    /* \"extension/Ownable.sol\":1450:1573  {... */\n  pop\n    /* \"extension/Ownable.sol\":1401:1573  function _setupOwner(address _newOwner) internal {... */\n  pop\n  jump\t// out\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2187:2285  function name() public view virtual override returns (string memory) {... */\ntag_20:\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2241:2254  string memory */\n  0x60\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2273:2278  _name */\n  0x05\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2266:2278  return _name */\n  dup1\n  sload\n  tag_25\n  swap1\n  tag_26\n  jump\t// in\ntag_25:\n  dup1\n  0x1f\n  add\n  0x20\n  dup1\n  swap2\n  div\n  mul\n  0x20\n  add\n  mload(0x40)\n  swap1\n  dup2\n  add\n  0x40\n  mstore\n  dup1\n  swap3\n  swap2\n  swap1\n  dup2\n  dup2\n  mstore\n  0x20\n  add\n  dup3\n  dup1\n  sload\n  tag_27\n  swap1\n  tag_26\n  jump\t// in\ntag_27:\n  dup1\n  iszero\n  tag_28\n  jumpi\n  dup1\n  0x1f\n  lt\n  tag_29\n  jumpi\n  0x0100\n  dup1\n  dup4\n  sload\n  div\n  mul\n  dup4\n  mstore\n  swap2\n  0x20\n  add\n  swap2\n  jump(tag_28)\ntag_29:\n  dup3\n  add\n  swap2\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\ntag_30:\n  dup2\n  sload\n  dup2\n  mstore\n  swap1\n  0x01\n  add\n  swap1\n  0x20\n  add\n  dup1\n  dup4\n  gt\n  tag_30\n  jumpi\n  dup3\n  swap1\n  sub\n  0x1f\n  and\n  dup3\n  add\n  swap2\ntag_28:\n  pop\n  pop\n  pop\n  pop\n  pop\n  swap1\n  pop\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2187:2285  function name() public view virtual override returns (string memory) {... */\n  swap1\n  jump\t// out\n    /* \"base/ERC20Base.sol\":893:3202  contract ERC20Base is ContractMetadata, Multicall, Ownable, ERC20Permit {... */\ntag_9:\n  dup3\n  dup1\n  sload\n  tag_31\n  swap1\n  tag_26\n  jump\t// in\ntag_31:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_33\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_36)\ntag_33:\n  dup3\n  0x1f\n  lt\n  tag_34\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_36)\ntag_34:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_36\n  jumpi\n  swap2\n  dup3\n  add\ntag_35:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_36\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_35)\ntag_36:\n  pop\n  tag_37\n  swap3\n  swap2\n  pop\n  tag_38\n  jump\t// in\ntag_37:\n  pop\n  swap1\n  jump\t// out\ntag_38:\ntag_39:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_37\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_39)\n    /* \"#utility.yul\":14:141   */\ntag_41:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_42:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_46\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_46:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_48\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_48\n  tag_41\n  jump\t// in\ntag_48:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_50\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_50\n  tag_41\n  jump\t// in\ntag_50:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_51\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_51:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_52:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_54\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_52)\ntag_54:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_55\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_55:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1598   */\ntag_3:\n    /* \"#utility.yul\":1135:1141   */\n  0x00\n    /* \"#utility.yul\":1143:1149   */\n  dup1\n    /* \"#utility.yul\":1196:1198   */\n  0x40\n    /* \"#utility.yul\":1184:1193   */\n  dup4\n    /* \"#utility.yul\":1175:1182   */\n  dup6\n    /* \"#utility.yul\":1171:1194   */\n  sub\n    /* \"#utility.yul\":1167:1199   */\n  slt\n    /* \"#utility.yul\":1164:1216   */\n  iszero\n  tag_57\n  jumpi\n    /* \"#utility.yul\":1212:1213   */\n  0x00\n    /* \"#utility.yul\":1209:1210   */\n  dup1\n    /* \"#utility.yul\":1202:1214   */\n  revert\n    /* \"#utility.yul\":1164:1216   */\ntag_57:\n    /* \"#utility.yul\":1239:1255   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1304:1318   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1301:1335   */\n  iszero\n  tag_58\n  jumpi\n    /* \"#utility.yul\":1331:1332   */\n  0x00\n    /* \"#utility.yul\":1328:1329   */\n  dup1\n    /* \"#utility.yul\":1321:1333   */\n  revert\n    /* \"#utility.yul\":1301:1335   */\ntag_58:\n    /* \"#utility.yul\":1354:1415   */\n  tag_59\n    /* \"#utility.yul\":1407:1414   */\n  dup7\n    /* \"#utility.yul\":1398:1404   */\n  dup4\n    /* \"#utility.yul\":1387:1396   */\n  dup8\n    /* \"#utility.yul\":1383:1405   */\n  add\n    /* \"#utility.yul\":1354:1415   */\n  tag_42\n  jump\t// in\ntag_59:\n    /* \"#utility.yul\":1344:1415   */\n  swap4\n  pop\n    /* \"#utility.yul\":1461:1463   */\n  0x20\n    /* \"#utility.yul\":1450:1459   */\n  dup6\n    /* \"#utility.yul\":1446:1464   */\n  add\n    /* \"#utility.yul\":1440:1465   */\n  mload\n    /* \"#utility.yul\":1424:1465   */\n  swap2\n  pop\n    /* \"#utility.yul\":1490:1492   */\n  dup1\n    /* \"#utility.yul\":1480:1488   */\n  dup3\n    /* \"#utility.yul\":1477:1493   */\n  gt\n    /* \"#utility.yul\":1474:1510   */\n  iszero\n  tag_60\n  jumpi\n    /* \"#utility.yul\":1506:1507   */\n  0x00\n    /* \"#utility.yul\":1503:1504   */\n  dup1\n    /* \"#utility.yul\":1496:1508   */\n  revert\n    /* \"#utility.yul\":1474:1510   */\ntag_60:\n  pop\n    /* \"#utility.yul\":1529:1592   */\n  tag_61\n    /* \"#utility.yul\":1584:1591   */\n  dup6\n    /* \"#utility.yul\":1573:1581   */\n  dup3\n    /* \"#utility.yul\":1562:1571   */\n  dup7\n    /* \"#utility.yul\":1558:1582   */\n  add\n    /* \"#utility.yul\":1529:1592   */\n  tag_42\n  jump\t// in\ntag_61:\n    /* \"#utility.yul\":1519:1592   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1598   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2097:2477   */\ntag_26:\n    /* \"#utility.yul\":2176:2177   */\n  0x01\n    /* \"#utility.yul\":2172:2184   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":2219:2231   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":2240:2301   */\n  tag_64\n  jumpi\n    /* \"#utility.yul\":2294:2298   */\n  0x7f\n    /* \"#utility.yul\":2286:2292   */\n  dup3\n    /* \"#utility.yul\":2282:2299   */\n  and\n    /* \"#utility.yul\":2272:2299   */\n  swap2\n  pop\n    /* \"#utility.yul\":2240:2301   */\ntag_64:\n    /* \"#utility.yul\":2347:2349   */\n  0x20\n    /* \"#utility.yul\":2339:2345   */\n  dup3\n    /* \"#utility.yul\":2336:2350   */\n  lt\n    /* \"#utility.yul\":2316:2334   */\n  dup2\n    /* \"#utility.yul\":2313:2351   */\n  eq\n    /* \"#utility.yul\":2310:2471   */\n  iszero\n  tag_65\n  jumpi\n    /* \"#utility.yul\":2393:2403   */\n  0x4e487b71\n    /* \"#utility.yul\":2388:2391   */\n  0xe0\n    /* \"#utility.yul\":2384:2404   */\n  shl\n    /* \"#utility.yul\":2381:2382   */\n  0x00\n    /* \"#utility.yul\":2374:2405   */\n  mstore\n    /* \"#utility.yul\":2428:2432   */\n  0x22\n    /* \"#utility.yul\":2425:2426   */\n  0x04\n    /* \"#utility.yul\":2418:2433   */\n  mstore\n    /* \"#utility.yul\":2456:2460   */\n  0x24\n    /* \"#utility.yul\":2453:2454   */\n  0x00\n    /* \"#utility.yul\":2446:2461   */\n  revert\n    /* \"#utility.yul\":2310:2471   */\ntag_65:\n  pop\n    /* \"#utility.yul\":2097:2477   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_43:\n    /* \"base/ERC20Base.sol\":893:3202  contract ERC20Base is ContractMetadata, Multicall, Ownable, ERC20Permit {... */\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xc58236ec45e1f9296d9864d0cbfeeff405313b06ac94d623c45a5b4f741b2b96\")\n  0x00\n  assignImmutable(\"0x3ab4fb69c8e122442af87ae588015f836e7cde3029bbb6dab1983bc840231d63\")\n  0x00\n  assignImmutable(\"0x4f4ac30ff8bfcef8cd1068d1427faf7fb52fa3a1610b1f430e1f69a91ebb9673\")\n  0x00\n  assignImmutable(\"0x029f4bc6ebbac7821b38f11e82c50ce2b63772f63b6ad2c35af4c148b2c4bad3\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"base/ERC20Base.sol\":893:3202  contract ERC20Base is ContractMetadata, Multicall, Ownable, ERC20Permit {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_24\n      jumpi\n      dup1\n      0xa457c2d7\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xac9650d8\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xe8a3d485\n      eq\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0x70a08231\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x938e3d7b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup1\n      0x313ce567\n      gt\n      tag_26\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x449a52f8\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x13af4035\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2187:2285  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4464:4661  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_31\n      tag_32\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n    tag_31:\n      mload(0x40)\n        /* \"#utility.yul\":1367:1381   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1360:1382   */\n      iszero\n        /* \"#utility.yul\":1342:1383   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4464:4661  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_29\n        /* \"#utility.yul\":1202:1389   */\n      jump\n        /* \"extension/Ownable.sol\":1113:1286  function setOwner(address _newOwner) external override {... */\n    tag_5:\n      tag_37\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      stop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3275:3381  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_6:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3362:3374  _totalSupply */\n      sload(0x04)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3275:3381  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_41:\n      mload(0x40)\n        /* \"#utility.yul\":1731:1756   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3275:3381  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_29\n        /* \"#utility.yul\":1585:1762   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5223:5509  function transferFrom(... */\n    tag_7:\n      tag_31\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3124:3215  function decimals() public view virtual override returns (uint8) {... */\n    tag_8:\n      mload(0x40)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3206:3208  18 */\n      0x12\n        /* \"#utility.yul\":2242:2278   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2230:2232   */\n      0x20\n        /* \"#utility.yul\":2215:2233   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3124:3215  function decimals() public view virtual override returns (uint8) {... */\n      tag_29\n        /* \"#utility.yul\":2100:2284   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3015:3287  function DOMAIN_SEPARATOR() public view override returns (bytes32) {... */\n    tag_9:\n      tag_41\n      tag_55\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5904:6140  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_10:\n      tag_31\n      tag_59\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_59:\n      tag_60\n      jump\t// in\n        /* \"base/ERC20Base.sol\":2233:2397  function burn(uint256 _amount) external virtual {... */\n    tag_11:\n      tag_37\n      tag_63\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n        /* \"base/ERC20Base.sol\":1801:2010  function mintTo(address _to, uint256 _amount) public virtual {... */\n    tag_12:\n      tag_37\n      tag_67\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_67:\n      tag_68\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3439:3564  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_41\n      tag_70\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_70:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3557  _balances[account] */\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3513:3520  uint256 */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3557  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3548  _balances */\n      0x02\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3557  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3439:3564  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2765:2891  function nonces(address owner) public view virtual override returns (uint256) {... */\n    tag_14:\n      tag_41\n      tag_74\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2860:2874  _nonces[owner] */\n      and\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2834:2841  uint256 */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2860:2874  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2860:2867  _nonces */\n      0x07\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2860:2874  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"openzeppelin-presets/utils/Counters.sol\":918:932  counter._value */\n      sload\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2765:2891  function nonces(address owner) public view virtual override returns (uint256) {... */\n      jump\n        /* \"extension/Ownable.sol\":851:937  function owner() public view override returns (address) {... */\n    tag_15:\n        /* \"extension/Ownable.sol\":924:930  _owner */\n      sload(0x01)\n        /* \"extension/Ownable.sol\":851:937  function owner() public view override returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"extension/Ownable.sol\":924:930  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2802:2853   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2790:2792   */\n      0x20\n        /* \"#utility.yul\":2775:2793   */\n      add\n        /* \"extension/Ownable.sol\":851:937  function owner() public view override returns (address) {... */\n      tag_29\n        /* \"#utility.yul\":2656:2859   */\n      jump\n        /* \"extension/ContractMetadata.sol\":983:1171  function setContractURI(string memory _uri) external override {... */\n    tag_16:\n      tag_37\n      tag_82\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_82:\n      tag_84\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2398:2500  function symbol() public view virtual override returns (string memory) {... */\n    tag_17:\n      tag_27\n      tag_86\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6627:7056  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_18:\n      tag_31\n      tag_89\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_89:\n      tag_90\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3760:3949  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_19:\n      tag_31\n      tag_93\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_93:\n      tag_94\n      jump\t// in\n        /* \"extension/Multicall.sol\":678:997  function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {... */\n    tag_20:\n      tag_96\n      tag_97\n      calldatasize\n      0x04\n      tag_98\n      jump\t// in\n    tag_97:\n      tag_99\n      jump\t// in\n    tag_96:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2053:2704  function permit(... */\n    tag_21:\n      tag_37\n      tag_103\n      calldatasize\n      0x04\n      tag_104\n      jump\t// in\n    tag_103:\n      tag_105\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4007:4156  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_22:\n      tag_41\n      tag_107\n      calldatasize\n      0x04\n      tag_108\n      jump\t// in\n    tag_107:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4096:4103  uint256 */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4133  _allowances */\n      0x03\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4149  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4007:4156  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\n        /* \"extension/ContractMetadata.sol\":545:579  string public override contractURI */\n    tag_23:\n      tag_27\n      tag_112\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2187:2285  function name() public view virtual override returns (string memory) {... */\n    tag_28:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2241:2254  string memory */\n      0x60\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2273:2278  _name */\n      0x05\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2266:2278  return _name */\n      dup1\n      sload\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_117\n      swap1\n      tag_116\n      jump\t// in\n    tag_117:\n      dup1\n      iszero\n      tag_118\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_119\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_118)\n    tag_119:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_120:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_120\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_118:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2187:2285  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4464:4661  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_34:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4547:4551  bool */\n      0x00\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4601:4633  _approve(owner, spender, amount) */\n      tag_124\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4617:4624  spender */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4626:4632  amount */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4601:4609  _approve */\n      tag_125\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4601:4633  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_124:\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4650:4654  true */\n      0x01\n      swap4\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4464:4661  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"extension/Ownable.sol\":1113:1286  function setOwner(address _newOwner) external override {... */\n    tag_40:\n        /* \"extension/Ownable.sol\":1183:1197  _canSetOwner() */\n      tag_127\n        /* \"extension/Ownable.sol\":1183:1195  _canSetOwner */\n      tag_128\n        /* \"extension/Ownable.sol\":1183:1197  _canSetOwner() */\n      jump\t// in\n    tag_127:\n        /* \"extension/Ownable.sol\":1178:1248  if (!_canSetOwner()) {... */\n      tag_129\n      jumpi\n        /* \"extension/Ownable.sol\":1213:1237  revert(\"Not authorized\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6910:6912   */\n      0x20\n        /* \"extension/Ownable.sol\":1213:1237  revert(\"Not authorized\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6892:6913   */\n      mstore\n        /* \"#utility.yul\":6949:6951   */\n      0x0e\n        /* \"#utility.yul\":6929:6947   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6922:6952   */\n      mstore\n      shl(0x92, 0x139bdd08185d5d1a1bdc9a5e9959)\n        /* \"#utility.yul\":6968:6986   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6961:7005   */\n      mstore\n        /* \"#utility.yul\":7022:7040   */\n      0x64\n      add\n        /* \"extension/Ownable.sol\":1213:1237  revert(\"Not authorized\") */\n    tag_130:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"extension/Ownable.sol\":1178:1248  if (!_canSetOwner()) {... */\n    tag_129:\n        /* \"extension/Ownable.sol\":1257:1279  _setupOwner(_newOwner) */\n      tag_132\n        /* \"extension/Ownable.sol\":1269:1278  _newOwner */\n      dup2\n        /* \"extension/Ownable.sol\":1257:1268  _setupOwner */\n      tag_133\n        /* \"extension/Ownable.sol\":1257:1279  _setupOwner(_newOwner) */\n      jump\t// in\n    tag_132:\n        /* \"extension/Ownable.sol\":1113:1286  function setOwner(address _newOwner) external override {... */\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5223:5509  function transferFrom(... */\n    tag_48:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5350:5354  bool */\n      0x00\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5406:5444  _spendAllowance(from, spender, amount) */\n      tag_137\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5422:5426  from */\n      dup6\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5437:5443  amount */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5406:5421  _spendAllowance */\n      tag_138\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5406:5444  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_137:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5454:5481  _transfer(from, to, amount) */\n      tag_139\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5464:5468  from */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5470:5472  to */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5474:5480  amount */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5454:5463  _transfer */\n      tag_140\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5454:5481  _transfer(from, to, amount) */\n      jump\t// in\n    tag_139:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5498:5502  true */\n      0x01\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5491:5502  return true */\n      swap2\n      pop\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5223:5509  function transferFrom(... */\n    tag_135:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3015:3287  function DOMAIN_SEPARATOR() public view override returns (bytes32) {... */\n    tag_55:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3073:3080  bytes32 */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3104:3108  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3113:3125  _CACHED_THIS */\n      immutable(\"0x3ab4fb69c8e122442af87ae588015f836e7cde3029bbb6dab1983bc840231d63\")\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3096:3125  address(this) == _CACHED_THIS */\n      and\n      eq\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3096:3162  address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID */\n      dup1\n      iszero\n      tag_143\n      jumpi\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3146:3162  _CACHED_CHAIN_ID */\n      immutable(\"0x4f4ac30ff8bfcef8cd1068d1427faf7fb52fa3a1610b1f430e1f69a91ebb9673\")\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3129:3142  block.chainid */\n      chainid\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3129:3162  block.chainid == _CACHED_CHAIN_ID */\n      eq\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3096:3162  address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID */\n    tag_143:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3092:3281  if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {... */\n      iszero\n      tag_144\n      jumpi\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3185:3209  _CACHED_DOMAIN_SEPARATOR */\n      immutable(\"0x029f4bc6ebbac7821b38f11e82c50ce2b63772f63b6ad2c35af4c148b2c4bad3\")\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3015:3287  function DOMAIN_SEPARATOR() public view override returns (bytes32) {... */\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3092:3281  if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {... */\n    tag_144:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3247:3270  _buildDomainSeparator() */\n      tag_146\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3247:3268  _buildDomainSeparator */\n      tag_147\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3247:3270  _buildDomainSeparator() */\n      jump\t// in\n    tag_146:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3240:3270  return _buildDomainSeparator() */\n      swap1\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3015:3287  function DOMAIN_SEPARATOR() public view override returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5904:6140  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_60:\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5992:5996  bool */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6089  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6082  _allowances */\n      0x03\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6089  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6098  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5992:5996  bool */\n      swap1\n      swap2\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6046:6112  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      tag_124\n      swap1\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      dup3\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6098  _allowances[owner][spender] */\n      dup7\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6111  _allowances[owner][spender] + addedValue */\n      tag_151\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6101:6111  addedValue */\n      dup8\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6111  _allowances[owner][spender] + addedValue */\n      tag_152\n      jump\t// in\n    tag_151:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6046:6054  _approve */\n      tag_125\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6046:6112  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      jump\t// in\n        /* \"base/ERC20Base.sol\":2233:2397  function burn(uint256 _amount) external virtual {... */\n    tag_65:\n        /* \"base/ERC20Base.sol\":2309:2319  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3513:3520  uint256 */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3557  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3548  _balances */\n      0x02\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3557  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"base/ERC20Base.sol\":2324:2331  _amount */\n      dup2\n      gt\n        /* \"base/ERC20Base.sol\":2299:2331  balanceOf(msg.sender) >= _amount */\n      iszero\n        /* \"base/ERC20Base.sol\":2291:2354  require(balanceOf(msg.sender) >= _amount, \"not enough balance\") */\n      tag_155\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7518:7520   */\n      0x20\n        /* \"base/ERC20Base.sol\":2291:2354  require(balanceOf(msg.sender) >= _amount, \"not enough balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7500:7521   */\n      mstore\n        /* \"#utility.yul\":7557:7559   */\n      0x12\n        /* \"#utility.yul\":7537:7555   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7530:7560   */\n      mstore\n      shl(0x70, 0x6e6f7420656e6f7567682062616c616e6365)\n        /* \"#utility.yul\":7576:7594   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7569:7617   */\n      mstore\n        /* \"#utility.yul\":7634:7652   */\n      0x64\n      add\n        /* \"base/ERC20Base.sol\":2291:2354  require(balanceOf(msg.sender) >= _amount, \"not enough balance\") */\n      tag_130\n        /* \"#utility.yul\":7316:7658   */\n      jump\n        /* \"base/ERC20Base.sol\":2291:2354  require(balanceOf(msg.sender) >= _amount, \"not enough balance\") */\n    tag_155:\n        /* \"base/ERC20Base.sol\":2364:2390  _burn(msg.sender, _amount) */\n      tag_132\n        /* \"base/ERC20Base.sol\":2370:2380  msg.sender */\n      caller\n        /* \"base/ERC20Base.sol\":2382:2389  _amount */\n      dup3\n        /* \"base/ERC20Base.sol\":2364:2369  _burn */\n      tag_159\n        /* \"base/ERC20Base.sol\":2364:2390  _burn(msg.sender, _amount) */\n      jump\t// in\n        /* \"base/ERC20Base.sol\":1801:2010  function mintTo(address _to, uint256 _amount) public virtual {... */\n    tag_68:\n        /* \"base/ERC20Base.sol\":1880:1890  _canMint() */\n      tag_161\n        /* \"base/ERC20Base.sol\":1880:1888  _canMint */\n      tag_128\n        /* \"base/ERC20Base.sol\":1880:1890  _canMint() */\n      jump\t// in\n    tag_161:\n        /* \"base/ERC20Base.sol\":1872:1918  require(_canMint(), \"Not authorized to mint.\") */\n      tag_163\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7865:7867   */\n      0x20\n        /* \"base/ERC20Base.sol\":1872:1918  require(_canMint(), \"Not authorized to mint.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7847:7868   */\n      mstore\n        /* \"#utility.yul\":7904:7906   */\n      0x17\n        /* \"#utility.yul\":7884:7902   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7877:7907   */\n      mstore\n        /* \"#utility.yul\":7943:7968   */\n      0x4e6f7420617574686f72697a656420746f206d696e742e000000000000000000\n        /* \"#utility.yul\":7923:7941   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7916:7969   */\n      mstore\n        /* \"#utility.yul\":7986:8004   */\n      0x64\n      add\n        /* \"base/ERC20Base.sol\":1872:1918  require(_canMint(), \"Not authorized to mint.\") */\n      tag_130\n        /* \"#utility.yul\":7663:8010   */\n      jump\n        /* \"base/ERC20Base.sol\":1872:1918  require(_canMint(), \"Not authorized to mint.\") */\n    tag_163:\n        /* \"base/ERC20Base.sol\":1936:1948  _amount != 0 */\n      dup1\n        /* \"base/ERC20Base.sol\":1928:1973  require(_amount != 0, \"Minting zero tokens.\") */\n      tag_166\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8217:8219   */\n      0x20\n        /* \"base/ERC20Base.sol\":1928:1973  require(_amount != 0, \"Minting zero tokens.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8199:8220   */\n      mstore\n        /* \"#utility.yul\":8256:8258   */\n      0x14\n        /* \"#utility.yul\":8236:8254   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8229:8259   */\n      mstore\n      shl(0x61, 0x26b4b73a34b733903d32b937903a37b5b2b73997)\n        /* \"#utility.yul\":8275:8293   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8268:8318   */\n      mstore\n        /* \"#utility.yul\":8335:8353   */\n      0x64\n      add\n        /* \"base/ERC20Base.sol\":1928:1973  require(_amount != 0, \"Minting zero tokens.\") */\n      tag_130\n        /* \"#utility.yul\":8015:8359   */\n      jump\n        /* \"base/ERC20Base.sol\":1928:1973  require(_amount != 0, \"Minting zero tokens.\") */\n    tag_166:\n        /* \"base/ERC20Base.sol\":1984:2003  _mint(_to, _amount) */\n      tag_169\n        /* \"base/ERC20Base.sol\":1990:1993  _to */\n      dup3\n        /* \"base/ERC20Base.sol\":1995:2002  _amount */\n      dup3\n        /* \"base/ERC20Base.sol\":1984:1989  _mint */\n      tag_170\n        /* \"base/ERC20Base.sol\":1984:2003  _mint(_to, _amount) */\n      jump\t// in\n    tag_169:\n        /* \"base/ERC20Base.sol\":1801:2010  function mintTo(address _to, uint256 _amount) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"extension/ContractMetadata.sol\":983:1171  function setContractURI(string memory _uri) external override {... */\n    tag_84:\n        /* \"extension/ContractMetadata.sol\":1060:1080  _canSetContractURI() */\n      tag_177\n        /* \"extension/ContractMetadata.sol\":1060:1078  _canSetContractURI */\n      tag_128\n        /* \"extension/ContractMetadata.sol\":1060:1080  _canSetContractURI() */\n      jump\t// in\n    tag_177:\n        /* \"extension/ContractMetadata.sol\":1055:1131  if (!_canSetContractURI()) {... */\n      tag_179\n      jumpi\n        /* \"extension/ContractMetadata.sol\":1096:1120  revert(\"Not authorized\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6910:6912   */\n      0x20\n        /* \"extension/ContractMetadata.sol\":1096:1120  revert(\"Not authorized\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6892:6913   */\n      mstore\n        /* \"#utility.yul\":6949:6951   */\n      0x0e\n        /* \"#utility.yul\":6929:6947   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6922:6952   */\n      mstore\n      shl(0x92, 0x139bdd08185d5d1a1bdc9a5e9959)\n        /* \"#utility.yul\":6968:6986   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6961:7005   */\n      mstore\n        /* \"#utility.yul\":7022:7040   */\n      0x64\n      add\n        /* \"extension/ContractMetadata.sol\":1096:1120  revert(\"Not authorized\") */\n      tag_130\n        /* \"#utility.yul\":6708:7046   */\n      jump\n        /* \"extension/ContractMetadata.sol\":1055:1131  if (!_canSetContractURI()) {... */\n    tag_179:\n        /* \"extension/ContractMetadata.sol\":1141:1164  _setupContractURI(_uri) */\n      tag_132\n        /* \"extension/ContractMetadata.sol\":1159:1163  _uri */\n      dup2\n        /* \"extension/ContractMetadata.sol\":1141:1158  _setupContractURI */\n      tag_182\n        /* \"extension/ContractMetadata.sol\":1141:1164  _setupContractURI(_uri) */\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2398:2500  function symbol() public view virtual override returns (string memory) {... */\n    tag_86:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2454:2467  string memory */\n      0x60\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2486:2493  _symbol */\n      0x06\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2479:2493  return _symbol */\n      dup1\n      sload\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6627:7056  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_90:\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6720:6724  bool */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6801:6819  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6801:6812  _allowances */\n      0x03\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6801:6819  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6801:6828  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6720:6724  bool */\n      swap1\n      swap2\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6846:6881  currentAllowance >= subtractedValue */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6838:6923  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_191\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8566:8568   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6838:6923  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8548:8569   */\n      mstore\n        /* \"#utility.yul\":8605:8607   */\n      0x25\n        /* \"#utility.yul\":8585:8603   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8578:8608   */\n      mstore\n        /* \"#utility.yul\":8644:8678   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":8624:8642   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8617:8679   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":8695:8713   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8688:8723   */\n      mstore\n        /* \"#utility.yul\":8740:8759   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6838:6923  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_130\n        /* \"#utility.yul\":8364:8765   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6838:6923  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_191:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6957:7017  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_194\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6966:6971  owner */\n      dup3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6973:6980  spender */\n      dup7\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7001:7016  subtractedValue */\n      dup7\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6982:6998  currentAllowance */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6982:7016  currentAllowance - subtractedValue */\n      sub\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6957:6965  _approve */\n      tag_125\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6957:7017  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n    tag_194:\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7045:7049  true */\n      0x01\n      swap5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6627:7056  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3760:3949  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_94:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3839:3843  bool */\n      0x00\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3893:3921  _transfer(owner, to, amount) */\n      tag_124\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3910:3912  to */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3914:3920  amount */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3893:3902  _transfer */\n      tag_140\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3893:3921  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"extension/Multicall.sol\":678:997  function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {... */\n    tag_99:\n        /* \"extension/Multicall.sol\":755:777  bytes[] memory results */\n      0x60\n        /* \"extension/Multicall.sol\":811:815  data */\n      dup2\n        /* \"extension/Multicall.sol\":799:823  new bytes[](data.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_200\n      jumpi\n      tag_200\n      tag_201\n      jump\t// in\n    tag_200:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_202\n      jumpi\n      dup2\n      0x20\n      add\n    tag_203:\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      swap1\n      sub\n      swap1\n      dup2\n      tag_203\n      jumpi\n      swap1\n      pop\n    tag_202:\n      pop\n        /* \"extension/Multicall.sol\":789:823  results = new bytes[](data.length) */\n      swap1\n      pop\n        /* \"extension/Multicall.sol\":838:847  uint256 i */\n      0x00\n        /* \"extension/Multicall.sol\":833:967  for (uint256 i = 0; i < data.length; i++) {... */\n    tag_204:\n        /* \"extension/Multicall.sol\":853:868  i < data.length */\n      dup3\n      dup2\n      lt\n        /* \"extension/Multicall.sol\":833:967  for (uint256 i = 0; i < data.length; i++) {... */\n      iszero\n      tag_205\n      jumpi\n        /* \"extension/Multicall.sol\":902:956  TWAddress.functionDelegateCall(address(this), data[i]) */\n      tag_207\n        /* \"extension/Multicall.sol\":941:945  this */\n      address\n        /* \"extension/Multicall.sol\":948:952  data */\n      dup6\n      dup6\n        /* \"extension/Multicall.sol\":953:954  i */\n      dup5\n        /* \"extension/Multicall.sol\":948:955  data[i] */\n      dup2\n      dup2\n      lt\n      tag_209\n      jumpi\n      tag_209\n      tag_210\n      jump\t// in\n    tag_209:\n      swap1\n      pop\n      0x20\n      mul\n      dup2\n      add\n      swap1\n      tag_211\n      swap2\n      swap1\n      tag_212\n      jump\t// in\n    tag_211:\n        /* \"extension/Multicall.sol\":902:956  TWAddress.functionDelegateCall(address(this), data[i]) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"extension/Multicall.sol\":902:932  TWAddress.functionDelegateCall */\n      tag_213\n      swap3\n      pop\n      pop\n      pop\n        /* \"extension/Multicall.sol\":902:956  TWAddress.functionDelegateCall(address(this), data[i]) */\n      jump\t// in\n    tag_207:\n        /* \"extension/Multicall.sol\":889:896  results */\n      dup3\n        /* \"extension/Multicall.sol\":897:898  i */\n      dup3\n        /* \"extension/Multicall.sol\":889:899  results[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_215\n      jumpi\n      tag_215\n      tag_210\n      jump\t// in\n    tag_215:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"extension/Multicall.sol\":889:956  results[i] = TWAddress.functionDelegateCall(address(this), data[i]) */\n      dup2\n      swap1\n      mstore\n      pop\n        /* \"extension/Multicall.sol\":870:873  i++ */\n      dup1\n      dup1\n      tag_216\n      swap1\n      tag_217\n      jump\t// in\n    tag_216:\n      swap2\n      pop\n      pop\n        /* \"extension/Multicall.sol\":833:967  for (uint256 i = 0; i < data.length; i++) {... */\n      jump(tag_204)\n    tag_205:\n      pop\n        /* \"extension/Multicall.sol\":678:997  function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2053:2704  function permit(... */\n    tag_105:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2288:2296  deadline */\n      dup4\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2269:2284  block.timestamp */\n      timestamp\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2269:2296  block.timestamp <= deadline */\n      gt\n      iszero\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2261:2330  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n      tag_219\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9770:9772   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2261:2330  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9752:9773   */\n      mstore\n        /* \"#utility.yul\":9809:9811   */\n      0x1d\n        /* \"#utility.yul\":9789:9807   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9782:9812   */\n      mstore\n        /* \"#utility.yul\":9848:9879   */\n      0x45524332305065726d69743a206578706972656420646561646c696e65000000\n        /* \"#utility.yul\":9828:9846   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9821:9880   */\n      mstore\n        /* \"#utility.yul\":9897:9915   */\n      0x64\n      add\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2261:2330  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n      tag_130\n        /* \"#utility.yul\":9568:9921   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2261:2330  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n    tag_219:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2341:2359  bytes32 structHash */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2383:2399  _PERMIT_TYPEHASH */\n      immutable(\"0xc58236ec45e1f9296d9864d0cbfeeff405313b06ac94d623c45a5b4f741b2b96\")\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2401:2406  owner */\n      dup9\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2408:2415  spender */\n      dup9\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2417:2422  value */\n      dup9\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2424:2440  _useNonce(owner) */\n      tag_222\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2434:2439  owner */\n      dup13\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2424:2433  _useNonce */\n      tag_223\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2424:2440  _useNonce(owner) */\n      jump\t// in\n    tag_222:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2372:2451  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":10213:10238   */\n      swap7\n      swap1\n      swap7\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":10312:10327   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":10292:10310   */\n      swap1\n      dup7\n      add\n        /* \"#utility.yul\":10285:10328   */\n      mstore\n        /* \"#utility.yul\":10364:10379   */\n      swap3\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":10344:10362   */\n      0x60\n      dup5\n      add\n        /* \"#utility.yul\":10337:10380   */\n      mstore\n        /* \"#utility.yul\":10396:10414   */\n      0x80\n      dup4\n      add\n        /* \"#utility.yul\":10389:10423   */\n      mstore\n        /* \"#utility.yul\":10439:10458   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":10432:10467   */\n      mstore\n        /* \"#utility.yul\":10483:10502   */\n      0xc0\n      dup2\n      add\n        /* \"#utility.yul\":10476:10511   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":10185:10204   */\n      0xe0\n      add\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2372:2451  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2362:2452  keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2341:2452  bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2463:2475  bytes32 hash */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2478:2531  ECDSA.toTypedDataHash(DOMAIN_SEPARATOR(), structHash) */\n      tag_226\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2500:2518  DOMAIN_SEPARATOR() */\n      tag_227\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2500:2516  DOMAIN_SEPARATOR */\n      tag_55\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2500:2518  DOMAIN_SEPARATOR() */\n      jump\t// in\n    tag_227:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2520:2530  structHash */\n      dup4\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8686:8690  0x40 */\n      0x40\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8680:8691  mload(0x40) */\n      mload\n      shl(0xf0, 0x1901)\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8704:8727  mstore(ptr, \"\\x19\\x01\") */\n      dup2\n      mstore\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8756:8760  0x02 */\n      0x02\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8747:8761  add(ptr, 0x02) */\n      dup2\n      add\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8740:8779  mstore(add(ptr, 0x02), domainSeparator) */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8808:8812  0x22 */\n      0x22\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8799:8813  add(ptr, 0x22) */\n      dup3\n      add\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8792:8826  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8862:8866  0x42 */\n      0x42\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8847:8867  keccak256(ptr, 0x42) */\n      swap1\n      keccak256\n      swap1\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":8486:8883  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {... */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2478:2531  ECDSA.toTypedDataHash(DOMAIN_SEPARATOR(), structHash) */\n    tag_226:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2463:2531  bytes32 hash = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR(), structHash) */\n      swap1\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2542:2556  address signer */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2559:2587  ECDSA.recover(hash, v, r, s) */\n      tag_229\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2573:2577  hash */\n      dup3\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2579:2580  v */\n      dup8\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2582:2583  r */\n      dup8\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2585:2586  s */\n      dup8\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2559:2572  ECDSA.recover */\n      tag_230\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2559:2587  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_229:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2542:2587  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2615:2620  owner */\n      dup10\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2605:2620  signer == owner */\n      and\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2605:2611  signer */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2605:2620  signer == owner */\n      and\n      eq\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2597:2655  require(signer == owner, \"ERC20Permit: invalid signature\") */\n      tag_231\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10724:10726   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2597:2655  require(signer == owner, \"ERC20Permit: invalid signature\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10706:10727   */\n      mstore\n        /* \"#utility.yul\":10763:10765   */\n      0x1e\n        /* \"#utility.yul\":10743:10761   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10736:10766   */\n      mstore\n        /* \"#utility.yul\":10802:10834   */\n      0x45524332305065726d69743a20696e76616c6964207369676e61747572650000\n        /* \"#utility.yul\":10782:10800   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10775:10835   */\n      mstore\n        /* \"#utility.yul\":10852:10870   */\n      0x64\n      add\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2597:2655  require(signer == owner, \"ERC20Permit: invalid signature\") */\n      tag_130\n        /* \"#utility.yul\":10522:10876   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2597:2655  require(signer == owner, \"ERC20Permit: invalid signature\") */\n    tag_231:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2666:2697  _approve(owner, spender, value) */\n      tag_234\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2675:2680  owner */\n      dup11\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2682:2689  spender */\n      dup11\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2691:2696  value */\n      dup11\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2666:2674  _approve */\n      tag_125\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2666:2697  _approve(owner, spender, value) */\n      jump\t// in\n    tag_234:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2251:2704  {... */\n      pop\n      pop\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":2053:2704  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"extension/ContractMetadata.sol\":545:579  string public override contractURI */\n    tag_112:\n      0x00\n      dup1\n      sload\n      tag_236\n      swap1\n      tag_116\n      jump\t// in\n    tag_236:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_237\n      swap1\n      tag_116\n      jump\t// in\n    tag_237:\n      dup1\n      iszero\n      tag_238\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_239\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_238)\n    tag_239:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_240:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_240\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_238:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10154:10524  function _approve(... */\n    tag_125:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10285:10304  owner != address(0) */\n      dup4\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10277:10345  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_243\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11083:11085   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10277:10345  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11065:11086   */\n      mstore\n        /* \"#utility.yul\":11122:11124   */\n      0x24\n        /* \"#utility.yul\":11102:11120   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":11095:11125   */\n      mstore\n        /* \"#utility.yul\":11161:11195   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":11141:11159   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11134:11196   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":11212:11230   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11205:11239   */\n      mstore\n        /* \"#utility.yul\":11256:11275   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10277:10345  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_130\n        /* \"#utility.yul\":10881:11281   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10277:10345  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_243:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10363:10384  spender != address(0) */\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10355:10423  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_246\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11488:11490   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10355:10423  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11470:11491   */\n      mstore\n        /* \"#utility.yul\":11527:11529   */\n      0x22\n        /* \"#utility.yul\":11507:11525   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11500:11530   */\n      mstore\n        /* \"#utility.yul\":11566:11600   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":11546:11564   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11539:11601   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":11617:11635   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11610:11642   */\n      mstore\n        /* \"#utility.yul\":11659:11678   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10355:10423  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_130\n        /* \"#utility.yul\":11286:11684   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10355:10423  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_246:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10452  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10445  _allowances */\n      0x03\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10452  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10461  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10470  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10485:10517  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1731:1756   */\n      dup5\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10485:10517  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10485:10517  Approval(owner, spender, amount) */\n    tag_249:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10154:10524  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"base/ERC20Base.sol\":3085:3200  function _canSetOwner() internal view virtual override returns (bool) {... */\n    tag_128:\n        /* \"base/ERC20Base.sol\":3149:3153  bool */\n      0x00\n        /* \"base/ERC20Base.sol\":3186:3193  owner() */\n      tag_251\n        /* \"extension/Ownable.sol\":924:930  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      swap1\n        /* \"extension/Ownable.sol\":851:937  function owner() public view override returns (address) {... */\n      jump\n        /* \"base/ERC20Base.sol\":3186:3193  owner() */\n    tag_251:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"base/ERC20Base.sol\":3172:3193  msg.sender == owner() */\n      and\n        /* \"base/ERC20Base.sol\":3172:3182  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"base/ERC20Base.sol\":3172:3193  msg.sender == owner() */\n      and\n      eq\n        /* \"base/ERC20Base.sol\":3165:3193  return msg.sender == owner() */\n      swap1\n      pop\n        /* \"base/ERC20Base.sol\":3085:3200  function _canSetOwner() internal view virtual override returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"extension/Ownable.sol\":1401:1573  function _setupOwner(address _newOwner) internal {... */\n    tag_133:\n        /* \"extension/Ownable.sol\":1481:1487  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"extension/Ownable.sol\":1497:1515  _owner = _newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"extension/Ownable.sol\":1531:1566  OwnerUpdated(_prevOwner, _newOwner) */\n      mload(0x40)\n        /* \"extension/Ownable.sol\":1481:1487  _owner */\n      swap2\n      and\n      swap2\n        /* \"extension/Ownable.sol\":1497:1515  _owner = _newOwner */\n      swap1\n        /* \"extension/Ownable.sol\":1481:1487  _owner */\n      dup3\n      swap1\n        /* \"extension/Ownable.sol\":1531:1566  OwnerUpdated(_prevOwner, _newOwner) */\n      0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76\n      swap1\n        /* \"extension/Ownable.sol\":1460:1478  address _prevOwner */\n      0x00\n      swap1\n        /* \"extension/Ownable.sol\":1531:1566  OwnerUpdated(_prevOwner, _newOwner) */\n      log3\n        /* \"extension/Ownable.sol\":1450:1573  {... */\n      pop\n        /* \"extension/Ownable.sol\":1401:1573  function _setupOwner(address _newOwner) internal {... */\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10801:11242  function _spendAllowance(... */\n    tag_138:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10931:10955  uint256 currentAllowance */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4133  _allowances */\n      0x03\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4149  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10997:11034  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10993:11236  if (currentAllowance != type(uint256).max) {... */\n      tag_259\n      jumpi\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11078:11084  amount */\n      dup2\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11058:11074  currentAllowance */\n      dup2\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11058:11084  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11050:11118  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_256\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11891:11893   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11050:11118  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11873:11894   */\n      mstore\n        /* \"#utility.yul\":11930:11932   */\n      0x1d\n        /* \"#utility.yul\":11910:11928   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11903:11933   */\n      mstore\n        /* \"#utility.yul\":11969:12000   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":11949:11967   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11942:12001   */\n      mstore\n        /* \"#utility.yul\":12018:12036   */\n      0x64\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11050:11118  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_130\n        /* \"#utility.yul\":11689:12042   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11050:11118  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_256:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11160:11211  _approve(owner, spender, currentAllowance - amount) */\n      tag_259\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11169:11174  owner */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11176:11183  spender */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11204:11210  amount */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11185:11201  currentAllowance */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11185:11210  currentAllowance - amount */\n      sub\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11160:11168  _approve */\n      tag_125\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11160:11211  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_259:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10921:11242  {... */\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10801:11242  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7519:8170  function _transfer(... */\n    tag_140:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7645:7663  from != address(0) */\n      dup4\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7637:7705  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_261\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12249:12251   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7637:7705  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12231:12252   */\n      mstore\n        /* \"#utility.yul\":12288:12290   */\n      0x25\n        /* \"#utility.yul\":12268:12286   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12261:12291   */\n      mstore\n        /* \"#utility.yul\":12327:12361   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":12307:12325   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12300:12362   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":12378:12396   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12371:12406   */\n      mstore\n        /* \"#utility.yul\":12423:12442   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7637:7705  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_130\n        /* \"#utility.yul\":12047:12448   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7637:7705  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_261:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7723:7739  to != address(0) */\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7715:7779  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_264\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12655:12657   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7715:7779  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12637:12658   */\n      mstore\n        /* \"#utility.yul\":12694:12696   */\n      0x23\n        /* \"#utility.yul\":12674:12692   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12667:12697   */\n      mstore\n        /* \"#utility.yul\":12733:12767   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":12713:12731   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12706:12768   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":12784:12802   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12777:12810   */\n      mstore\n        /* \"#utility.yul\":12827:12846   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7715:7779  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_130\n        /* \"#utility.yul\":12453:12852   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7715:7779  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_264:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7861:7876  _balances[from] */\n      dup4\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7839:7858  uint256 fromBalance */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7861:7876  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7861:7870  _balances */\n      0x02\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7861:7876  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7894:7915  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7886:7958  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_269\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13059:13061   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7886:7958  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13041:13062   */\n      mstore\n        /* \"#utility.yul\":13098:13100   */\n      0x26\n        /* \"#utility.yul\":13078:13096   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13071:13101   */\n      mstore\n        /* \"#utility.yul\":13137:13171   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":13117:13135   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13110:13172   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":13188:13206   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13181:13217   */\n      mstore\n        /* \"#utility.yul\":13234:13253   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7886:7958  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_130\n        /* \"#utility.yul\":12857:13259   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7886:7958  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_269:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8007  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8001  _balances */\n      0x02\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8007  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8010:8030  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8030  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8050:8063  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8050:8073  _balances[to] += amount */\n      dup1\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8024:8030  amount */\n      dup5\n      swap3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8007  _balances[from] */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8050:8073  _balances[to] += amount */\n      tag_272\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8024:8030  amount */\n      dup5\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8050:8073  _balances[to] += amount */\n      tag_152\n      jump\t// in\n    tag_272:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8104:8106  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8089:8115  Transfer(from, to, amount) */\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8098:8102  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8089:8115  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8108:8114  amount */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8089:8115  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_273\n      swap2\n        /* \"#utility.yul\":1731:1756   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n      swap1\n        /* \"#utility.yul\":1585:1762   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8089:8115  Transfer(from, to, amount) */\n    tag_273:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8126:8163  _afterTokenTransfer(from, to, amount) */\n      tag_259\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9155:9731  function _burn(address account, uint256 amount) internal virtual {... */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3293:3731  function _buildDomainSeparator() private view returns (bytes32) {... */\n    tag_147:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3348:3355  bytes32 */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3445:3540  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3578:3584  name() */\n      tag_277\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3578:3582  name */\n      tag_28\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3578:3584  name() */\n      jump\t// in\n    tag_277:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3562:3586  keccak256(bytes(name())) */\n      dup1\n      mload\n      0x20\n      swap2\n      dup3\n      add\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3413:3710  abi.encode(... */\n      0x40\n      dup1\n      mload\n      swap3\n      dup4\n      add\n        /* \"#utility.yul\":13523:13548   */\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"#utility.yul\":13564:13582   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":13557:13591   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3608:3622  keccak256(\"1\") */\n      0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6\n        /* \"#utility.yul\":13607:13625   */\n      0x60\n      dup3\n      add\n        /* \"#utility.yul\":13600:13634   */\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3644:3657  block.chainid */\n      chainid\n        /* \"#utility.yul\":13650:13668   */\n      0x80\n      dup3\n      add\n        /* \"#utility.yul\":13643:13677   */\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3687:3691  this */\n      address\n        /* \"#utility.yul\":13693:13712   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":13686:13747   */\n      mstore\n        /* \"#utility.yul\":13495:13514   */\n      0xc0\n      add\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3413:3710  abi.encode(... */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3386:3724  keccak256(... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3367:3724  return... */\n      swap1\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3293:3731  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9155:9731  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_159:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9238:9259  account != address(0) */\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9230:9297  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_281\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13960:13962   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9230:9297  require(account != address(0), \"ERC20: burn from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13942:13963   */\n      mstore\n        /* \"#utility.yul\":13999:14001   */\n      0x21\n        /* \"#utility.yul\":13979:13997   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13972:14002   */\n      mstore\n        /* \"#utility.yul\":14038:14072   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":14018:14036   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14011:14073   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":14089:14107   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":14082:14113   */\n      mstore\n        /* \"#utility.yul\":14130:14149   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9230:9297  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_130\n        /* \"#utility.yul\":13758:14155   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9230:9297  require(account != address(0), \"ERC20: burn from the zero address\") */\n    tag_281:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9393:9411  _balances[account] */\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9368:9390  uint256 accountBalance */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9393:9411  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9393:9402  _balances */\n      0x02\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9393:9411  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9429:9453  accountBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9421:9492  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_285\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14362:14364   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9421:9492  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14344:14365   */\n      mstore\n        /* \"#utility.yul\":14401:14403   */\n      0x22\n        /* \"#utility.yul\":14381:14399   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14374:14404   */\n      mstore\n        /* \"#utility.yul\":14440:14474   */\n      0x45524332303a206275726e20616d6f756e7420657863656564732062616c616e\n        /* \"#utility.yul\":14420:14438   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14413:14475   */\n      mstore\n      shl(0xf0, 0x6365)\n        /* \"#utility.yul\":14491:14509   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":14484:14516   */\n      mstore\n        /* \"#utility.yul\":14533:14552   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9421:9492  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_130\n        /* \"#utility.yul\":14160:14558   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9421:9492  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n    tag_285:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9526:9544  _balances[account] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9526:9535  _balances */\n      0x02\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9526:9544  _balances[account] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9547:9570  accountBalance - amount */\n      dup4\n      dup4\n      sub\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9526:9570  _balances[account] = accountBalance - amount */\n      swap1\n      sstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9590:9602  _totalSupply */\n      0x04\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9590:9612  _totalSupply -= amount */\n      dup1\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9564:9570  amount */\n      dup5\n      swap3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9526:9544  _balances[account] */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9590:9612  _totalSupply -= amount */\n      tag_288\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9564:9570  amount */\n      dup5\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9590:9612  _totalSupply -= amount */\n      tag_289\n      jump\t// in\n    tag_288:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9628:9665  Transfer(account, address(0), amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1731:1756   */\n      dup3\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9654:9655  0 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9628:9665  Transfer(account, address(0), amount) */\n      dup6\n      and\n      swap1\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":9628:9665  Transfer(account, address(0), amount) */\n      tag_249\n        /* \"#utility.yul\":1585:1762   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8446:8835  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_170:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8529:8550  account != address(0) */\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8521:8586  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_295\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14895:14897   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8521:8586  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14877:14898   */\n      mstore\n        /* \"#utility.yul\":14934:14936   */\n      0x1f\n        /* \"#utility.yul\":14914:14932   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14907:14937   */\n      mstore\n        /* \"#utility.yul\":14973:15006   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":14953:14971   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14946:15007   */\n      mstore\n        /* \"#utility.yul\":15024:15042   */\n      0x64\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8521:8586  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_130\n        /* \"#utility.yul\":14693:15048   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8521:8586  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_295:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8673:8679  amount */\n      dup1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8657:8669  _totalSupply */\n      0x04\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8657:8679  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_299\n      swap2\n      swap1\n      tag_152\n      jump\t// in\n    tag_299:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8689:8707  _balances[account] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8689:8698  _balances */\n      0x02\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8689:8707  _balances[account] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8689:8717  _balances[account] += amount */\n      dup1\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8711:8717  amount */\n      dup4\n      swap3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8689:8707  _balances[account] */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8689:8717  _balances[account] += amount */\n      tag_300\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8711:8717  amount */\n      dup5\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8689:8717  _balances[account] += amount */\n      tag_152\n      jump\t// in\n    tag_300:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8732:8769  Transfer(address(0), account, amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1731:1756   */\n      dup2\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8732:8769  Transfer(address(0), account, amount) */\n      dup4\n      and\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8749:8750  0 */\n      0x00\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8732:8769  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"#utility.yul\":1719:1721   */\n      0x20\n        /* \"#utility.yul\":1704:1722   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8732:8769  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"base/ERC20Base.sol\":1801:2010  function mintTo(address _to, uint256 _amount) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"extension/ContractMetadata.sol\":1253:1438  function _setupContractURI(string memory _uri) internal {... */\n    tag_182:\n        /* \"extension/ContractMetadata.sol\":1319:1340  string memory prevURI */\n      0x00\n        /* \"extension/ContractMetadata.sol\":1343:1354  contractURI */\n      dup1\n        /* \"extension/ContractMetadata.sol\":1319:1354  string memory prevURI = contractURI */\n      dup1\n      sload\n      tag_307\n      swap1\n      tag_116\n      jump\t// in\n    tag_307:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_308\n      swap1\n      tag_116\n      jump\t// in\n    tag_308:\n      dup1\n      iszero\n      tag_309\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_310\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_309)\n    tag_310:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_311:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_311\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_309:\n      pop\n      pop\n        /* \"extension/ContractMetadata.sol\":1364:1382  contractURI = _uri */\n      dup6\n      mload\n        /* \"extension/ContractMetadata.sol\":1319:1354  string memory prevURI = contractURI */\n      swap4\n      swap5\n      pop\n        /* \"extension/ContractMetadata.sol\":1364:1382  contractURI = _uri */\n      tag_312\n      swap4\n        /* \"extension/ContractMetadata.sol\":1364:1375  contractURI */\n      0x00\n      swap4\n      pop\n        /* \"extension/ContractMetadata.sol\":1364:1382  contractURI = _uri */\n      0x20\n      dup8\n      add\n      swap3\n      pop\n      swap1\n      pop\n      tag_313\n      jump\t// in\n    tag_312:\n      pop\n        /* \"extension/ContractMetadata.sol\":1398:1431  ContractURIUpdated(prevURI, _uri) */\n      0xc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a16\n        /* \"extension/ContractMetadata.sol\":1417:1424  prevURI */\n      dup2\n        /* \"extension/ContractMetadata.sol\":1426:1430  _uri */\n      dup4\n        /* \"extension/ContractMetadata.sol\":1398:1431  ContractURIUpdated(prevURI, _uri) */\n      mload(0x40)\n      tag_314\n      swap3\n      swap2\n      swap1\n      tag_315\n      jump\t// in\n    tag_314:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"extension/ContractMetadata.sol\":1309:1438  {... */\n      pop\n        /* \"extension/ContractMetadata.sol\":1253:1438  function _setupContractURI(string memory _uri) internal {... */\n      pop\n      jump\t// out\n        /* \"lib/TWAddress.sol\":6518:6716  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_213:\n        /* \"lib/TWAddress.sol\":6601:6613  bytes memory */\n      0x60\n        /* \"lib/TWAddress.sol\":6632:6709  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      tag_135\n        /* \"lib/TWAddress.sol\":6653:6659  target */\n      dup4\n        /* \"lib/TWAddress.sol\":6661:6665  data */\n      dup4\n        /* \"lib/TWAddress.sol\":6632:6709  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x27\n      dup2\n      mstore\n      0x20\n      add\n      data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398\n      0x27\n      swap2\n      codecopy\n        /* \"lib/TWAddress.sol\":6632:6652  functionDelegateCall */\n      tag_318\n        /* \"lib/TWAddress.sol\":6632:6709  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3862:4065  function _useNonce(address owner) internal virtual returns (uint256 current) {... */\n    tag_223:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3982:3996  _nonces[owner] */\n      dup2\n      and\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3922:3937  uint256 current */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3982:3996  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3982:3989  _nonces */\n      0x07\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3982:3996  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"openzeppelin-presets/utils/Counters.sol\":918:932  counter._value */\n      dup1\n      sload\n        /* \"openzeppelin-presets/utils/Counters.sol\":1050:1051  1 */\n      0x01\n        /* \"openzeppelin-presets/utils/Counters.sol\":1032:1051  counter._value += 1 */\n      dup2\n      add\n      dup3\n      sstore\n        /* \"openzeppelin-presets/utils/Counters.sol\":918:932  counter._value */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":4041:4058  nonce.increment() */\n    tag_321:\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3939:4065  {... */\n      pop\n        /* \"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":3862:4065  function _useNonce(address owner) internal virtual returns (uint256 current) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6708:6978  function recover(... */\n    tag_230:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6831:6838  address */\n      0x00\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6851:6868  address recovered */\n      dup1\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6870:6888  RecoverError error */\n      0x00\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6892:6917  tryRecover(hash, v, r, s) */\n      tag_325\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6903:6907  hash */\n      dup8\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6909:6910  v */\n      dup8\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6912:6913  r */\n      dup8\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6915:6916  s */\n      dup8\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6892:6902  tryRecover */\n      tag_326\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6892:6917  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_325:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6850:6917  (address recovered, RecoverError error) = tryRecover(hash, v, r, s) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6927:6945  _throwError(error) */\n      tag_327\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6939:6944  error */\n      dup2\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6927:6938  _throwError */\n      tag_328\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6927:6945  _throwError(error) */\n      jump\t// in\n    tag_327:\n      pop\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6962:6971  recovered */\n      swap6\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6708:6978  function recover(... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/TWAddress.sol\":6902:7289  function functionDelegateCall(... */\n    tag_318:\n        /* \"lib/TWAddress.sol\":7043:7055  bytes memory */\n      0x60\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/TWAddress.sol\":1407:1426  account.code.length */\n      dup5\n      and\n      extcodesize\n        /* \"lib/TWAddress.sol\":7067:7136  require(isContract(target), \"Address: delegate call to non-contract\") */\n      tag_334\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15643:15645   */\n      0x20\n        /* \"lib/TWAddress.sol\":7067:7136  require(isContract(target), \"Address: delegate call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15625:15646   */\n      mstore\n        /* \"#utility.yul\":15682:15684   */\n      0x26\n        /* \"#utility.yul\":15662:15680   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15655:15685   */\n      mstore\n        /* \"#utility.yul\":15721:15755   */\n      0x416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f\n        /* \"#utility.yul\":15701:15719   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15694:15756   */\n      mstore\n      shl(0xd2, 0x1b9d1c9858dd)\n        /* \"#utility.yul\":15772:15790   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":15765:15801   */\n      mstore\n        /* \"#utility.yul\":15818:15837   */\n      0x84\n      add\n        /* \"lib/TWAddress.sol\":7067:7136  require(isContract(target), \"Address: delegate call to non-contract\") */\n      tag_130\n        /* \"#utility.yul\":15441:15843   */\n      jump\n        /* \"lib/TWAddress.sol\":7067:7136  require(isContract(target), \"Address: delegate call to non-contract\") */\n    tag_334:\n        /* \"lib/TWAddress.sol\":7148:7160  bool success */\n      0x00\n        /* \"lib/TWAddress.sol\":7162:7185  bytes memory returndata */\n      dup1\n        /* \"lib/TWAddress.sol\":7189:7195  target */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/TWAddress.sol\":7189:7208  target.delegatecall */\n      and\n        /* \"lib/TWAddress.sol\":7209:7213  data */\n      dup6\n        /* \"lib/TWAddress.sol\":7189:7214  target.delegatecall(data) */\n      mload(0x40)\n      tag_337\n      swap2\n      swap1\n      tag_338\n      jump\t// in\n    tag_337:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_341\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_340)\n    tag_341:\n      0x60\n      swap2\n      pop\n    tag_340:\n      pop\n        /* \"lib/TWAddress.sol\":7147:7214  (bool success, bytes memory returndata) = target.delegatecall(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"lib/TWAddress.sol\":7231:7282  verifyCallResult(success, returndata, errorMessage) */\n      tag_342\n        /* \"lib/TWAddress.sol\":7248:7255  success */\n      dup3\n        /* \"lib/TWAddress.sol\":7257:7267  returndata */\n      dup3\n        /* \"lib/TWAddress.sol\":7269:7281  errorMessage */\n      dup7\n        /* \"lib/TWAddress.sol\":7231:7247  verifyCallResult */\n      tag_343\n        /* \"lib/TWAddress.sol\":7231:7282  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_342:\n        /* \"lib/TWAddress.sol\":7224:7282  return verifyCallResult(success, returndata, errorMessage) */\n      swap7\n        /* \"lib/TWAddress.sol\":6902:7289  function functionDelegateCall(... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":5081:6575  function tryRecover(... */\n    tag_326:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":5207:5214  address */\n      0x00\n      dup1\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6131:6197  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6118:6197  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup4\n      gt\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6114:6275  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_346\n      jumpi\n      pop\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6229:6230  0 */\n      0x00\n      swap1\n      pop\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6233:6263  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6213:6264  return (address(0), RecoverError.InvalidSignatureS) */\n      jump(tag_345)\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6114:6275  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_346:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6386:6410  ecrecover(hash, v, r, s) */\n      0x40\n      dup1\n      mload\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6369:6383  address signer */\n      0x00\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6386:6410  ecrecover(hash, v, r, s) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      dup5\n      mstore\n        /* \"#utility.yul\":16354:16379   */\n      dup10\n      swap1\n      mstore\n        /* \"#utility.yul\":16427:16431   */\n      0xff\n        /* \"#utility.yul\":16415:16432   */\n      dup9\n      and\n        /* \"#utility.yul\":16395:16413   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":16388:16433   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":16449:16467   */\n      0x60\n      dup2\n      add\n        /* \"#utility.yul\":16442:16476   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":16492:16510   */\n      0x80\n      dup2\n      add\n        /* \"#utility.yul\":16485:16519   */\n      dup6\n      swap1\n      mstore\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6386:6410  ecrecover(hash, v, r, s) */\n      0x01\n      swap1\n        /* \"#utility.yul\":16326:16345   */\n      0xa0\n      add\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6386:6410  ecrecover(hash, v, r, s) */\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_350\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_350:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6424:6444  signer == address(0) */\n      dup2\n      and\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6420:6521  if (signer == address(0)) {... */\n      tag_351\n      jumpi\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6476:6477  0 */\n      0x00\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6480:6509  RecoverError.InvalidSignature */\n      0x01\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6460:6510  return (address(0), RecoverError.InvalidSignature) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n      jump(tag_345)\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6420:6521  if (signer == address(0)) {... */\n    tag_351:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6539:6545  signer */\n      swap2\n      pop\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":6547:6567  RecoverError.NoError */\n      0x00\n      swap1\n      pop\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":5081:6575  function tryRecover(... */\n    tag_345:\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":582:1093  function _throwError(RecoverError error) private pure {... */\n    tag_328:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":659:679  RecoverError.NoError */\n      0x00\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":650:655  error */\n      dup2\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":650:679  error == RecoverError.NoError */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_357\n      jumpi\n      tag_357\n      tag_355\n      jump\t// in\n    tag_357:\n      eq\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":646:1087  if (error == RecoverError.NoError) {... */\n      iszero\n      tag_358\n      jumpi\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":582:1093  function _throwError(RecoverError error) private pure {... */\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":646:1087  if (error == RecoverError.NoError) {... */\n    tag_358:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":755:784  RecoverError.InvalidSignature */\n      0x01\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":746:751  error */\n      dup2\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":746:784  error == RecoverError.InvalidSignature */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_363\n      jumpi\n      tag_363\n      tag_355\n      jump\t// in\n    tag_363:\n      eq\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":742:1087  if (error == RecoverError.InvalidSignature) {... */\n      iszero\n      tag_364\n      jumpi\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":800:834  revert(\"ECDSA: invalid signature\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16864:16866   */\n      0x20\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":800:834  revert(\"ECDSA: invalid signature\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16846:16867   */\n      mstore\n        /* \"#utility.yul\":16903:16905   */\n      0x18\n        /* \"#utility.yul\":16883:16901   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":16876:16906   */\n      mstore\n        /* \"#utility.yul\":16942:16968   */\n      0x45434453413a20696e76616c6964207369676e61747572650000000000000000\n        /* \"#utility.yul\":16922:16940   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":16915:16969   */\n      mstore\n        /* \"#utility.yul\":16986:17004   */\n      0x64\n      add\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":800:834  revert(\"ECDSA: invalid signature\") */\n      tag_130\n        /* \"#utility.yul\":16662:17010   */\n      jump\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":742:1087  if (error == RecoverError.InvalidSignature) {... */\n    tag_364:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":864:899  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":855:860  error */\n      dup2\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":855:899  error == RecoverError.InvalidSignatureLength */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_371\n      jumpi\n      tag_371\n      tag_355\n      jump\t// in\n    tag_371:\n      eq\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":851:1087  if (error == RecoverError.InvalidSignatureLength) {... */\n      iszero\n      tag_372\n      jumpi\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":915:956  revert(\"ECDSA: invalid signature length\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":17217:17219   */\n      0x20\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":915:956  revert(\"ECDSA: invalid signature length\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":17199:17220   */\n      mstore\n        /* \"#utility.yul\":17256:17258   */\n      0x1f\n        /* \"#utility.yul\":17236:17254   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":17229:17259   */\n      mstore\n        /* \"#utility.yul\":17295:17328   */\n      0x45434453413a20696e76616c6964207369676e6174757265206c656e67746800\n        /* \"#utility.yul\":17275:17293   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":17268:17329   */\n      mstore\n        /* \"#utility.yul\":17346:17364   */\n      0x64\n      add\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":915:956  revert(\"ECDSA: invalid signature length\") */\n      tag_130\n        /* \"#utility.yul\":17015:17370   */\n      jump\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":851:1087  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_372:\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":986:1016  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":977:982  error */\n      dup2\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":977:1016  error == RecoverError.InvalidSignatureS */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_379\n      jumpi\n      tag_379\n      tag_355\n      jump\t// in\n    tag_379:\n      eq\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":973:1087  if (error == RecoverError.InvalidSignatureS) {... */\n      iszero\n      tag_132\n      jumpi\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":1032:1076  revert(\"ECDSA: invalid signature 's' value\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":17577:17579   */\n      0x20\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":1032:1076  revert(\"ECDSA: invalid signature 's' value\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":17559:17580   */\n      mstore\n        /* \"#utility.yul\":17616:17618   */\n      0x22\n        /* \"#utility.yul\":17596:17614   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":17589:17619   */\n      mstore\n        /* \"#utility.yul\":17655:17689   */\n      0x45434453413a20696e76616c6964207369676e6174757265202773272076616c\n        /* \"#utility.yul\":17635:17653   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":17628:17690   */\n      mstore\n      shl(0xf0, 0x7565)\n        /* \"#utility.yul\":17706:17724   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":17699:17731   */\n      mstore\n        /* \"#utility.yul\":17748:17767   */\n      0x84\n      add\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":1032:1076  revert(\"ECDSA: invalid signature 's' value\") */\n      tag_130\n        /* \"#utility.yul\":17375:17773   */\n      jump\n        /* \"lib/TWAddress.sol\":7509:8201  function verifyCallResult(... */\n    tag_343:\n        /* \"lib/TWAddress.sol\":7655:7667  bytes memory */\n      0x60\n        /* \"lib/TWAddress.sol\":7683:7690  success */\n      dup4\n        /* \"lib/TWAddress.sol\":7679:8195  if (success) {... */\n      iszero\n      tag_385\n      jumpi\n      pop\n        /* \"lib/TWAddress.sol\":7713:7723  returndata */\n      dup2\n        /* \"lib/TWAddress.sol\":7706:7723  return returndata */\n      jump(tag_135)\n        /* \"lib/TWAddress.sol\":7679:8195  if (success) {... */\n    tag_385:\n        /* \"lib/TWAddress.sol\":7824:7841  returndata.length */\n      dup3\n      mload\n        /* \"lib/TWAddress.sol\":7824:7845  returndata.length > 0 */\n      iszero\n        /* \"lib/TWAddress.sol\":7820:8185  if (returndata.length > 0) {... */\n      tag_387\n      jumpi\n        /* \"lib/TWAddress.sol\":8018:8028  returndata */\n      dup3\n        /* \"lib/TWAddress.sol\":8012:8029  mload(returndata) */\n      mload\n        /* \"lib/TWAddress.sol\":8078:8093  returndata_size */\n      dup1\n        /* \"lib/TWAddress.sol\":8065:8075  returndata */\n      dup5\n        /* \"lib/TWAddress.sol\":8061:8063  32 */\n      0x20\n        /* \"lib/TWAddress.sol\":8057:8076  add(32, returndata) */\n      add\n        /* \"lib/TWAddress.sol\":8050:8094  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"lib/TWAddress.sol\":7820:8185  if (returndata.length > 0) {... */\n    tag_387:\n        /* \"lib/TWAddress.sol\":8157:8169  errorMessage */\n      dup2\n        /* \"lib/TWAddress.sol\":8150:8170  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_130\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_313:\n      dup3\n      dup1\n      sload\n      tag_390\n      swap1\n      tag_116\n      jump\t// in\n    tag_390:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_392\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_395)\n    tag_392:\n      dup3\n      0x1f\n      lt\n      tag_393\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_395)\n    tag_393:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_395\n      jumpi\n      swap2\n      dup3\n      add\n    tag_394:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_395\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_394)\n    tag_395:\n      pop\n      tag_396\n      swap3\n      swap2\n      pop\n      tag_397\n      jump\t// in\n    tag_396:\n      pop\n      swap1\n      jump\t// out\n    tag_397:\n    tag_398:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_396\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_398)\n        /* \"#utility.yul\":14:272   */\n    tag_400:\n        /* \"#utility.yul\":86:87   */\n      0x00\n        /* \"#utility.yul\":96:209   */\n    tag_406:\n        /* \"#utility.yul\":110:116   */\n      dup4\n        /* \"#utility.yul\":107:108   */\n      dup2\n        /* \"#utility.yul\":104:117   */\n      lt\n        /* \"#utility.yul\":96:209   */\n      iszero\n      tag_408\n      jumpi\n        /* \"#utility.yul\":186:197   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":180:198   */\n      mload\n        /* \"#utility.yul\":167:178   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":160:199   */\n      mstore\n        /* \"#utility.yul\":132:134   */\n      0x20\n        /* \"#utility.yul\":125:135   */\n      add\n        /* \"#utility.yul\":96:209   */\n      jump(tag_406)\n    tag_408:\n        /* \"#utility.yul\":227:233   */\n      dup4\n        /* \"#utility.yul\":224:225   */\n      dup2\n        /* \"#utility.yul\":221:234   */\n      gt\n        /* \"#utility.yul\":218:266   */\n      iszero\n      tag_259\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":262:263   */\n      0x00\n        /* \"#utility.yul\":244:260   */\n      swap2\n      add\n        /* \"#utility.yul\":237:264   */\n      mstore\n        /* \"#utility.yul\":14:272   */\n      jump\t// out\n        /* \"#utility.yul\":277:535   */\n    tag_401:\n        /* \"#utility.yul\":319:322   */\n      0x00\n        /* \"#utility.yul\":357:362   */\n      dup2\n        /* \"#utility.yul\":351:363   */\n      mload\n        /* \"#utility.yul\":384:390   */\n      dup1\n        /* \"#utility.yul\":379:382   */\n      dup5\n        /* \"#utility.yul\":372:391   */\n      mstore\n        /* \"#utility.yul\":400:463   */\n      tag_411\n        /* \"#utility.yul\":456:462   */\n      dup2\n        /* \"#utility.yul\":449:453   */\n      0x20\n        /* \"#utility.yul\":444:447   */\n      dup7\n        /* \"#utility.yul\":440:454   */\n      add\n        /* \"#utility.yul\":433:437   */\n      0x20\n        /* \"#utility.yul\":426:431   */\n      dup7\n        /* \"#utility.yul\":422:438   */\n      add\n        /* \"#utility.yul\":400:463   */\n      tag_400\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":517:519   */\n      0x1f\n        /* \"#utility.yul\":496:511   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":492:521   */\n      and\n        /* \"#utility.yul\":483:522   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":524:528   */\n      0x20\n        /* \"#utility.yul\":479:529   */\n      add\n      swap3\n        /* \"#utility.yul\":277:535   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":540:760   */\n    tag_30:\n        /* \"#utility.yul\":689:691   */\n      0x20\n        /* \"#utility.yul\":678:687   */\n      dup2\n        /* \"#utility.yul\":671:692   */\n      mstore\n        /* \"#utility.yul\":652:656   */\n      0x00\n        /* \"#utility.yul\":709:754   */\n      tag_135\n        /* \"#utility.yul\":750:752   */\n      0x20\n        /* \"#utility.yul\":739:748   */\n      dup4\n        /* \"#utility.yul\":735:753   */\n      add\n        /* \"#utility.yul\":727:733   */\n      dup5\n        /* \"#utility.yul\":709:754   */\n      tag_401\n      jump\t// in\n        /* \"#utility.yul\":765:938   */\n    tag_402:\n        /* \"#utility.yul\":833:853   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":882:913   */\n      dup2\n      and\n        /* \"#utility.yul\":872:914   */\n      dup2\n      eq\n        /* \"#utility.yul\":862:932   */\n      tag_415\n      jumpi\n        /* \"#utility.yul\":928:929   */\n      0x00\n        /* \"#utility.yul\":925:926   */\n      dup1\n        /* \"#utility.yul\":918:930   */\n      revert\n        /* \"#utility.yul\":862:932   */\n    tag_415:\n        /* \"#utility.yul\":765:938   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":943:1197   */\n    tag_33:\n        /* \"#utility.yul\":1011:1017   */\n      0x00\n        /* \"#utility.yul\":1019:1025   */\n      dup1\n        /* \"#utility.yul\":1072:1074   */\n      0x40\n        /* \"#utility.yul\":1060:1069   */\n      dup4\n        /* \"#utility.yul\":1051:1058   */\n      dup6\n        /* \"#utility.yul\":1047:1070   */\n      sub\n        /* \"#utility.yul\":1043:1075   */\n      slt\n        /* \"#utility.yul\":1040:1092   */\n      iszero\n      tag_417\n      jumpi\n        /* \"#utility.yul\":1088:1089   */\n      0x00\n        /* \"#utility.yul\":1085:1086   */\n      dup1\n        /* \"#utility.yul\":1078:1090   */\n      revert\n        /* \"#utility.yul\":1040:1092   */\n    tag_417:\n        /* \"#utility.yul\":1111:1140   */\n      tag_418\n        /* \"#utility.yul\":1130:1139   */\n      dup4\n        /* \"#utility.yul\":1111:1140   */\n      tag_402\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":1101:1140   */\n      swap5\n        /* \"#utility.yul\":1187:1189   */\n      0x20\n        /* \"#utility.yul\":1172:1190   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1159:1191   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":943:1197   */\n      jump\t// out\n        /* \"#utility.yul\":1394:1580   */\n    tag_39:\n        /* \"#utility.yul\":1453:1459   */\n      0x00\n        /* \"#utility.yul\":1506:1508   */\n      0x20\n        /* \"#utility.yul\":1494:1503   */\n      dup3\n        /* \"#utility.yul\":1485:1492   */\n      dup5\n        /* \"#utility.yul\":1481:1504   */\n      sub\n        /* \"#utility.yul\":1477:1509   */\n      slt\n        /* \"#utility.yul\":1474:1526   */\n      iszero\n      tag_421\n      jumpi\n        /* \"#utility.yul\":1522:1523   */\n      0x00\n        /* \"#utility.yul\":1519:1520   */\n      dup1\n        /* \"#utility.yul\":1512:1524   */\n      revert\n        /* \"#utility.yul\":1474:1526   */\n    tag_421:\n        /* \"#utility.yul\":1545:1574   */\n      tag_135\n        /* \"#utility.yul\":1564:1573   */\n      dup3\n        /* \"#utility.yul\":1545:1574   */\n      tag_402\n      jump\t// in\n        /* \"#utility.yul\":1767:2095   */\n    tag_47:\n        /* \"#utility.yul\":1844:1850   */\n      0x00\n        /* \"#utility.yul\":1852:1858   */\n      dup1\n        /* \"#utility.yul\":1860:1866   */\n      0x00\n        /* \"#utility.yul\":1913:1915   */\n      0x60\n        /* \"#utility.yul\":1901:1910   */\n      dup5\n        /* \"#utility.yul\":1892:1899   */\n      dup7\n        /* \"#utility.yul\":1888:1911   */\n      sub\n        /* \"#utility.yul\":1884:1916   */\n      slt\n        /* \"#utility.yul\":1881:1933   */\n      iszero\n      tag_425\n      jumpi\n        /* \"#utility.yul\":1929:1930   */\n      0x00\n        /* \"#utility.yul\":1926:1927   */\n      dup1\n        /* \"#utility.yul\":1919:1931   */\n      revert\n        /* \"#utility.yul\":1881:1933   */\n    tag_425:\n        /* \"#utility.yul\":1952:1981   */\n      tag_426\n        /* \"#utility.yul\":1971:1980   */\n      dup5\n        /* \"#utility.yul\":1952:1981   */\n      tag_402\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":1942:1981   */\n      swap3\n      pop\n        /* \"#utility.yul\":2000:2038   */\n      tag_427\n        /* \"#utility.yul\":2034:2036   */\n      0x20\n        /* \"#utility.yul\":2023:2032   */\n      dup6\n        /* \"#utility.yul\":2019:2037   */\n      add\n        /* \"#utility.yul\":2000:2038   */\n      tag_402\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":1990:2038   */\n      swap2\n      pop\n        /* \"#utility.yul\":2085:2087   */\n      0x40\n        /* \"#utility.yul\":2074:2083   */\n      dup5\n        /* \"#utility.yul\":2070:2088   */\n      add\n        /* \"#utility.yul\":2057:2089   */\n      calldataload\n        /* \"#utility.yul\":2047:2089   */\n      swap1\n      pop\n        /* \"#utility.yul\":1767:2095   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2471:2651   */\n    tag_64:\n        /* \"#utility.yul\":2530:2536   */\n      0x00\n        /* \"#utility.yul\":2583:2585   */\n      0x20\n        /* \"#utility.yul\":2571:2580   */\n      dup3\n        /* \"#utility.yul\":2562:2569   */\n      dup5\n        /* \"#utility.yul\":2558:2581   */\n      sub\n        /* \"#utility.yul\":2554:2586   */\n      slt\n        /* \"#utility.yul\":2551:2603   */\n      iszero\n      tag_431\n      jumpi\n        /* \"#utility.yul\":2599:2600   */\n      0x00\n        /* \"#utility.yul\":2596:2597   */\n      dup1\n        /* \"#utility.yul\":2589:2601   */\n      revert\n        /* \"#utility.yul\":2551:2603   */\n    tag_431:\n      pop\n        /* \"#utility.yul\":2622:2645   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2471:2651   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2864:2991   */\n    tag_201:\n        /* \"#utility.yul\":2925:2935   */\n      0x4e487b71\n        /* \"#utility.yul\":2920:2923   */\n      0xe0\n        /* \"#utility.yul\":2916:2936   */\n      shl\n        /* \"#utility.yul\":2913:2914   */\n      0x00\n        /* \"#utility.yul\":2906:2937   */\n      mstore\n        /* \"#utility.yul\":2956:2960   */\n      0x41\n        /* \"#utility.yul\":2953:2954   */\n      0x04\n        /* \"#utility.yul\":2946:2961   */\n      mstore\n        /* \"#utility.yul\":2980:2984   */\n      0x24\n        /* \"#utility.yul\":2977:2978   */\n      0x00\n        /* \"#utility.yul\":2970:2985   */\n      revert\n        /* \"#utility.yul\":2996:3918   */\n    tag_83:\n        /* \"#utility.yul\":3065:3071   */\n      0x00\n        /* \"#utility.yul\":3118:3120   */\n      0x20\n        /* \"#utility.yul\":3106:3115   */\n      dup3\n        /* \"#utility.yul\":3097:3104   */\n      dup5\n        /* \"#utility.yul\":3093:3116   */\n      sub\n        /* \"#utility.yul\":3089:3121   */\n      slt\n        /* \"#utility.yul\":3086:3138   */\n      iszero\n      tag_435\n      jumpi\n        /* \"#utility.yul\":3134:3135   */\n      0x00\n        /* \"#utility.yul\":3131:3132   */\n      dup1\n        /* \"#utility.yul\":3124:3136   */\n      revert\n        /* \"#utility.yul\":3086:3138   */\n    tag_435:\n        /* \"#utility.yul\":3174:3183   */\n      dup2\n        /* \"#utility.yul\":3161:3184   */\n      calldataload\n        /* \"#utility.yul\":3203:3221   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3244:3246   */\n      dup1\n        /* \"#utility.yul\":3236:3242   */\n      dup3\n        /* \"#utility.yul\":3233:3247   */\n      gt\n        /* \"#utility.yul\":3230:3264   */\n      iszero\n      tag_436\n      jumpi\n        /* \"#utility.yul\":3260:3261   */\n      0x00\n        /* \"#utility.yul\":3257:3258   */\n      dup1\n        /* \"#utility.yul\":3250:3262   */\n      revert\n        /* \"#utility.yul\":3230:3264   */\n    tag_436:\n        /* \"#utility.yul\":3298:3304   */\n      dup2\n        /* \"#utility.yul\":3287:3296   */\n      dup5\n        /* \"#utility.yul\":3283:3305   */\n      add\n        /* \"#utility.yul\":3273:3305   */\n      swap2\n      pop\n        /* \"#utility.yul\":3343:3350   */\n      dup5\n        /* \"#utility.yul\":3336:3340   */\n      0x1f\n        /* \"#utility.yul\":3332:3334   */\n      dup4\n        /* \"#utility.yul\":3328:3341   */\n      add\n        /* \"#utility.yul\":3324:3351   */\n      slt\n        /* \"#utility.yul\":3314:3369   */\n      tag_437\n      jumpi\n        /* \"#utility.yul\":3365:3366   */\n      0x00\n        /* \"#utility.yul\":3362:3363   */\n      dup1\n        /* \"#utility.yul\":3355:3367   */\n      revert\n        /* \"#utility.yul\":3314:3369   */\n    tag_437:\n        /* \"#utility.yul\":3401:3403   */\n      dup2\n        /* \"#utility.yul\":3388:3404   */\n      calldataload\n        /* \"#utility.yul\":3423:3425   */\n      dup2\n        /* \"#utility.yul\":3419:3421   */\n      dup2\n        /* \"#utility.yul\":3416:3426   */\n      gt\n        /* \"#utility.yul\":3413:3449   */\n      iszero\n      tag_439\n      jumpi\n        /* \"#utility.yul\":3429:3447   */\n      tag_439\n      tag_201\n      jump\t// in\n    tag_439:\n        /* \"#utility.yul\":3504:3506   */\n      0x40\n        /* \"#utility.yul\":3498:3507   */\n      mload\n        /* \"#utility.yul\":3472:3474   */\n      0x1f\n        /* \"#utility.yul\":3558:3571   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":3554:3576   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":3578:3580   */\n      0x3f\n        /* \"#utility.yul\":3550:3581   */\n      add\n        /* \"#utility.yul\":3546:3586   */\n      and\n        /* \"#utility.yul\":3534:3587   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":3602:3620   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":3622:3644   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":3599:3645   */\n      or\n        /* \"#utility.yul\":3596:3668   */\n      iszero\n      tag_441\n      jumpi\n        /* \"#utility.yul\":3648:3666   */\n      tag_441\n      tag_201\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":3688:3698   */\n      dup2\n        /* \"#utility.yul\":3684:3686   */\n      0x40\n        /* \"#utility.yul\":3677:3699   */\n      mstore\n        /* \"#utility.yul\":3723:3725   */\n      dup3\n        /* \"#utility.yul\":3715:3721   */\n      dup2\n        /* \"#utility.yul\":3708:3726   */\n      mstore\n        /* \"#utility.yul\":3763:3770   */\n      dup8\n        /* \"#utility.yul\":3758:3760   */\n      0x20\n        /* \"#utility.yul\":3753:3755   */\n      dup5\n        /* \"#utility.yul\":3749:3751   */\n      dup8\n        /* \"#utility.yul\":3745:3756   */\n      add\n        /* \"#utility.yul\":3741:3761   */\n      add\n        /* \"#utility.yul\":3738:3771   */\n      gt\n        /* \"#utility.yul\":3735:3788   */\n      iszero\n      tag_442\n      jumpi\n        /* \"#utility.yul\":3784:3785   */\n      0x00\n        /* \"#utility.yul\":3781:3782   */\n      dup1\n        /* \"#utility.yul\":3774:3786   */\n      revert\n        /* \"#utility.yul\":3735:3788   */\n    tag_442:\n        /* \"#utility.yul\":3840:3842   */\n      dup3\n        /* \"#utility.yul\":3835:3837   */\n      0x20\n        /* \"#utility.yul\":3831:3833   */\n      dup7\n        /* \"#utility.yul\":3827:3838   */\n      add\n        /* \"#utility.yul\":3822:3824   */\n      0x20\n        /* \"#utility.yul\":3814:3820   */\n      dup4\n        /* \"#utility.yul\":3810:3825   */\n      add\n        /* \"#utility.yul\":3797:3843   */\n      calldatacopy\n        /* \"#utility.yul\":3885:3886   */\n      0x00\n        /* \"#utility.yul\":3863:3878   */\n      swap3\n      dup2\n      add\n        /* \"#utility.yul\":3880:3882   */\n      0x20\n        /* \"#utility.yul\":3859:3883   */\n      add\n        /* \"#utility.yul\":3852:3887   */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"#utility.yul\":3867:3873   */\n      swap6\n        /* \"#utility.yul\":2996:3918   */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3923:4549   */\n    tag_98:\n        /* \"#utility.yul\":4020:4026   */\n      0x00\n        /* \"#utility.yul\":4028:4034   */\n      dup1\n        /* \"#utility.yul\":4081:4083   */\n      0x20\n        /* \"#utility.yul\":4069:4078   */\n      dup4\n        /* \"#utility.yul\":4060:4067   */\n      dup6\n        /* \"#utility.yul\":4056:4079   */\n      sub\n        /* \"#utility.yul\":4052:4084   */\n      slt\n        /* \"#utility.yul\":4049:4101   */\n      iszero\n      tag_444\n      jumpi\n        /* \"#utility.yul\":4097:4098   */\n      0x00\n        /* \"#utility.yul\":4094:4095   */\n      dup1\n        /* \"#utility.yul\":4087:4099   */\n      revert\n        /* \"#utility.yul\":4049:4101   */\n    tag_444:\n        /* \"#utility.yul\":4137:4146   */\n      dup3\n        /* \"#utility.yul\":4124:4147   */\n      calldataload\n        /* \"#utility.yul\":4166:4184   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4207:4209   */\n      dup1\n        /* \"#utility.yul\":4199:4205   */\n      dup3\n        /* \"#utility.yul\":4196:4210   */\n      gt\n        /* \"#utility.yul\":4193:4227   */\n      iszero\n      tag_445\n      jumpi\n        /* \"#utility.yul\":4223:4224   */\n      0x00\n        /* \"#utility.yul\":4220:4221   */\n      dup1\n        /* \"#utility.yul\":4213:4225   */\n      revert\n        /* \"#utility.yul\":4193:4227   */\n    tag_445:\n        /* \"#utility.yul\":4261:4267   */\n      dup2\n        /* \"#utility.yul\":4250:4259   */\n      dup6\n        /* \"#utility.yul\":4246:4268   */\n      add\n        /* \"#utility.yul\":4236:4268   */\n      swap2\n      pop\n        /* \"#utility.yul\":4306:4313   */\n      dup6\n        /* \"#utility.yul\":4299:4303   */\n      0x1f\n        /* \"#utility.yul\":4295:4297   */\n      dup4\n        /* \"#utility.yul\":4291:4304   */\n      add\n        /* \"#utility.yul\":4287:4314   */\n      slt\n        /* \"#utility.yul\":4277:4332   */\n      tag_446\n      jumpi\n        /* \"#utility.yul\":4328:4329   */\n      0x00\n        /* \"#utility.yul\":4325:4326   */\n      dup1\n        /* \"#utility.yul\":4318:4330   */\n      revert\n        /* \"#utility.yul\":4277:4332   */\n    tag_446:\n        /* \"#utility.yul\":4368:4370   */\n      dup2\n        /* \"#utility.yul\":4355:4371   */\n      calldataload\n        /* \"#utility.yul\":4394:4396   */\n      dup2\n        /* \"#utility.yul\":4386:4392   */\n      dup2\n        /* \"#utility.yul\":4383:4397   */\n      gt\n        /* \"#utility.yul\":4380:4414   */\n      iszero\n      tag_447\n      jumpi\n        /* \"#utility.yul\":4410:4411   */\n      0x00\n        /* \"#utility.yul\":4407:4408   */\n      dup1\n        /* \"#utility.yul\":4400:4412   */\n      revert\n        /* \"#utility.yul\":4380:4414   */\n    tag_447:\n        /* \"#utility.yul\":4463:4470   */\n      dup7\n        /* \"#utility.yul\":4458:4460   */\n      0x20\n        /* \"#utility.yul\":4448:4454   */\n      dup3\n        /* \"#utility.yul\":4445:4446   */\n      0x05\n        /* \"#utility.yul\":4441:4455   */\n      shl\n        /* \"#utility.yul\":4437:4439   */\n      dup6\n        /* \"#utility.yul\":4433:4456   */\n      add\n        /* \"#utility.yul\":4429:4461   */\n      add\n        /* \"#utility.yul\":4426:4471   */\n      gt\n        /* \"#utility.yul\":4423:4488   */\n      iszero\n      tag_448\n      jumpi\n        /* \"#utility.yul\":4484:4485   */\n      0x00\n        /* \"#utility.yul\":4481:4482   */\n      dup1\n        /* \"#utility.yul\":4474:4486   */\n      revert\n        /* \"#utility.yul\":4423:4488   */\n    tag_448:\n        /* \"#utility.yul\":4515:4517   */\n      0x20\n        /* \"#utility.yul\":4507:4518   */\n      swap3\n      swap1\n      swap3\n      add\n      swap7\n        /* \"#utility.yul\":4537:4543   */\n      swap2\n      swap6\n      pop\n        /* \"#utility.yul\":3923:4549   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4554:5355   */\n    tag_101:\n        /* \"#utility.yul\":4714:4718   */\n      0x00\n        /* \"#utility.yul\":4743:4745   */\n      0x20\n        /* \"#utility.yul\":4783:4785   */\n      dup1\n        /* \"#utility.yul\":4772:4781   */\n      dup4\n        /* \"#utility.yul\":4768:4786   */\n      add\n        /* \"#utility.yul\":4813:4815   */\n      dup2\n        /* \"#utility.yul\":4802:4811   */\n      dup5\n        /* \"#utility.yul\":4795:4816   */\n      mstore\n        /* \"#utility.yul\":4836:4842   */\n      dup1\n        /* \"#utility.yul\":4871:4877   */\n      dup6\n        /* \"#utility.yul\":4865:4878   */\n      mload\n        /* \"#utility.yul\":4902:4908   */\n      dup1\n        /* \"#utility.yul\":4894:4900   */\n      dup4\n        /* \"#utility.yul\":4887:4909   */\n      mstore\n        /* \"#utility.yul\":4940:4942   */\n      0x40\n        /* \"#utility.yul\":4929:4938   */\n      dup7\n        /* \"#utility.yul\":4925:4943   */\n      add\n        /* \"#utility.yul\":4918:4943   */\n      swap2\n      pop\n        /* \"#utility.yul\":5002:5004   */\n      0x40\n        /* \"#utility.yul\":4992:4998   */\n      dup2\n        /* \"#utility.yul\":4989:4990   */\n      0x05\n        /* \"#utility.yul\":4985:4999   */\n      shl\n        /* \"#utility.yul\":4974:4983   */\n      dup8\n        /* \"#utility.yul\":4970:5000   */\n      add\n        /* \"#utility.yul\":4966:5005   */\n      add\n        /* \"#utility.yul\":4952:5005   */\n      swap3\n      pop\n        /* \"#utility.yul\":5040:5042   */\n      dup4\n        /* \"#utility.yul\":5032:5038   */\n      dup8\n        /* \"#utility.yul\":5028:5043   */\n      add\n        /* \"#utility.yul\":5061:5062   */\n      0x00\n        /* \"#utility.yul\":5071:5326   */\n    tag_450:\n        /* \"#utility.yul\":5085:5091   */\n      dup3\n        /* \"#utility.yul\":5082:5083   */\n      dup2\n        /* \"#utility.yul\":5079:5092   */\n      lt\n        /* \"#utility.yul\":5071:5326   */\n      iszero\n      tag_452\n      jumpi\n        /* \"#utility.yul\":5178:5180   */\n      0x3f\n        /* \"#utility.yul\":5174:5181   */\n      not\n        /* \"#utility.yul\":5162:5171   */\n      dup9\n        /* \"#utility.yul\":5154:5160   */\n      dup7\n        /* \"#utility.yul\":5150:5172   */\n      sub\n        /* \"#utility.yul\":5146:5182   */\n      add\n        /* \"#utility.yul\":5141:5144   */\n      dup5\n        /* \"#utility.yul\":5134:5183   */\n      mstore\n        /* \"#utility.yul\":5206:5246   */\n      tag_453\n        /* \"#utility.yul\":5239:5245   */\n      dup6\n        /* \"#utility.yul\":5230:5236   */\n      dup4\n        /* \"#utility.yul\":5224:5237   */\n      mload\n        /* \"#utility.yul\":5206:5246   */\n      tag_401\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":5196:5246   */\n      swap5\n      pop\n        /* \"#utility.yul\":5304:5316   */\n      swap3\n      dup6\n      add\n      swap3\n        /* \"#utility.yul\":5269:5284   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":5107:5108   */\n      0x01\n        /* \"#utility.yul\":5100:5109   */\n      add\n        /* \"#utility.yul\":5071:5326   */\n      jump(tag_450)\n    tag_452:\n      pop\n        /* \"#utility.yul\":5343:5349   */\n      swap3\n      swap8\n        /* \"#utility.yul\":4554:5355   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5360:6053   */\n    tag_104:\n        /* \"#utility.yul\":5471:5477   */\n      0x00\n        /* \"#utility.yul\":5479:5485   */\n      dup1\n        /* \"#utility.yul\":5487:5493   */\n      0x00\n        /* \"#utility.yul\":5495:5501   */\n      dup1\n        /* \"#utility.yul\":5503:5509   */\n      0x00\n        /* \"#utility.yul\":5511:5517   */\n      dup1\n        /* \"#utility.yul\":5519:5525   */\n      0x00\n        /* \"#utility.yul\":5572:5575   */\n      0xe0\n        /* \"#utility.yul\":5560:5569   */\n      dup9\n        /* \"#utility.yul\":5551:5558   */\n      dup11\n        /* \"#utility.yul\":5547:5570   */\n      sub\n        /* \"#utility.yul\":5543:5576   */\n      slt\n        /* \"#utility.yul\":5540:5593   */\n      iszero\n      tag_455\n      jumpi\n        /* \"#utility.yul\":5589:5590   */\n      0x00\n        /* \"#utility.yul\":5586:5587   */\n      dup1\n        /* \"#utility.yul\":5579:5591   */\n      revert\n        /* \"#utility.yul\":5540:5593   */\n    tag_455:\n        /* \"#utility.yul\":5612:5641   */\n      tag_456\n        /* \"#utility.yul\":5631:5640   */\n      dup9\n        /* \"#utility.yul\":5612:5641   */\n      tag_402\n      jump\t// in\n    tag_456:\n        /* \"#utility.yul\":5602:5641   */\n      swap7\n      pop\n        /* \"#utility.yul\":5660:5698   */\n      tag_457\n        /* \"#utility.yul\":5694:5696   */\n      0x20\n        /* \"#utility.yul\":5683:5692   */\n      dup10\n        /* \"#utility.yul\":5679:5697   */\n      add\n        /* \"#utility.yul\":5660:5698   */\n      tag_402\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":5650:5698   */\n      swap6\n      pop\n        /* \"#utility.yul\":5745:5747   */\n      0x40\n        /* \"#utility.yul\":5734:5743   */\n      dup9\n        /* \"#utility.yul\":5730:5748   */\n      add\n        /* \"#utility.yul\":5717:5749   */\n      calldataload\n        /* \"#utility.yul\":5707:5749   */\n      swap5\n      pop\n        /* \"#utility.yul\":5796:5798   */\n      0x60\n        /* \"#utility.yul\":5785:5794   */\n      dup9\n        /* \"#utility.yul\":5781:5799   */\n      add\n        /* \"#utility.yul\":5768:5800   */\n      calldataload\n        /* \"#utility.yul\":5758:5800   */\n      swap4\n      pop\n        /* \"#utility.yul\":5850:5853   */\n      0x80\n        /* \"#utility.yul\":5839:5848   */\n      dup9\n        /* \"#utility.yul\":5835:5854   */\n      add\n        /* \"#utility.yul\":5822:5855   */\n      calldataload\n        /* \"#utility.yul\":5895:5899   */\n      0xff\n        /* \"#utility.yul\":5888:5893   */\n      dup2\n        /* \"#utility.yul\":5884:5900   */\n      and\n        /* \"#utility.yul\":5877:5882   */\n      dup2\n        /* \"#utility.yul\":5874:5901   */\n      eq\n        /* \"#utility.yul\":5864:5919   */\n      tag_458\n      jumpi\n        /* \"#utility.yul\":5915:5916   */\n      0x00\n        /* \"#utility.yul\":5912:5913   */\n      dup1\n        /* \"#utility.yul\":5905:5917   */\n      revert\n        /* \"#utility.yul\":5864:5919   */\n    tag_458:\n        /* \"#utility.yul\":5360:6053   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":5938:5943   */\n      swap5\n        /* \"#utility.yul\":5990:5993   */\n      0xa0\n        /* \"#utility.yul\":5975:5994   */\n      dup5\n      add\n        /* \"#utility.yul\":5962:5995   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":6042:6045   */\n      0xc0\n        /* \"#utility.yul\":6027:6046   */\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":6014:6047   */\n      calldataload\n      swap3\n        /* \"#utility.yul\":5360:6053   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6058:6318   */\n    tag_108:\n        /* \"#utility.yul\":6126:6132   */\n      0x00\n        /* \"#utility.yul\":6134:6140   */\n      dup1\n        /* \"#utility.yul\":6187:6189   */\n      0x40\n        /* \"#utility.yul\":6175:6184   */\n      dup4\n        /* \"#utility.yul\":6166:6173   */\n      dup6\n        /* \"#utility.yul\":6162:6185   */\n      sub\n        /* \"#utility.yul\":6158:6190   */\n      slt\n        /* \"#utility.yul\":6155:6207   */\n      iszero\n      tag_460\n      jumpi\n        /* \"#utility.yul\":6203:6204   */\n      0x00\n        /* \"#utility.yul\":6200:6201   */\n      dup1\n        /* \"#utility.yul\":6193:6205   */\n      revert\n        /* \"#utility.yul\":6155:6207   */\n    tag_460:\n        /* \"#utility.yul\":6226:6255   */\n      tag_461\n        /* \"#utility.yul\":6245:6254   */\n      dup4\n        /* \"#utility.yul\":6226:6255   */\n      tag_402\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":6216:6255   */\n      swap2\n      pop\n        /* \"#utility.yul\":6274:6312   */\n      tag_462\n        /* \"#utility.yul\":6308:6310   */\n      0x20\n        /* \"#utility.yul\":6297:6306   */\n      dup5\n        /* \"#utility.yul\":6293:6311   */\n      add\n        /* \"#utility.yul\":6274:6312   */\n      tag_402\n      jump\t// in\n    tag_462:\n        /* \"#utility.yul\":6264:6312   */\n      swap1\n      pop\n        /* \"#utility.yul\":6058:6318   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6323:6703   */\n    tag_116:\n        /* \"#utility.yul\":6402:6403   */\n      0x01\n        /* \"#utility.yul\":6398:6410   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":6445:6457   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":6466:6527   */\n      tag_464\n      jumpi\n        /* \"#utility.yul\":6520:6524   */\n      0x7f\n        /* \"#utility.yul\":6512:6518   */\n      dup3\n        /* \"#utility.yul\":6508:6525   */\n      and\n        /* \"#utility.yul\":6498:6525   */\n      swap2\n      pop\n        /* \"#utility.yul\":6466:6527   */\n    tag_464:\n        /* \"#utility.yul\":6573:6575   */\n      0x20\n        /* \"#utility.yul\":6565:6571   */\n      dup3\n        /* \"#utility.yul\":6562:6576   */\n      lt\n        /* \"#utility.yul\":6542:6560   */\n      dup2\n        /* \"#utility.yul\":6539:6577   */\n      eq\n        /* \"#utility.yul\":6536:6697   */\n      iszero\n      tag_321\n      jumpi\n        /* \"#utility.yul\":6619:6629   */\n      0x4e487b71\n        /* \"#utility.yul\":6614:6617   */\n      0xe0\n        /* \"#utility.yul\":6610:6630   */\n      shl\n        /* \"#utility.yul\":6607:6608   */\n      0x00\n        /* \"#utility.yul\":6600:6631   */\n      mstore\n        /* \"#utility.yul\":6654:6658   */\n      0x22\n        /* \"#utility.yul\":6651:6652   */\n      0x04\n        /* \"#utility.yul\":6644:6659   */\n      mstore\n        /* \"#utility.yul\":6682:6686   */\n      0x24\n        /* \"#utility.yul\":6679:6680   */\n      0x00\n        /* \"#utility.yul\":6672:6687   */\n      revert\n        /* \"#utility.yul\":7051:7178   */\n    tag_403:\n        /* \"#utility.yul\":7112:7122   */\n      0x4e487b71\n        /* \"#utility.yul\":7107:7110   */\n      0xe0\n        /* \"#utility.yul\":7103:7123   */\n      shl\n        /* \"#utility.yul\":7100:7101   */\n      0x00\n        /* \"#utility.yul\":7093:7124   */\n      mstore\n        /* \"#utility.yul\":7143:7147   */\n      0x11\n        /* \"#utility.yul\":7140:7141   */\n      0x04\n        /* \"#utility.yul\":7133:7148   */\n      mstore\n        /* \"#utility.yul\":7167:7171   */\n      0x24\n        /* \"#utility.yul\":7164:7165   */\n      0x00\n        /* \"#utility.yul\":7157:7172   */\n      revert\n        /* \"#utility.yul\":7183:7311   */\n    tag_152:\n        /* \"#utility.yul\":7223:7226   */\n      0x00\n        /* \"#utility.yul\":7254:7255   */\n      dup3\n        /* \"#utility.yul\":7250:7256   */\n      not\n        /* \"#utility.yul\":7247:7248   */\n      dup3\n        /* \"#utility.yul\":7244:7257   */\n      gt\n        /* \"#utility.yul\":7241:7280   */\n      iszero\n      tag_470\n      jumpi\n        /* \"#utility.yul\":7260:7278   */\n      tag_470\n      tag_403\n      jump\t// in\n    tag_470:\n      pop\n        /* \"#utility.yul\":7296:7305   */\n      add\n      swap1\n        /* \"#utility.yul\":7183:7311   */\n      jump\t// out\n        /* \"#utility.yul\":8770:8897   */\n    tag_210:\n        /* \"#utility.yul\":8831:8841   */\n      0x4e487b71\n        /* \"#utility.yul\":8826:8829   */\n      0xe0\n        /* \"#utility.yul\":8822:8842   */\n      shl\n        /* \"#utility.yul\":8819:8820   */\n      0x00\n        /* \"#utility.yul\":8812:8843   */\n      mstore\n        /* \"#utility.yul\":8862:8866   */\n      0x32\n        /* \"#utility.yul\":8859:8860   */\n      0x04\n        /* \"#utility.yul\":8852:8867   */\n      mstore\n        /* \"#utility.yul\":8886:8890   */\n      0x24\n        /* \"#utility.yul\":8883:8884   */\n      0x00\n        /* \"#utility.yul\":8876:8891   */\n      revert\n        /* \"#utility.yul\":8902:9423   */\n    tag_212:\n        /* \"#utility.yul\":8979:8983   */\n      0x00\n        /* \"#utility.yul\":8985:8991   */\n      dup1\n        /* \"#utility.yul\":9045:9056   */\n      dup4\n        /* \"#utility.yul\":9032:9057   */\n      calldataload\n        /* \"#utility.yul\":9139:9141   */\n      0x1e\n        /* \"#utility.yul\":9135:9142   */\n      not\n        /* \"#utility.yul\":9124:9132   */\n      dup5\n        /* \"#utility.yul\":9108:9122   */\n      calldatasize\n        /* \"#utility.yul\":9104:9133   */\n      sub\n        /* \"#utility.yul\":9100:9143   */\n      add\n        /* \"#utility.yul\":9080:9098   */\n      dup2\n        /* \"#utility.yul\":9076:9144   */\n      slt\n        /* \"#utility.yul\":9066:9162   */\n      tag_477\n      jumpi\n        /* \"#utility.yul\":9158:9159   */\n      0x00\n        /* \"#utility.yul\":9155:9156   */\n      dup1\n        /* \"#utility.yul\":9148:9160   */\n      revert\n        /* \"#utility.yul\":9066:9162   */\n    tag_477:\n        /* \"#utility.yul\":9185:9218   */\n      dup4\n      add\n        /* \"#utility.yul\":9237:9257   */\n      dup1\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":9280:9298   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":9269:9299   */\n      dup3\n      gt\n        /* \"#utility.yul\":9266:9316   */\n      iszero\n      tag_478\n      jumpi\n        /* \"#utility.yul\":9312:9313   */\n      0x00\n        /* \"#utility.yul\":9309:9310   */\n      dup1\n        /* \"#utility.yul\":9302:9314   */\n      revert\n        /* \"#utility.yul\":9266:9316   */\n    tag_478:\n        /* \"#utility.yul\":9345:9349   */\n      0x20\n        /* \"#utility.yul\":9333:9350   */\n      add\n      swap2\n      pop\n        /* \"#utility.yul\":9376:9390   */\n      calldatasize\n        /* \"#utility.yul\":9372:9399   */\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":9362:9400   */\n      dup3\n      sgt\n        /* \"#utility.yul\":9359:9417   */\n      iszero\n      tag_479\n      jumpi\n        /* \"#utility.yul\":9413:9414   */\n      0x00\n        /* \"#utility.yul\":9410:9411   */\n      dup1\n        /* \"#utility.yul\":9403:9415   */\n      revert\n        /* \"#utility.yul\":9359:9417   */\n    tag_479:\n        /* \"#utility.yul\":8902:9423   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9428:9563   */\n    tag_217:\n        /* \"#utility.yul\":9467:9470   */\n      0x00\n      not(0x00)\n        /* \"#utility.yul\":9488:9505   */\n      dup3\n      eq\n        /* \"#utility.yul\":9485:9528   */\n      iszero\n      tag_482\n      jumpi\n        /* \"#utility.yul\":9508:9526   */\n      tag_482\n      tag_403\n      jump\t// in\n    tag_482:\n      pop\n        /* \"#utility.yul\":9555:9556   */\n      0x01\n        /* \"#utility.yul\":9544:9557   */\n      add\n      swap1\n        /* \"#utility.yul\":9428:9563   */\n      jump\t// out\n        /* \"#utility.yul\":14563:14688   */\n    tag_289:\n        /* \"#utility.yul\":14603:14607   */\n      0x00\n        /* \"#utility.yul\":14631:14632   */\n      dup3\n        /* \"#utility.yul\":14628:14629   */\n      dup3\n        /* \"#utility.yul\":14625:14633   */\n      lt\n        /* \"#utility.yul\":14622:14656   */\n      iszero\n      tag_497\n      jumpi\n        /* \"#utility.yul\":14636:14654   */\n      tag_497\n      tag_403\n      jump\t// in\n    tag_497:\n      pop\n        /* \"#utility.yul\":14673:14682   */\n      sub\n      swap1\n        /* \"#utility.yul\":14563:14688   */\n      jump\t// out\n        /* \"#utility.yul\":15053:15436   */\n    tag_315:\n        /* \"#utility.yul\":15250:15252   */\n      0x40\n        /* \"#utility.yul\":15239:15248   */\n      dup2\n        /* \"#utility.yul\":15232:15253   */\n      mstore\n        /* \"#utility.yul\":15213:15217   */\n      0x00\n        /* \"#utility.yul\":15276:15321   */\n      tag_500\n        /* \"#utility.yul\":15317:15319   */\n      0x40\n        /* \"#utility.yul\":15306:15315   */\n      dup4\n        /* \"#utility.yul\":15302:15320   */\n      add\n        /* \"#utility.yul\":15294:15300   */\n      dup6\n        /* \"#utility.yul\":15276:15321   */\n      tag_401\n      jump\t// in\n    tag_500:\n        /* \"#utility.yul\":15369:15378   */\n      dup3\n        /* \"#utility.yul\":15361:15367   */\n      dup2\n        /* \"#utility.yul\":15357:15379   */\n      sub\n        /* \"#utility.yul\":15352:15354   */\n      0x20\n        /* \"#utility.yul\":15341:15350   */\n      dup5\n        /* \"#utility.yul\":15337:15355   */\n      add\n        /* \"#utility.yul\":15330:15380   */\n      mstore\n        /* \"#utility.yul\":15397:15430   */\n      tag_501\n        /* \"#utility.yul\":15423:15429   */\n      dup2\n        /* \"#utility.yul\":15415:15421   */\n      dup6\n        /* \"#utility.yul\":15397:15430   */\n      tag_401\n      jump\t// in\n    tag_501:\n        /* \"#utility.yul\":15389:15430   */\n      swap6\n        /* \"#utility.yul\":15053:15436   */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15848:16122   */\n    tag_338:\n        /* \"#utility.yul\":15977:15980   */\n      0x00\n        /* \"#utility.yul\":16015:16021   */\n      dup3\n        /* \"#utility.yul\":16009:16022   */\n      mload\n        /* \"#utility.yul\":16031:16084   */\n      tag_504\n        /* \"#utility.yul\":16077:16083   */\n      dup2\n        /* \"#utility.yul\":16072:16075   */\n      dup5\n        /* \"#utility.yul\":16065:16069   */\n      0x20\n        /* \"#utility.yul\":16057:16063   */\n      dup8\n        /* \"#utility.yul\":16053:16070   */\n      add\n        /* \"#utility.yul\":16031:16084   */\n      tag_400\n      jump\t// in\n    tag_504:\n        /* \"#utility.yul\":16100:16116   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":15848:16122   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16530:16657   */\n    tag_355:\n        /* \"#utility.yul\":16591:16601   */\n      0x4e487b71\n        /* \"#utility.yul\":16586:16589   */\n      0xe0\n        /* \"#utility.yul\":16582:16602   */\n      shl\n        /* \"#utility.yul\":16579:16580   */\n      0x00\n        /* \"#utility.yul\":16572:16603   */\n      mstore\n        /* \"#utility.yul\":16622:16626   */\n      0x21\n        /* \"#utility.yul\":16619:16620   */\n      0x04\n        /* \"#utility.yul\":16612:16627   */\n      mstore\n        /* \"#utility.yul\":16646:16650   */\n      0x24\n        /* \"#utility.yul\":16643:16644   */\n      0x00\n        /* \"#utility.yul\":16636:16651   */\n      revert\n    stop\n    data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398 416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564\n\n    auxdata: 0xa26469706673582212204953d8b0bd7180db310463b779d4ec61c8aef183e4db35075dad142e864ba57164736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1050": {
									"entryPoint": null,
									"id": 1050,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_1655": {
									"entryPoint": null,
									"id": 1655,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_31": {
									"entryPoint": null,
									"id": 31,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_1805": {
									"entryPoint": 185,
									"id": 1805,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_setupOwner_440": {
									"entryPoint": 336,
									"id": 440,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@name_1060": {
									"entryPoint": 418,
									"id": 1060,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 760,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 943,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1049,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 738,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2479:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:18"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:18"
															},
															"nodeType": "YulIf",
															"src": "220:55:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:18",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:18"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:18"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:18"
															},
															"nodeType": "YulIf",
															"src": "353:36:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:18"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:18"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:18",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:18"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:18",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:18"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:18"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:18",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:18"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:18"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:18"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:18"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:18"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:18"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:18"
															},
															"nodeType": "YulIf",
															"src": "536:72:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:18",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:18",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:18"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:18"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:18"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:18"
															},
															"nodeType": "YulIf",
															"src": "698:53:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:18"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:18"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:18"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:18"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:18"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:18"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:18",
																"statements": []
															},
															"src": "779:133:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:18"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:18"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:18"
															},
															"nodeType": "YulIf",
															"src": "921:80:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:18",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:18"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:18",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:18",
														"type": ""
													}
												],
												"src": "146:885:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1154:444:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1200:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1209:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1212:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1202:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1202:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1202:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1175:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1184:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1171:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1171:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1196:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:32:18"
															},
															"nodeType": "YulIf",
															"src": "1164:52:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1225:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1245:9:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1239:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1239:16:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1229:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1264:28:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1282:2:18",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1278:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1278:10:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1290:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1274:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:18:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1268:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1319:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1328:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1331:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1321:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1321:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1321:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1307:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1315:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1304:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1304:14:18"
															},
															"nodeType": "YulIf",
															"src": "1301:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:71:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1387:9:18"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1398:6:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1383:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1383:22:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1407:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1354:28:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:61:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1344:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1424:41:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1450:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1461:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1446:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1446:18:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1440:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:25:18"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1428:8:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1494:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1503:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1506:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1496:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1496:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1496:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1480:8:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1490:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:16:18"
															},
															"nodeType": "YulIf",
															"src": "1474:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1519:73:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1562:9:18"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1573:8:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1558:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1558:24:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1584:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1529:28:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:63:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1112:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1123:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1135:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1143:6:18",
														"type": ""
													}
												],
												"src": "1036:562:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1816:276:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1826:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1838:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1849:3:18",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1834:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1834:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1826:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1869:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1880:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1862:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1862:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1862:25:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1907:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1918:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1903:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1903:18:18"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1923:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1896:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1896:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1896:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1950:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1961:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1946:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1946:18:18"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "1966:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1939:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1939:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1939:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1993:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2004:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1989:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1989:18:18"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "2009:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1982:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1982:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1982:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2036:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2047:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2032:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2032:19:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nodeType": "YulIdentifier",
																				"src": "2057:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2073:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2078:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2069:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2069:11:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2082:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2065:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2065:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2053:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2053:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2025:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2025:61:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2025:61:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1753:9:18",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1764:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1772:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1780:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1788:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1796:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1807:4:18",
														"type": ""
													}
												],
												"src": "1603:489:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2152:325:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2162:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2176:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2179:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2172:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2172:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2162:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2193:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2223:4:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2229:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2219:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2219:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2197:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2270:31:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2272:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2286:6:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2294:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2282:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2282:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2272:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2250:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2243:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2243:26:18"
															},
															"nodeType": "YulIf",
															"src": "2240:61:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2360:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2381:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2388:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2393:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2384:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2384:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2374:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2374:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2374:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2425:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2428:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2418:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2418:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2418:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2453:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2456:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2446:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2446:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2446:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2316:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2339:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2347:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2336:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2336:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2313:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2313:38:18"
															},
															"nodeType": "YulIf",
															"src": "2310:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2132:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2141:6:18",
														"type": ""
													}
												],
												"src": "2097:380:18"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "6101006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b5060405162001fb338038062001fb38339810160408190526200005991620003af565b818181818160059080519060200190620000759291906200023c565b5080516200008b9060069060208401906200023c565b50504660a052503060c052620000a0620000b9565b60805250620000b190503362000150565b505062000456565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000e6620001a2565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b606060058054620001b39062000419565b80601f0160208091040260200160405190810160405280929190818152602001828054620001e19062000419565b8015620002325780601f10620002065761010080835404028352916020019162000232565b820191906000526020600020905b8154815290600101906020018083116200021457829003601f168201915b5050505050905090565b8280546200024a9062000419565b90600052602060002090601f0160209004810192826200026e5760008555620002b9565b82601f106200028957805160ff1916838001178555620002b9565b82800160010185558215620002b9579182015b82811115620002b95782518255916020019190600101906200029c565b50620002c7929150620002cb565b5090565b5b80821115620002c75760008155600101620002cc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200030a57600080fd5b81516001600160401b0380821115620003275762000327620002e2565b604051601f8301601f19908116603f01168101908282118183101715620003525762000352620002e2565b816040528381526020925086838588010111156200036f57600080fd5b600091505b8382101562000393578582018301518183018401529082019062000374565b83821115620003a55760008385830101525b9695505050505050565b60008060408385031215620003c357600080fd5b82516001600160401b0380821115620003db57600080fd5b620003e986838701620002f8565b935060208501519150808211156200040057600080fd5b506200040f85828601620002f8565b9150509250929050565b600181811c908216806200042e57607f821691505b602082108114156200045057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051611b236200049060003960006108730152600061045c01526000610486015260006104b00152611b236000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063a457c2d71161007c578063a457c2d71461028f578063a9059cbb146102a2578063ac9650d8146102b5578063d505accf146102d5578063dd62ed3e146102e8578063e8a3d4851461032157600080fd5b806370a08231146102075780637ecebe00146102305780638da5cb5b14610259578063938e3d7b1461027457806395d89b411461028757600080fd5b8063313ce567116100ff578063313ce567146101b75780633644e515146101c657806339509351146101ce57806342966c68146101e1578063449a52f8146101f457600080fd5b806306fdde031461013c578063095ea7b31461015a57806313af40351461017d57806318160ddd1461019257806323b872dd146101a4575b600080fd5b610144610329565b6040516101519190611660565b60405180910390f35b61016d61016836600461168f565b6103bb565b6040519015158152602001610151565b61019061018b3660046116b9565b6103d3565b005b6004545b604051908152602001610151565b61016d6101b23660046116d4565b610429565b60405160128152602001610151565b61019661044f565b61016d6101dc36600461168f565b6104df565b6101906101ef366004611710565b61051e565b61019061020236600461168f565b61057c565b6101966102153660046116b9565b6001600160a01b031660009081526002602052604090205490565b61019661023e3660046116b9565b6001600160a01b031660009081526007602052604090205490565b6001546040516001600160a01b039091168152602001610151565b61019061028236600461173f565b610622565b610144610670565b61016d61029d36600461168f565b61067f565b61016d6102b036600461168f565b61071c565b6102c86102c33660046117f0565b61072a565b6040516101519190611865565b6101906102e33660046118c7565b61081f565b6101966102f636600461193a565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6101446109a5565b6060600580546103389061196d565b80601f01602080910402602001604051908101604052809291908181526020018280546103649061196d565b80156103b15780601f10610386576101008083540402835291602001916103b1565b820191906000526020600020905b81548152906001019060200180831161039457829003601f168201915b5050505050905090565b6000336103c9818585610a33565b5060019392505050565b6103db610b58565b61041d5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b61042681610b85565b50565b600033610437858285610bd7565b610442858585610c69565b60019150505b9392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156104a857507f000000000000000000000000000000000000000000000000000000000000000046145b156104d257507f000000000000000000000000000000000000000000000000000000000000000090565b6104da610e37565b905090565b3360008181526003602090815260408083206001600160a01b03871684529091528120549091906103c990829086906105199087906119b8565b610a33565b336000908152600260205260409020548111156105725760405162461bcd60e51b81526020600482015260126024820152716e6f7420656e6f7567682062616c616e636560701b6044820152606401610414565b6104263382610ecc565b610584610b58565b6105d05760405162461bcd60e51b815260206004820152601760248201527f4e6f7420617574686f72697a656420746f206d696e742e0000000000000000006044820152606401610414565b806106145760405162461bcd60e51b815260206004820152601460248201527326b4b73a34b733903d32b937903a37b5b2b7399760611b6044820152606401610414565b61061e8282611012565b5050565b61062a610b58565b6106675760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610414565b610426816110f1565b6060600680546103389061196d565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190838110156107045760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610414565b6107118286868403610a33565b506001949350505050565b6000336103c9818585610c69565b60608167ffffffffffffffff81111561074557610745611729565b60405190808252806020026020018201604052801561077857816020015b60608152602001906001900390816107635790505b50905060005b82811015610818576107e83085858481811061079c5761079c6119d0565b90506020028101906107ae91906119e6565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111d292505050565b8282815181106107fa576107fa6119d0565b6020026020010181905250808061081090611a34565b91505061077e565b5092915050565b8342111561086f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610414565b60007f000000000000000000000000000000000000000000000000000000000000000088888861089e8c6111f7565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061091b6108fb61044f565b8360405161190160f01b8152600281019290925260228201526042902090565b9050600061092b8287878761121f565b9050896001600160a01b0316816001600160a01b03161461098e5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610414565b6109998a8a8a610a33565b50505050505050505050565b600080546109b29061196d565b80601f01602080910402602001604051908101604052809291908181526020018280546109de9061196d565b8015610a2b5780601f10610a0057610100808354040283529160200191610a2b565b820191906000526020600020905b815481529060010190602001808311610a0e57829003601f168201915b505050505081565b6001600160a01b038316610a955760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610414565b6001600160a01b038216610af65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610414565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610b6c6001546001600160a01b031690565b6001600160a01b0316336001600160a01b031614905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6001600160a01b038381166000908152600360209081526040808320938616835292905220546000198114610c635781811015610c565760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610414565b610c638484848403610a33565b50505050565b6001600160a01b038316610ccd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610414565b6001600160a01b038216610d2f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610414565b6001600160a01b03831660009081526002602052604090205481811015610da75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610414565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290610dde9084906119b8565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e2a91815260200190565b60405180910390a3610c63565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610e62610329565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b038216610f2c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610414565b6001600160a01b03821660009081526002602052604090205481811015610fa05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610414565b6001600160a01b0383166000908152600260205260408120838303905560048054849290610fcf908490611a4f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b4b565b6001600160a01b0382166110685760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610414565b806004600082825461107a91906119b8565b90915550506001600160a01b038216600090815260026020526040812080548392906110a79084906119b8565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008080546110ff9061196d565b80601f016020809104026020016040519081016040528092919081815260200182805461112b9061196d565b80156111785780601f1061114d57610100808354040283529160200191611178565b820191906000526020600020905b81548152906001019060200180831161115b57829003601f168201915b505085519394506111949360009350602087019250905061156f565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a1681836040516111c6929190611a66565b60405180910390a15050565b60606104488383604051806060016040528060278152602001611ac760279139611247565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b600080600061123087878787611324565b9150915061123d816113e8565b5095945050505050565b60606001600160a01b0384163b6112af5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610414565b600080856001600160a01b0316856040516112ca9190611a94565b600060405180830381855af49150503d8060008114611305576040519150601f19603f3d011682016040523d82523d6000602084013e61130a565b606091505b509150915061131a828286611536565b9695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561135b57506000905060036113df565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156113af573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113d8576000600192509250506113df565b9150600090505b94509492505050565b60008160048111156113fc576113fc611ab0565b14156114055750565b600181600481111561141957611419611ab0565b14156114675760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610414565b600281600481111561147b5761147b611ab0565b14156114c95760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610414565b60038160048111156114dd576114dd611ab0565b14156104265760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610414565b60608315611545575081610448565b8251156115555782518084602001fd5b8160405162461bcd60e51b81526004016104149190611660565b82805461157b9061196d565b90600052602060002090601f01602090048101928261159d57600085556115e3565b82601f106115b657805160ff19168380011785556115e3565b828001600101855582156115e3579182015b828111156115e35782518255916020019190600101906115c8565b506115ef9291506115f3565b5090565b5b808211156115ef57600081556001016115f4565b60005b8381101561162357818101518382015260200161160b565b83811115610c635750506000910152565b6000815180845261164c816020860160208601611608565b601f01601f19169290920160200192915050565b6020815260006104486020830184611634565b80356001600160a01b038116811461168a57600080fd5b919050565b600080604083850312156116a257600080fd5b6116ab83611673565b946020939093013593505050565b6000602082840312156116cb57600080fd5b61044882611673565b6000806000606084860312156116e957600080fd5b6116f284611673565b925061170060208501611673565b9150604084013590509250925092565b60006020828403121561172257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561175157600080fd5b813567ffffffffffffffff8082111561176957600080fd5b818401915084601f83011261177d57600080fd5b81358181111561178f5761178f611729565b604051601f8201601f19908116603f011681019083821181831017156117b7576117b7611729565b816040528281528760208487010111156117d057600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806020838503121561180357600080fd5b823567ffffffffffffffff8082111561181b57600080fd5b818501915085601f83011261182f57600080fd5b81358181111561183e57600080fd5b8660208260051b850101111561185357600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156118ba57603f198886030184526118a8858351611634565b9450928501929085019060010161188c565b5092979650505050505050565b600080600080600080600060e0888a0312156118e257600080fd5b6118eb88611673565b96506118f960208901611673565b95506040880135945060608801359350608088013560ff8116811461191d57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561194d57600080fd5b61195683611673565b915061196460208401611673565b90509250929050565b600181811c9082168061198157607f821691505b6020821081141561121957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156119cb576119cb6119a2565b500190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126119fd57600080fd5b83018035915067ffffffffffffffff821115611a1857600080fd5b602001915036819003821315611a2d57600080fd5b9250929050565b6000600019821415611a4857611a486119a2565b5060010190565b600082821015611a6157611a616119a2565b500390565b604081526000611a796040830185611634565b8281036020840152611a8b8185611634565b95945050505050565b60008251611aa6818460208701611608565b9190910192915050565b634e487b7160e01b600052602160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204953d8b0bd7180db310463b779d4ec61c8aef183e4db35075dad142e864ba57164736f6c634300080b0033",
							"opcodes": "PUSH2 0x100 PUSH1 0x40 MSTORE PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 PUSH1 0xE0 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1FB3 CODESIZE SUB DUP1 PUSH3 0x1FB3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x59 SWAP2 PUSH3 0x3AF JUMP JUMPDEST DUP2 DUP2 DUP2 DUP2 DUP2 PUSH1 0x5 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x75 SWAP3 SWAP2 SWAP1 PUSH3 0x23C JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x8B SWAP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x23C JUMP JUMPDEST POP POP CHAINID PUSH1 0xA0 MSTORE POP ADDRESS PUSH1 0xC0 MSTORE PUSH3 0xA0 PUSH3 0xB9 JUMP JUMPDEST PUSH1 0x80 MSTORE POP PUSH3 0xB1 SWAP1 POP CALLER PUSH3 0x150 JUMP JUMPDEST POP POP PUSH3 0x456 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH3 0xE6 PUSH3 0x1A2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8292FCE18FA69EDF4DB7B94EA2E58241DF0AE57F97E0A6C9B29067028BF92D76 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH3 0x1B3 SWAP1 PUSH3 0x419 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x1E1 SWAP1 PUSH3 0x419 JUMP JUMPDEST DUP1 ISZERO PUSH3 0x232 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x206 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x232 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x214 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x24A SWAP1 PUSH3 0x419 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x26E JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x2B9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x289 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x2B9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x2B9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x2B9 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x29C JUMP JUMPDEST POP PUSH3 0x2C7 SWAP3 SWAP2 POP PUSH3 0x2CB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x2C7 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2CC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x327 JUMPI PUSH3 0x327 PUSH3 0x2E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x352 JUMPI PUSH3 0x352 PUSH3 0x2E2 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x36F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x393 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x374 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x3A5 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3E9 DUP7 DUP4 DUP8 ADD PUSH3 0x2F8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x40F DUP6 DUP3 DUP7 ADD PUSH3 0x2F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x42E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x450 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x1B23 PUSH3 0x490 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x873 ADD MSTORE PUSH1 0x0 PUSH2 0x45C ADD MSTORE PUSH1 0x0 PUSH2 0x486 ADD MSTORE PUSH1 0x0 PUSH2 0x4B0 ADD MSTORE PUSH2 0x1B23 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0x449A52F8 EQ PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x13AF4035 EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x329 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1660 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x151 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x3D3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x4 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x151 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x16D4 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x151 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x44F JUMP JUMPDEST PUSH2 0x16D PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0x1710 JUMP JUMPDEST PUSH2 0x51E JUMP JUMPDEST PUSH2 0x190 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x57C JUMP JUMPDEST PUSH2 0x196 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x151 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x282 CALLDATASIZE PUSH1 0x4 PUSH2 0x173F JUMP JUMPDEST PUSH2 0x622 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x670 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x67F JUMP JUMPDEST PUSH2 0x16D PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x71C JUMP JUMPDEST PUSH2 0x2C8 PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x17F0 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x18C7 JUMP JUMPDEST PUSH2 0x81F JUMP JUMPDEST PUSH2 0x196 PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x9A5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x338 SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x364 SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3B1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x386 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x394 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C9 DUP2 DUP6 DUP6 PUSH2 0xA33 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3DB PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x41D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x139BDD08185D5D1A1BDC9A5E9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x426 DUP2 PUSH2 0xB85 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x437 DUP6 DUP3 DUP6 PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0x442 DUP6 DUP6 DUP6 PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x4A8 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x4D2 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x4DA PUSH2 0xE37 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x3C9 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x519 SWAP1 DUP8 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST PUSH2 0xA33 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x572 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x6E6F7420656E6F7567682062616C616E6365 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x426 CALLER DUP3 PUSH2 0xECC JUMP JUMPDEST PUSH2 0x584 PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x5D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617574686F72697A656420746F206D696E742E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST DUP1 PUSH2 0x614 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x26B4B73A34B733903D32B937903A37B5B2B73997 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x61E DUP3 DUP3 PUSH2 0x1012 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x62A PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x139BDD08185D5D1A1BDC9A5E9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x426 DUP2 PUSH2 0x10F1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x338 SWAP1 PUSH2 0x196D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x711 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xA33 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C9 DUP2 DUP6 DUP6 PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x745 JUMPI PUSH2 0x745 PUSH2 0x1729 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x778 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x763 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x818 JUMPI PUSH2 0x7E8 ADDRESS DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x79C JUMPI PUSH2 0x79C PUSH2 0x19D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x7AE SWAP2 SWAP1 PUSH2 0x19E6 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x11D2 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7FA JUMPI PUSH2 0x7FA PUSH2 0x19D0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x810 SWAP1 PUSH2 0x1A34 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x77E JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP9 DUP9 DUP9 PUSH2 0x89E DUP13 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x91B PUSH2 0x8FB PUSH2 0x44F JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x92B DUP3 DUP8 DUP8 DUP8 PUSH2 0x121F JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x98E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x999 DUP11 DUP11 DUP11 PUSH2 0xA33 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x9B2 SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9DE SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA2B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA00 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA2B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA0E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6C PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8292FCE18FA69EDF4DB7B94EA2E58241DF0AE57F97E0A6C9B29067028BF92D76 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xC63 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xC56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0xC63 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xA33 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xDDE SWAP1 DUP5 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xE2A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xC63 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0xE62 PUSH2 0x329 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF2C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xFA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xFCF SWAP1 DUP5 SWAP1 PUSH2 0x1A4F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH2 0xB4B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1068 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x107A SWAP2 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x10A7 SWAP1 DUP5 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD PUSH2 0x10FF SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x112B SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1178 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x114D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1178 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x115B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP DUP6 MLOAD SWAP4 SWAP5 POP PUSH2 0x1194 SWAP4 PUSH1 0x0 SWAP4 POP PUSH1 0x20 DUP8 ADD SWAP3 POP SWAP1 POP PUSH2 0x156F JUMP JUMPDEST POP PUSH32 0xC9C7C3FE08B88B4DF9D4D47EF47D2C43D55C025A0BA88CA442580ED9E7348A16 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0x11C6 SWAP3 SWAP2 SWAP1 PUSH2 0x1A66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x448 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AC7 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1230 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1324 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x123D DUP2 PUSH2 0x13E8 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x12AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x12CA SWAP2 SWAP1 PUSH2 0x1A94 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1305 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x130A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x131A DUP3 DUP3 DUP7 PUSH2 0x1536 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x135B JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x13DF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x13D8 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x13DF JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x13FC JUMPI PUSH2 0x13FC PUSH2 0x1AB0 JUMP JUMPDEST EQ ISZERO PUSH2 0x1405 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1419 JUMPI PUSH2 0x1419 PUSH2 0x1AB0 JUMP JUMPDEST EQ ISZERO PUSH2 0x1467 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x147B JUMPI PUSH2 0x147B PUSH2 0x1AB0 JUMP JUMPDEST EQ ISZERO PUSH2 0x14C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x14DD JUMPI PUSH2 0x14DD PUSH2 0x1AB0 JUMP JUMPDEST EQ ISZERO PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1545 JUMPI POP DUP2 PUSH2 0x448 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1555 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x414 SWAP2 SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x157B SWAP1 PUSH2 0x196D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x159D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x15E3 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x15B6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x15E3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x15E3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x15E3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x15C8 JUMP JUMPDEST POP PUSH2 0x15EF SWAP3 SWAP2 POP PUSH2 0x15F3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x15EF JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x15F4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1623 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x160B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC63 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x164C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1608 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x448 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1634 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x168A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16AB DUP4 PUSH2 0x1673 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x448 DUP3 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16F2 DUP5 PUSH2 0x1673 JUMP JUMPDEST SWAP3 POP PUSH2 0x1700 PUSH1 0x20 DUP6 ADD PUSH2 0x1673 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1769 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x177D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x178F JUMPI PUSH2 0x178F PUSH2 0x1729 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x17B7 JUMPI PUSH2 0x17B7 PUSH2 0x1729 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x17D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1803 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x181B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x182F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x18BA JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x18A8 DUP6 DUP4 MLOAD PUSH2 0x1634 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x188C JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x18E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18EB DUP9 PUSH2 0x1673 JUMP JUMPDEST SWAP7 POP PUSH2 0x18F9 PUSH1 0x20 DUP10 ADD PUSH2 0x1673 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x191D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x194D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1956 DUP4 PUSH2 0x1673 JUMP JUMPDEST SWAP2 POP PUSH2 0x1964 PUSH1 0x20 DUP5 ADD PUSH2 0x1673 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1981 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1219 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x19CB JUMPI PUSH2 0x19CB PUSH2 0x19A2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x19FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1A48 JUMPI PUSH2 0x1A48 PUSH2 0x19A2 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1A61 JUMPI PUSH2 0x1A61 PUSH2 0x19A2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1A79 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1634 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1A8B DUP2 DUP6 PUSH2 0x1634 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1AA6 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1608 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212204953D8 0xB0 0xBD PUSH18 0x80DB310463B779D4EC61C8AEF183E4DB3507 0x5D 0xAD EQ 0x2E DUP7 0x4B 0xA5 PUSH18 0x64736F6C634300080B003300000000000000 ",
							"sourceMap": "893:2309:0:-:0;;;1440:95:13;1387:148;;1150:124:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1218:5;1225:7;1829:5:13;1836:7;2083:5:12;2075;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2098:17:12;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;1874:13:13::1;1855:32;::::0;-1:-1:-1;1920:4:13::1;1897:28;::::0;1962:23:::1;:21;:23::i;:::-;1935:50;::::0;-1:-1:-1;1244:23:0::1;::::0;-1:-1:-1;1256:10:0::1;1244:11;:23::i;:::-;1150:124:::0;;893:2309;;3293:438:13;3348:7;3445:95;3578:6;:4;:6::i;:::-;3562:24;;;;;;;3413:297;;;;;;1862:25:18;;;;1903:18;;;1896:34;;;;3608:14:13;1946:18:18;;;1939:34;3644:13:13;1989:18:18;;;1982:34;3687:4:13;2032:19:18;;;2025:61;1834:19;;3413:297:13;;;;;;;;;;;;3386:338;;;;;;3367:357;;3293:438;:::o;1401:172:6:-;1481:6;;;-1:-1:-1;;;;;1497:18:6;;;-1:-1:-1;;;;;;1497:18:6;;;;;;;1531:35;;1481:6;;;1497:18;1481:6;;1531:35;;1460:18;;1531:35;1450:123;1401:172;:::o;2187:98:12:-;2241:13;2273:5;2266:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2187:98;:::o;893:2309:0:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;893:2309:0;;;-1:-1:-1;893:2309:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:18;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:18;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:18;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:18:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:18;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;2097:380::-;2176:1;2172:12;;;;2219;;;2240:61;;2294:4;2286:6;2282:17;2272:27;;2240:61;2347:2;2339:6;2336:14;2316:18;2313:38;2310:161;;;2393:10;2388:3;2384:20;2381:1;2374:31;2428:4;2425:1;2418:15;2456:4;2453:1;2446:15;2310:161;;2097:380;;;:::o;:::-;893:2309:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_1774": {
									"entryPoint": 1103,
									"id": 1774,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_afterTokenTransfer_1592": {
									"entryPoint": null,
									"id": 1592,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1527": {
									"entryPoint": 2611,
									"id": 1527,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1581": {
									"entryPoint": null,
									"id": 1581,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_1805": {
									"entryPoint": 3639,
									"id": 1805,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_burn_1482": {
									"entryPoint": 3788,
									"id": 1482,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_canMint_108": {
									"entryPoint": null,
									"id": 108,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_canSetContractURI_95": {
									"entryPoint": null,
									"id": 95,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_canSetOwner_122": {
									"entryPoint": 2904,
									"id": 122,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_1410": {
									"entryPoint": 4114,
									"id": 1410,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1847": {
									"entryPoint": null,
									"id": 1847,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_setupContractURI_299": {
									"entryPoint": 4337,
									"id": 299,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_setupOwner_440": {
									"entryPoint": 2949,
									"id": 440,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_spendAllowance_1570": {
									"entryPoint": 3031,
									"id": 1570,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_1985": {
									"entryPoint": 5096,
									"id": 1985,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_1354": {
									"entryPoint": 3177,
									"id": 1354,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1834": {
									"entryPoint": 4599,
									"id": 1834,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_1147": {
									"entryPoint": null,
									"id": 1147,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1172": {
									"entryPoint": 955,
									"id": 1172,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_1104": {
									"entryPoint": null,
									"id": 1104,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burn_81": {
									"entryPoint": 1310,
									"id": 81,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@contractURI_258": {
									"entryPoint": 2469,
									"id": 258,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@current_1875": {
									"entryPoint": null,
									"id": 1875,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1080": {
									"entryPoint": null,
									"id": 1080,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1277": {
									"entryPoint": 1663,
									"id": 1277,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionDelegateCall_735": {
									"entryPoint": 4562,
									"id": 735,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionDelegateCall_770": {
									"entryPoint": 4679,
									"id": 770,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@increaseAllowance_1235": {
									"entryPoint": 1247,
									"id": 1235,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increment_1889": {
									"entryPoint": null,
									"id": 1889,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@isContract_525": {
									"entryPoint": null,
									"id": 525,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mintTo_58": {
									"entryPoint": 1404,
									"id": 58,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@multicall_364": {
									"entryPoint": 1834,
									"id": 364,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_1060": {
									"entryPoint": 809,
									"id": 1060,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1747": {
									"entryPoint": null,
									"id": 1747,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_399": {
									"entryPoint": null,
									"id": 399,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@permit_1731": {
									"entryPoint": 2079,
									"id": 1731,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_2232": {
									"entryPoint": 4639,
									"id": 2232,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@setContractURI_279": {
									"entryPoint": 1570,
									"id": 279,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setOwner_420": {
									"entryPoint": 979,
									"id": 420,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@symbol_1070": {
									"entryPoint": 1648,
									"id": 1070,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toTypedDataHash_2276": {
									"entryPoint": null,
									"id": 2276,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_1090": {
									"entryPoint": null,
									"id": 1090,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1205": {
									"entryPoint": 1065,
									"id": 1205,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_1129": {
									"entryPoint": 1820,
									"id": 1129,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_2199": {
									"entryPoint": 4900,
									"id": 2199,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"@verifyCallResult_801": {
									"entryPoint": 5430,
									"id": 801,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 5747,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 5817,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 6458,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 5844,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 6343,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 5775,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr": {
									"entryPoint": 6128,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_string_memory_ptr": {
									"entryPoint": 5951,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 5904,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 5684,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6804,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 6245,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5728,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6758,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7acedc89dd3658da26d0488f7e55737f51bdbd8424532db0708cd962cbb1712b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"access_calldata_tail_t_bytes_calldata_ptr": {
									"entryPoint": 6630,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"checked_add_t_uint256": {
									"entryPoint": 6584,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 6735,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 5640,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 6509,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 6708,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 6562,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 6832,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 6608,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 5929,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:17775:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "67:205:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "77:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "86:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "81:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "146:63:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "171:3:18"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "176:1:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "167:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "167:11:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "190:3:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "195:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "186:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "186:11:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "180:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "180:18:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "160:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "160:39:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "160:39:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "107:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "110:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "104:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "104:13:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "118:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "120:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "129:1:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:2:18",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "125:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "120:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "100:3:18",
																"statements": []
															},
															"src": "96:113:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "235:31:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "248:3:18"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "253:6:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "244:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "244:16:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "262:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "237:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "237:27:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "237:27:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "224:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "227:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "221:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "221:13:18"
															},
															"nodeType": "YulIf",
															"src": "218:48:18"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "45:3:18",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "50:3:18",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "55:6:18",
														"type": ""
													}
												],
												"src": "14:258:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "327:208:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "337:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "357:5:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "351:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "351:12:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "341:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "379:3:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "384:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "372:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "372:19:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "372:19:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "426:5:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "433:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "422:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "422:16:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "444:3:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "449:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "440:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "440:14:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "456:6:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "400:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:63:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "400:63:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "472:57:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "487:3:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "500:6:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "508:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "496:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "496:15:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "517:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "513:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "513:7:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "492:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "492:29:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "483:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "483:39:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "524:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "479:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "479:50:18"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "472:3:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "304:5:18",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "311:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "319:3:18",
														"type": ""
													}
												],
												"src": "277:258:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "661:99:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "678:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "689:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "671:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "671:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "671:21:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "701:53:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "727:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "739:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "750:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "735:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "735:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "709:17:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "709:45:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "701:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "630:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "641:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "652:4:18",
														"type": ""
													}
												],
												"src": "540:220:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "814:124:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "824:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "846:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "833:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "833:20:18"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "824:5:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "916:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "925:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "928:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "918:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "918:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "918:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "875:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "886:5:18"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "901:3:18",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "906:1:18",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "897:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "897:11:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "910:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "893:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "893:19:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "882:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "882:31:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "872:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "872:42:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "865:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "865:50:18"
															},
															"nodeType": "YulIf",
															"src": "862:70:18"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "793:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "804:5:18",
														"type": ""
													}
												],
												"src": "765:173:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1030:167:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1076:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1085:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1088:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1078:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1078:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1078:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1051:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1060:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1047:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1047:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1072:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1043:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1043:32:18"
															},
															"nodeType": "YulIf",
															"src": "1040:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1101:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1130:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1111:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1111:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1101:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1149:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1176:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1187:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1172:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1172:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1159:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1159:32:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1149:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "988:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "999:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1011:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1019:6:18",
														"type": ""
													}
												],
												"src": "943:254:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1297:92:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1307:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1319:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1330:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1315:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1315:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1307:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1349:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1374:6:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1367:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1367:14:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1360:6:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1360:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1342:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1342:41:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1342:41:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1266:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1277:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1288:4:18",
														"type": ""
													}
												],
												"src": "1202:187:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1464:116:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1510:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1519:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1522:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1512:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1512:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1512:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1485:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1494:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1481:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1481:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1506:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:32:18"
															},
															"nodeType": "YulIf",
															"src": "1474:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1535:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1564:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1545:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1545:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1535:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1430:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1441:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1453:6:18",
														"type": ""
													}
												],
												"src": "1394:186:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1686:76:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1696:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1708:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1719:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1704:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1704:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1696:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1738:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1749:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1731:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1731:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1731:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1655:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1666:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1677:4:18",
														"type": ""
													}
												],
												"src": "1585:177:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1871:224:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1917:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1926:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1929:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1919:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1919:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1919:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1892:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1901:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1888:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1888:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1913:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1884:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1884:32:18"
															},
															"nodeType": "YulIf",
															"src": "1881:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1942:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1971:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1952:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1952:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1942:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1990:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2034:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2019:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2019:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2000:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2000:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1990:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2047:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2074:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2085:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2070:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2070:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2057:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2057:32:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2047:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1821:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1832:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1844:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1852:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1860:6:18",
														"type": ""
													}
												],
												"src": "1767:328:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2197:87:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2207:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2219:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2230:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2215:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2215:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2207:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2249:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2264:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2272:4:18",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2260:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2260:17:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2242:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2242:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2242:36:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2166:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2177:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2188:4:18",
														"type": ""
													}
												],
												"src": "2100:184:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2390:76:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2400:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2412:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2423:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2408:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2408:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2400:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2442:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2453:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2435:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2435:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2435:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2359:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2370:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2381:4:18",
														"type": ""
													}
												],
												"src": "2289:177:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2541:110:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2587:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2596:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2599:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2589:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2589:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2589:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2562:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2571:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2558:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2558:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2583:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2554:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2554:32:18"
															},
															"nodeType": "YulIf",
															"src": "2551:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2612:33:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2635:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2622:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2622:23:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2612:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2507:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2518:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2530:6:18",
														"type": ""
													}
												],
												"src": "2471:180:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2757:102:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2767:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2779:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2790:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2775:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2775:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2767:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2809:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2824:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2840:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2845:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2836:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2836:11:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2849:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2832:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2832:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2820:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2820:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2802:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2802:51:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2802:51:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2726:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2737:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2748:4:18",
														"type": ""
													}
												],
												"src": "2656:203:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2896:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2913:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2920:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2925:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2916:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2916:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2906:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2906:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2906:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2953:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2956:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2946:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2946:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2946:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2977:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2980:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2970:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2970:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2970:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "2864:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3076:842:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3122:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3131:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3134:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3124:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3124:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3124:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3097:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3106:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3093:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3093:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3118:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3089:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3089:32:18"
															},
															"nodeType": "YulIf",
															"src": "3086:52:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3147:37:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3174:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3161:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3161:23:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3151:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3193:28:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3203:18:18",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3197:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3248:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3257:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3260:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3250:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3250:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3250:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3236:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3244:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3233:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3233:14:18"
															},
															"nodeType": "YulIf",
															"src": "3230:34:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3273:32:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3287:9:18"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3298:6:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3283:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3283:22:18"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3277:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3353:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3362:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3365:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3355:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3355:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3355:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3332:2:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3336:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3328:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3328:13:18"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3343:7:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3324:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3324:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3317:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3317:35:18"
															},
															"nodeType": "YulIf",
															"src": "3314:55:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3378:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3401:2:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3388:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3388:16:18"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3382:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3427:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3429:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3429:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3429:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3419:2:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3423:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3416:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3416:10:18"
															},
															"nodeType": "YulIf",
															"src": "3413:36:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3458:17:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3472:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "3468:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3468:7:18"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "3462:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3484:23:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3504:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3498:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3498:9:18"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "3488:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3516:71:18",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3538:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "3562:2:18"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3566:4:18",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3558:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3558:13:18"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "3573:2:18"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "3554:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3554:22:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3578:2:18",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3550:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3550:31:18"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "3583:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3546:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3546:40:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3534:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3534:53:18"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "3520:10:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3646:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3648:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3648:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3648:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3605:10:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3617:2:18"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3602:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3602:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3625:10:18"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3637:6:18"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "3622:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3622:22:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "3599:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3599:46:18"
															},
															"nodeType": "YulIf",
															"src": "3596:72:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3684:2:18",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "3688:10:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3677:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3677:22:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3677:22:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3715:6:18"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3723:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3708:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3708:18:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3708:18:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3772:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3781:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3784:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3774:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3774:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3774:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3749:2:18"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "3753:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3745:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3745:11:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3758:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3741:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3741:20:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3763:7:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3738:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3738:33:18"
															},
															"nodeType": "YulIf",
															"src": "3735:53:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3814:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3822:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3810:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3810:15:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "3831:2:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3835:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3827:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3827:11:18"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3840:2:18"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "3797:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3797:46:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3797:46:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "3867:6:18"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "3875:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3863:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3863:15:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3880:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3859:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3859:24:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3885:1:18",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3852:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3852:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3852:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3896:16:18",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "3906:6:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3896:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3042:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3053:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3065:6:18",
														"type": ""
													}
												],
												"src": "2996:922:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4039:510:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4085:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4094:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4097:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4087:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4087:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4087:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4060:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4069:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4056:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4056:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4081:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4052:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4052:32:18"
															},
															"nodeType": "YulIf",
															"src": "4049:52:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4110:37:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4137:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4124:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4124:23:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4114:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4156:28:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4166:18:18",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4160:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4211:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4220:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4223:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4213:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4213:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4213:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4199:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4207:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4196:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4196:14:18"
															},
															"nodeType": "YulIf",
															"src": "4193:34:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4236:32:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4250:9:18"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4261:6:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4246:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4246:22:18"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4240:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4316:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4325:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4328:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4318:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4318:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4318:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4295:2:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4299:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4291:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4291:13:18"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4306:7:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "4287:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4287:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4280:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4280:35:18"
															},
															"nodeType": "YulIf",
															"src": "4277:55:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4341:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4368:2:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4355:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4355:16:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4345:6:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4398:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4407:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4410:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4400:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4400:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4400:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4386:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4394:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4383:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4383:14:18"
															},
															"nodeType": "YulIf",
															"src": "4380:34:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4472:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4481:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4484:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4474:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4474:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4474:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4437:2:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4445:1:18",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "4448:6:18"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4441:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4441:14:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4433:23:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4458:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4429:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4429:32:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4463:7:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4426:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4426:45:18"
															},
															"nodeType": "YulIf",
															"src": "4423:65:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4497:21:18",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4511:2:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4515:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4507:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4507:11:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4497:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4527:16:18",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "4537:6:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4527:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3997:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4008:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4020:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4028:6:18",
														"type": ""
													}
												],
												"src": "3923:626:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4723:632:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4733:12:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4743:2:18",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4737:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4754:32:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4772:9:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4783:2:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4768:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4768:18:18"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "4758:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4802:9:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4813:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4795:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4795:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4795:21:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4825:17:18",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "4836:6:18"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "4829:3:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4851:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4871:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4865:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4865:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4855:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "4894:6:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4902:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4887:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4887:22:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4887:22:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4918:25:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4929:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4940:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4925:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4925:18:18"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4918:3:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4952:53:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4974:9:18"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4989:1:18",
																						"type": "",
																						"value": "5"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "4992:6:18"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "4985:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4985:14:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4970:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4970:30:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5002:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4966:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4966:39:18"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nodeType": "YulTypedName",
																	"src": "4956:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5014:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5032:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5040:2:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5028:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5028:15:18"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "5018:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5052:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5061:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "5056:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5120:206:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "5141:3:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tail_2",
																									"nodeType": "YulIdentifier",
																									"src": "5154:6:18"
																								},
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "5162:9:18"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "5150:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5150:22:18"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "5178:2:18",
																									"type": "",
																									"value": "63"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "5174:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5174:7:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5146:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5146:36:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5134:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5134:49:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5134:49:18"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "5196:50:18",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nodeType": "YulIdentifier",
																							"src": "5230:6:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5224:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5224:13:18"
																				},
																				{
																					"name": "tail_2",
																					"nodeType": "YulIdentifier",
																					"src": "5239:6:18"
																				}
																			],
																			"functionName": {
																				"name": "abi_encode_string",
																				"nodeType": "YulIdentifier",
																				"src": "5206:17:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5206:40:18"
																		},
																		"variableNames": [
																			{
																				"name": "tail_2",
																				"nodeType": "YulIdentifier",
																				"src": "5196:6:18"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "5259:25:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "5273:6:18"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "5281:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5269:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5269:15:18"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5259:6:18"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "5297:19:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "5308:3:18"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "5313:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5304:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5304:12:18"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "5297:3:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5082:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5085:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5079:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:13:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "5093:18:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5095:14:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "5104:1:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5107:1:18",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5100:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5100:9:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "5095:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "5075:3:18",
																"statements": []
															},
															"src": "5071:255:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5335:14:18",
															"value": {
																"name": "tail_2",
																"nodeType": "YulIdentifier",
																"src": "5343:6:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5335:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4692:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4703:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4714:4:18",
														"type": ""
													}
												],
												"src": "4554:801:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5530:523:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5577:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5586:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5589:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5579:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5579:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5579:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5551:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5560:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5547:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5547:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5572:3:18",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5543:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5543:33:18"
															},
															"nodeType": "YulIf",
															"src": "5540:53:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5602:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5631:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5612:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5612:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5602:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5650:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5683:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5694:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5679:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5679:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5660:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5650:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5707:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5734:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5745:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5730:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5730:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5717:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5717:32:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "5707:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5758:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5785:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5796:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5781:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5781:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5768:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5768:32:18"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "5758:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5809:46:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5839:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5850:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5835:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5835:19:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5822:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5822:33:18"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5813:5:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5903:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5912:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5915:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5905:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5905:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5905:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5877:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5888:5:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5895:4:18",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5884:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5884:16:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5874:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5874:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5867:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5867:35:18"
															},
															"nodeType": "YulIf",
															"src": "5864:55:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5928:15:18",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5938:5:18"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "5928:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5952:43:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5979:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5990:3:18",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5975:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5975:19:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5962:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5962:33:18"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "5952:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6004:43:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6031:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6042:3:18",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6027:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6027:19:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6014:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6014:33:18"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nodeType": "YulIdentifier",
																	"src": "6004:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5448:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5459:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5471:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5479:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5487:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5495:6:18",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "5503:6:18",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "5511:6:18",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "5519:6:18",
														"type": ""
													}
												],
												"src": "5360:693:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6145:173:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6191:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6200:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6203:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6193:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6193:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6193:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6166:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6175:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6162:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6162:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6187:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6158:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6158:32:18"
															},
															"nodeType": "YulIf",
															"src": "6155:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6216:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6245:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6226:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6226:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6216:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6264:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6297:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6308:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6293:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6293:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6274:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6274:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "6264:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6103:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6114:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6126:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6134:6:18",
														"type": ""
													}
												],
												"src": "6058:260:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6378:325:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6388:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6402:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6405:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6398:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6398:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "6388:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6419:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6449:4:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6455:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6445:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6445:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "6423:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6496:31:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6498:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "6512:6:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6520:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "6508:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6508:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6498:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6476:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6469:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6469:26:18"
															},
															"nodeType": "YulIf",
															"src": "6466:61:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6586:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6607:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6614:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6619:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "6610:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6610:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6600:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6600:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6600:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6651:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6654:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6644:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6644:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6644:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6679:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6682:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6672:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6672:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6672:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6542:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6565:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6573:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "6562:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6562:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6539:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6539:38:18"
															},
															"nodeType": "YulIf",
															"src": "6536:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "6358:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6367:6:18",
														"type": ""
													}
												],
												"src": "6323:380:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6882:164:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6899:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6910:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6892:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6892:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6892:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6933:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6944:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6929:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6929:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6949:2:18",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6922:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6922:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6922:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6972:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6983:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6968:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6968:18:18"
																	},
																	{
																		"hexValue": "4e6f7420617574686f72697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6988:16:18",
																		"type": "",
																		"value": "Not authorized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6961:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "6961:44:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6961:44:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7014:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7026:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7037:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7022:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7022:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7014:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6859:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6873:4:18",
														"type": ""
													}
												],
												"src": "6708:338:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7083:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7100:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7107:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7112:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7103:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7103:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7093:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7093:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7093:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7140:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7143:4:18",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7133:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7133:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7133:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7164:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7167:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7157:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7157:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7157:15:18"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "7051:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7231:80:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7258:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7260:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7260:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7260:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7247:1:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7254:1:18"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7250:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7250:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7244:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7244:13:18"
															},
															"nodeType": "YulIf",
															"src": "7241:39:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7289:16:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7300:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7303:1:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7296:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7296:9:18"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7289:3:18"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7214:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7217:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "7223:3:18",
														"type": ""
													}
												],
												"src": "7183:128:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7490:168:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7507:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7518:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7500:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7500:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7500:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7541:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7552:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7537:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7537:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7557:2:18",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7530:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7530:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7530:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7580:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7591:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7576:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7576:18:18"
																	},
																	{
																		"hexValue": "6e6f7420656e6f7567682062616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7596:20:18",
																		"type": "",
																		"value": "not enough balance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7569:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7569:48:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7569:48:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7626:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7638:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7649:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7634:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7634:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7626:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7467:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7481:4:18",
														"type": ""
													}
												],
												"src": "7316:342:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7837:173:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7854:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7865:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7847:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7847:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7847:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7888:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7899:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7884:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7884:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7904:2:18",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7877:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7877:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7877:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7927:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7938:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7923:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7923:18:18"
																	},
																	{
																		"hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7943:25:18",
																		"type": "",
																		"value": "Not authorized to mint."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7916:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7916:53:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7916:53:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7978:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7990:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8001:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7986:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "7986:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7978:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7814:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7828:4:18",
														"type": ""
													}
												],
												"src": "7663:347:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8189:170:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8206:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8217:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8199:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8199:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8199:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8240:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8251:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8236:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8236:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8256:2:18",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8229:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8229:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8229:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8279:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8290:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8275:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8275:18:18"
																	},
																	{
																		"hexValue": "4d696e74696e67207a65726f20746f6b656e732e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8295:22:18",
																		"type": "",
																		"value": "Minting zero tokens."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8268:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8268:50:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8268:50:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8327:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8339:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8350:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8335:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8335:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8327:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7acedc89dd3658da26d0488f7e55737f51bdbd8424532db0708cd962cbb1712b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8166:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8180:4:18",
														"type": ""
													}
												],
												"src": "8015:344:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8538:227:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8555:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8566:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8548:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8548:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8548:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8589:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8600:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8585:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8585:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8605:2:18",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8578:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8578:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8578:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8628:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8639:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8624:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8624:18:18"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8644:34:18",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8617:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8617:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8617:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8699:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8710:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8695:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8695:18:18"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8715:7:18",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8688:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8688:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8688:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8732:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8744:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8755:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8740:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8740:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8732:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8515:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8529:4:18",
														"type": ""
													}
												],
												"src": "8364:401:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8802:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8819:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8826:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8831:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8822:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8822:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8812:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8812:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8812:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8859:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8862:4:18",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8852:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8852:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8852:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8883:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8886:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8876:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "8876:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8876:15:18"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "8770:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8996:427:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9006:51:18",
															"value": {
																"arguments": [
																	{
																		"name": "ptr_to_tail",
																		"nodeType": "YulIdentifier",
																		"src": "9045:11:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9032:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9032:25:18"
															},
															"variables": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulTypedName",
																	"src": "9010:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9146:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9155:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9158:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9148:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9148:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9148:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "rel_offset_of_tail",
																				"nodeType": "YulIdentifier",
																				"src": "9080:18:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "calldatasize",
																									"nodeType": "YulIdentifier",
																									"src": "9108:12:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9108:14:18"
																							},
																							{
																								"name": "base_ref",
																								"nodeType": "YulIdentifier",
																								"src": "9124:8:18"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "9104:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9104:29:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9139:2:18",
																								"type": "",
																								"value": "30"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "9135:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9135:7:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9100:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9100:43:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "9076:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9076:68:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9069:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9069:76:18"
															},
															"nodeType": "YulIf",
															"src": "9066:96:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9171:47:18",
															"value": {
																"arguments": [
																	{
																		"name": "base_ref",
																		"nodeType": "YulIdentifier",
																		"src": "9189:8:18"
																	},
																	{
																		"name": "rel_offset_of_tail",
																		"nodeType": "YulIdentifier",
																		"src": "9199:18:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9185:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9185:33:18"
															},
															"variables": [
																{
																	"name": "addr_1",
																	"nodeType": "YulTypedName",
																	"src": "9175:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9227:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "9250:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9237:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9237:20:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "9227:6:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9300:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9309:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9312:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9302:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9302:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9302:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9272:6:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9280:18:18",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9269:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9269:30:18"
															},
															"nodeType": "YulIf",
															"src": "9266:50:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9325:25:18",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "9337:6:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9345:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9333:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9333:17:18"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nodeType": "YulIdentifier",
																	"src": "9325:4:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9401:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9410:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9413:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9403:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9403:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9403:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "9366:4:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "calldatasize",
																					"nodeType": "YulIdentifier",
																					"src": "9376:12:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9376:14:18"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "9392:6:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9372:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9372:27:18"
																	}
																],
																"functionName": {
																	"name": "sgt",
																	"nodeType": "YulIdentifier",
																	"src": "9362:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9362:38:18"
															},
															"nodeType": "YulIf",
															"src": "9359:58:18"
														}
													]
												},
												"name": "access_calldata_tail_t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base_ref",
														"nodeType": "YulTypedName",
														"src": "8953:8:18",
														"type": ""
													},
													{
														"name": "ptr_to_tail",
														"nodeType": "YulTypedName",
														"src": "8963:11:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "addr",
														"nodeType": "YulTypedName",
														"src": "8979:4:18",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8985:6:18",
														"type": ""
													}
												],
												"src": "8902:521:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9475:88:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9506:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9508:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9508:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9508:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9491:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9502:1:18",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "9498:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9498:6:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "9488:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9488:17:18"
															},
															"nodeType": "YulIf",
															"src": "9485:43:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9537:20:18",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9548:5:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9555:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9544:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9544:13:18"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "9537:3:18"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9457:5:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "9467:3:18",
														"type": ""
													}
												],
												"src": "9428:135:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9742:179:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9759:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9770:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9752:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9752:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9752:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9793:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9804:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9789:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9789:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9809:2:18",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9782:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9782:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9782:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9832:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9843:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9828:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9828:18:18"
																	},
																	{
																		"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9848:31:18",
																		"type": "",
																		"value": "ERC20Permit: expired deadline"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9821:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9821:59:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9821:59:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9889:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9901:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9912:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9897:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "9897:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9889:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9719:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9733:4:18",
														"type": ""
													}
												],
												"src": "9568:353:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10167:350:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10177:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10189:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10200:3:18",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10185:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10185:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10177:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10220:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10231:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10213:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10213:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10213:25:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10247:29:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10265:3:18",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10270:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "10261:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10261:11:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10274:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10257:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10257:19:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10251:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10296:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10307:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10292:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10292:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "10316:6:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10324:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10312:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10312:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10285:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10285:43:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10285:43:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10348:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10359:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10344:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10344:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "10368:6:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10376:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10364:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10364:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10337:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10337:43:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10337:43:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10400:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10411:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10396:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10396:18:18"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "10416:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10389:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10389:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10389:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10443:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10454:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10439:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10439:19:18"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "10460:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10432:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10432:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10432:35:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10487:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10498:3:18",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10483:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10483:19:18"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "10504:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10476:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10476:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10476:35:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10096:9:18",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "10107:6:18",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "10115:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "10123:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10131:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10139:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10147:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10158:4:18",
														"type": ""
													}
												],
												"src": "9926:591:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10696:180:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10713:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10724:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10706:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10706:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10706:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10747:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10758:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10743:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10743:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10763:2:18",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10736:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10736:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10736:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10786:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10797:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10782:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10782:18:18"
																	},
																	{
																		"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10802:32:18",
																		"type": "",
																		"value": "ERC20Permit: invalid signature"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10775:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10775:60:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10775:60:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10844:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10856:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10867:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10852:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "10852:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10844:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10673:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10687:4:18",
														"type": ""
													}
												],
												"src": "10522:354:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11055:226:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11072:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11083:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11065:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11065:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11065:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11106:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11117:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11102:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11102:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11122:2:18",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11095:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11095:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11095:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11145:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11156:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11141:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11141:18:18"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11161:34:18",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11134:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11134:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11134:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11216:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11227:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11212:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11212:18:18"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11232:6:18",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11205:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11205:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11205:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11248:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11260:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11271:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11256:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11256:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11248:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11032:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11046:4:18",
														"type": ""
													}
												],
												"src": "10881:400:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11460:224:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11477:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11488:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11470:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11470:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11470:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11511:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11522:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11507:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11507:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11527:2:18",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11500:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11500:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11500:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11550:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11561:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11546:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11546:18:18"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11566:34:18",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11539:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11539:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11539:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11621:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11632:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11617:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11617:18:18"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11637:4:18",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11610:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11610:32:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11610:32:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11651:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11663:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11674:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11659:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11659:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11651:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11437:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11451:4:18",
														"type": ""
													}
												],
												"src": "11286:398:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11863:179:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11880:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11891:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11873:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11873:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11873:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11914:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11925:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11910:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11910:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11930:2:18",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11903:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11903:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11903:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11953:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11964:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11949:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11949:18:18"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11969:31:18",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11942:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "11942:59:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11942:59:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12010:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12022:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12033:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12018:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12018:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12010:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11840:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11854:4:18",
														"type": ""
													}
												],
												"src": "11689:353:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12221:227:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12238:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12249:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12231:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12231:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12231:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12272:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12283:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12268:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12268:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12288:2:18",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12261:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12261:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12261:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12311:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12322:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12307:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12307:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12327:34:18",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12300:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12300:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12300:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12382:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12393:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12378:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12378:18:18"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12398:7:18",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12371:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12371:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12371:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12415:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12427:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12438:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12423:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12423:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12415:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12198:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12212:4:18",
														"type": ""
													}
												],
												"src": "12047:401:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12627:225:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12644:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12655:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12637:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12637:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12637:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12678:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12689:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12674:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12674:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12694:2:18",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12667:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12667:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12667:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12717:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12728:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12713:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12713:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12733:34:18",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12706:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12706:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12706:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12788:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12799:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12784:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12784:18:18"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12804:5:18",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12777:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12777:33:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12777:33:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12819:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12831:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12842:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12827:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "12827:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12819:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12604:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12618:4:18",
														"type": ""
													}
												],
												"src": "12453:399:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13031:228:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13048:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13059:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13041:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13041:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13041:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13082:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13093:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13078:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13078:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13098:2:18",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13071:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13071:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13071:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13121:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13132:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13117:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13117:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13137:34:18",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13110:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13110:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13110:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13192:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13203:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13188:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13188:18:18"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13208:8:18",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13181:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13181:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13181:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13226:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13238:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13249:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13234:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13234:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13226:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13008:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13022:4:18",
														"type": ""
													}
												],
												"src": "12857:402:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13477:276:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13487:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13499:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13510:3:18",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13495:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13495:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13487:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13530:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13541:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13523:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13523:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13523:25:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13568:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13579:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13564:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13564:18:18"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13584:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13557:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13557:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13557:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13611:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13622:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13607:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13607:18:18"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13627:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13600:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13600:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13600:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13654:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13665:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13650:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13650:18:18"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "13670:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13643:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13643:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13643:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13697:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13708:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13693:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13693:19:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nodeType": "YulIdentifier",
																				"src": "13718:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13734:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13739:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "13730:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13730:11:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13743:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "13726:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13726:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13714:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13714:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13686:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13686:61:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13686:61:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13414:9:18",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "13425:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "13433:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13441:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13449:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13457:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13468:4:18",
														"type": ""
													}
												],
												"src": "13264:489:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13932:223:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13949:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13960:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13942:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13942:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13942:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13983:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13994:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13979:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13979:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13999:2:18",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13972:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "13972:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13972:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14022:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14033:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14018:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14018:18:18"
																	},
																	{
																		"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14038:34:18",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14011:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14011:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14011:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14093:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14104:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14089:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14089:18:18"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14109:3:18",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14082:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14082:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14082:31:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14122:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14134:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14145:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14130:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14130:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14122:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13909:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13923:4:18",
														"type": ""
													}
												],
												"src": "13758:397:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14334:224:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14351:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14362:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14344:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14344:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14344:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14385:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14396:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14381:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14381:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14401:2:18",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14374:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14374:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14374:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14424:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14435:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14420:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14420:18:18"
																	},
																	{
																		"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14440:34:18",
																		"type": "",
																		"value": "ERC20: burn amount exceeds balan"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14413:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14413:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14413:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14495:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14506:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14491:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14491:18:18"
																	},
																	{
																		"hexValue": "6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14511:4:18",
																		"type": "",
																		"value": "ce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14484:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14484:32:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14484:32:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14525:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14537:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14548:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14533:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14533:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14525:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14311:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14325:4:18",
														"type": ""
													}
												],
												"src": "14160:398:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14612:76:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14634:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "14636:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14636:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14636:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "14628:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14631:1:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "14625:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14625:8:18"
															},
															"nodeType": "YulIf",
															"src": "14622:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14665:17:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "14677:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14680:1:18"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "14673:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14673:9:18"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "14665:4:18"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "14594:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "14597:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "14603:4:18",
														"type": ""
													}
												],
												"src": "14563:125:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14867:181:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14884:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14895:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14877:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14877:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14877:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14918:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14929:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14914:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14914:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14934:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14907:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14907:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14907:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14957:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14968:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14953:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14953:18:18"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14973:33:18",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14946:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "14946:61:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14946:61:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15016:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15028:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15039:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15024:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15024:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15016:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14844:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14858:4:18",
														"type": ""
													}
												],
												"src": "14693:355:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15222:214:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15239:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15250:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15232:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15232:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15232:21:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15262:59:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "15294:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15306:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15317:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15302:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15302:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "15276:17:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15276:45:18"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "15266:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15341:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15352:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15337:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15337:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_1",
																				"nodeType": "YulIdentifier",
																				"src": "15361:6:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15369:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15357:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15357:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15330:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15330:50:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15330:50:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15389:41:18",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "15415:6:18"
																	},
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "15423:6:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "15397:17:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15397:33:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15389:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15183:9:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "15194:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15202:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15213:4:18",
														"type": ""
													}
												],
												"src": "15053:383:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15615:228:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15632:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15643:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15625:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15625:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15625:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15666:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15677:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15662:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15662:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15682:2:18",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15655:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15655:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15655:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15705:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15716:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15701:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15701:18:18"
																	},
																	{
																		"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15721:34:18",
																		"type": "",
																		"value": "Address: delegate call to non-co"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15694:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15694:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15694:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15776:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15787:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15772:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15772:18:18"
																	},
																	{
																		"hexValue": "6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15792:8:18",
																		"type": "",
																		"value": "ntract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15765:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15765:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15765:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15810:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15822:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15833:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15818:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "15818:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15810:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15592:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15606:4:18",
														"type": ""
													}
												],
												"src": "15441:402:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15985:137:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15995:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16015:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "16009:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16009:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "15999:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "16057:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16065:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16053:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16053:17:18"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16072:3:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16077:6:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "16031:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16031:53:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16031:53:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16093:23:18",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16104:3:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16109:6:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16100:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16100:16:18"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16093:3:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15961:3:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15966:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "15977:3:18",
														"type": ""
													}
												],
												"src": "15848:274:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16308:217:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16318:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16330:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16341:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16326:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16326:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16318:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16361:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16372:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16354:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16354:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16354:25:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16399:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16410:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16395:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16395:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "16419:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16427:4:18",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "16415:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16415:17:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16388:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16388:45:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16388:45:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16453:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16464:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16449:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16449:18:18"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "16469:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16442:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16442:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16442:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16496:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16507:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16492:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16492:18:18"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "16512:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16485:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16485:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16485:34:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16253:9:18",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "16264:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "16272:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "16280:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16288:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16299:4:18",
														"type": ""
													}
												],
												"src": "16127:398:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16562:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16579:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16586:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16591:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "16582:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16582:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16572:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16572:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16572:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16619:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16622:4:18",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16612:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16612:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16612:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16643:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16646:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16636:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16636:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16636:15:18"
														}
													]
												},
												"name": "panic_error_0x21",
												"nodeType": "YulFunctionDefinition",
												"src": "16530:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16836:174:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16853:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16864:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16846:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16846:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16846:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16887:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16898:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16883:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16883:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16903:2:18",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16876:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16876:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16876:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16926:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16937:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16922:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16922:18:18"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "16942:26:18",
																		"type": "",
																		"value": "ECDSA: invalid signature"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16915:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16915:54:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16915:54:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16978:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16990:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17001:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16986:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "16986:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16978:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16813:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16827:4:18",
														"type": ""
													}
												],
												"src": "16662:348:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17189:181:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17206:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17217:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17199:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17199:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17199:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17240:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17251:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17236:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17236:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17256:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17229:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17229:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17229:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17279:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17290:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17275:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17275:18:18"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17295:33:18",
																		"type": "",
																		"value": "ECDSA: invalid signature length"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17268:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17268:61:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17268:61:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17338:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17350:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17361:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17346:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17346:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17338:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17166:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17180:4:18",
														"type": ""
													}
												],
												"src": "17015:355:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17549:224:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17566:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17577:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17559:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17559:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17559:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17600:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17611:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17596:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17596:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17616:2:18",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17589:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17589:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17589:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17639:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17650:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17635:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17635:18:18"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17655:34:18",
																		"type": "",
																		"value": "ECDSA: invalid signature 's' val"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17628:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17628:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17628:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17710:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17721:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17706:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17706:18:18"
																	},
																	{
																		"hexValue": "7565",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17726:4:18",
																		"type": "",
																		"value": "ue"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17699:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17699:32:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17699:32:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17740:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17752:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17763:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17748:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "17748:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17740:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17526:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17540:4:18",
														"type": ""
													}
												],
												"src": "17375:398:18"
											}
										]
									},
									"contents": "{\n    { }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_string(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value := calldataload(add(headStart, 128))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value4 := value\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Not authorized\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"not enough balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Not authorized to mint.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7acedc89dd3658da26d0488f7e55737f51bdbd8424532db0708cd962cbb1712b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Minting zero tokens.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Permit: expired deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"ERC20Permit: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1616": [
									{
										"length": 32,
										"start": 1200
									}
								],
								"1618": [
									{
										"length": 32,
										"start": 1158
									}
								],
								"1620": [
									{
										"length": 32,
										"start": 1116
									}
								],
								"1625": [
									{
										"length": 32,
										"start": 2163
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0x449A52F8 EQ PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x13AF4035 EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x329 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1660 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x151 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x3D3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x4 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x151 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x16D4 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x151 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x44F JUMP JUMPDEST PUSH2 0x16D PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x4DF JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0x1710 JUMP JUMPDEST PUSH2 0x51E JUMP JUMPDEST PUSH2 0x190 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x57C JUMP JUMPDEST PUSH2 0x196 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x151 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x282 CALLDATASIZE PUSH1 0x4 PUSH2 0x173F JUMP JUMPDEST PUSH2 0x622 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x670 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x67F JUMP JUMPDEST PUSH2 0x16D PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x168F JUMP JUMPDEST PUSH2 0x71C JUMP JUMPDEST PUSH2 0x2C8 PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x17F0 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x18C7 JUMP JUMPDEST PUSH2 0x81F JUMP JUMPDEST PUSH2 0x196 PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x9A5 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD PUSH2 0x338 SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x364 SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3B1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x386 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x394 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C9 DUP2 DUP6 DUP6 PUSH2 0xA33 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3DB PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x41D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x139BDD08185D5D1A1BDC9A5E9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x426 DUP2 PUSH2 0xB85 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x437 DUP6 DUP3 DUP6 PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0x442 DUP6 DUP6 DUP6 PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x4A8 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x4D2 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x4DA PUSH2 0xE37 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x3C9 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x519 SWAP1 DUP8 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST PUSH2 0xA33 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x572 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x6E6F7420656E6F7567682062616C616E6365 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x426 CALLER DUP3 PUSH2 0xECC JUMP JUMPDEST PUSH2 0x584 PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x5D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617574686F72697A656420746F206D696E742E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST DUP1 PUSH2 0x614 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x26B4B73A34B733903D32B937903A37B5B2B73997 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x61E DUP3 DUP3 PUSH2 0x1012 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x62A PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x139BDD08185D5D1A1BDC9A5E9959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x426 DUP2 PUSH2 0x10F1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD PUSH2 0x338 SWAP1 PUSH2 0x196D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x711 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xA33 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C9 DUP2 DUP6 DUP6 PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x745 JUMPI PUSH2 0x745 PUSH2 0x1729 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x778 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x763 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x818 JUMPI PUSH2 0x7E8 ADDRESS DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x79C JUMPI PUSH2 0x79C PUSH2 0x19D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x7AE SWAP2 SWAP1 PUSH2 0x19E6 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x11D2 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7FA JUMPI PUSH2 0x7FA PUSH2 0x19D0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x810 SWAP1 PUSH2 0x1A34 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x77E JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x86F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP9 DUP9 DUP9 PUSH2 0x89E DUP13 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x91B PUSH2 0x8FB PUSH2 0x44F JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x92B DUP3 DUP8 DUP8 DUP8 PUSH2 0x121F JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x98E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0x999 DUP11 DUP11 DUP11 PUSH2 0xA33 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x9B2 SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9DE SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA2B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA00 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA2B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA0E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6C PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8292FCE18FA69EDF4DB7B94EA2E58241DF0AE57F97E0A6C9B29067028BF92D76 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xC63 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xC56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH2 0xC63 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xA33 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xDDE SWAP1 DUP5 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xE2A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xC63 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0xE62 PUSH2 0x329 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF2C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xFA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xFCF SWAP1 DUP5 SWAP1 PUSH2 0x1A4F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH2 0xB4B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1068 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x107A SWAP2 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x10A7 SWAP1 DUP5 SWAP1 PUSH2 0x19B8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD PUSH2 0x10FF SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x112B SWAP1 PUSH2 0x196D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1178 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x114D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1178 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x115B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP DUP6 MLOAD SWAP4 SWAP5 POP PUSH2 0x1194 SWAP4 PUSH1 0x0 SWAP4 POP PUSH1 0x20 DUP8 ADD SWAP3 POP SWAP1 POP PUSH2 0x156F JUMP JUMPDEST POP PUSH32 0xC9C7C3FE08B88B4DF9D4D47EF47D2C43D55C025A0BA88CA442580ED9E7348A16 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH2 0x11C6 SWAP3 SWAP2 SWAP1 PUSH2 0x1A66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x448 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AC7 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1230 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1324 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x123D DUP2 PUSH2 0x13E8 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x12AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x12CA SWAP2 SWAP1 PUSH2 0x1A94 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1305 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x130A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x131A DUP3 DUP3 DUP7 PUSH2 0x1536 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x135B JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x13DF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x13D8 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x13DF JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x13FC JUMPI PUSH2 0x13FC PUSH2 0x1AB0 JUMP JUMPDEST EQ ISZERO PUSH2 0x1405 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1419 JUMPI PUSH2 0x1419 PUSH2 0x1AB0 JUMP JUMPDEST EQ ISZERO PUSH2 0x1467 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x147B JUMPI PUSH2 0x147B PUSH2 0x1AB0 JUMP JUMPDEST EQ ISZERO PUSH2 0x14C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x14DD JUMPI PUSH2 0x14DD PUSH2 0x1AB0 JUMP JUMPDEST EQ ISZERO PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x414 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1545 JUMPI POP DUP2 PUSH2 0x448 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1555 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x414 SWAP2 SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x157B SWAP1 PUSH2 0x196D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x159D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x15E3 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x15B6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x15E3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x15E3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x15E3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x15C8 JUMP JUMPDEST POP PUSH2 0x15EF SWAP3 SWAP2 POP PUSH2 0x15F3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x15EF JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x15F4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1623 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x160B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC63 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x164C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1608 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x448 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1634 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x168A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16AB DUP4 PUSH2 0x1673 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x448 DUP3 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16F2 DUP5 PUSH2 0x1673 JUMP JUMPDEST SWAP3 POP PUSH2 0x1700 PUSH1 0x20 DUP6 ADD PUSH2 0x1673 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1769 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x177D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x178F JUMPI PUSH2 0x178F PUSH2 0x1729 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x17B7 JUMPI PUSH2 0x17B7 PUSH2 0x1729 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x17D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1803 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x181B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x182F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x18BA JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x18A8 DUP6 DUP4 MLOAD PUSH2 0x1634 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x188C JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x18E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18EB DUP9 PUSH2 0x1673 JUMP JUMPDEST SWAP7 POP PUSH2 0x18F9 PUSH1 0x20 DUP10 ADD PUSH2 0x1673 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x191D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x194D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1956 DUP4 PUSH2 0x1673 JUMP JUMPDEST SWAP2 POP PUSH2 0x1964 PUSH1 0x20 DUP5 ADD PUSH2 0x1673 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1981 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1219 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x19CB JUMPI PUSH2 0x19CB PUSH2 0x19A2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x19FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1A48 JUMPI PUSH2 0x1A48 PUSH2 0x19A2 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1A61 JUMPI PUSH2 0x1A61 PUSH2 0x19A2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1A79 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1634 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1A8B DUP2 DUP6 PUSH2 0x1634 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1AA6 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1608 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212204953D8 0xB0 0xBD PUSH18 0x80DB310463B779D4EC61C8AEF183E4DB3507 0x5D 0xAD EQ 0x2E DUP7 0x4B 0xA5 PUSH18 0x64736F6C634300080B003300000000000000 ",
							"sourceMap": "893:2309:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2187:98:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4464:197;;;;;;:::i;:::-;;:::i;:::-;;;1367:14:18;;1360:22;1342:41;;1330:2;1315:18;4464:197:12;1202:187:18;1113:173:6;;;;;;:::i;:::-;;:::i;:::-;;3275:106:12;3362:12;;3275:106;;;1731:25:18;;;1719:2;1704:18;3275:106:12;1585:177:18;5223:286:12;;;;;;:::i;:::-;;:::i;3124:91::-;;;3206:2;2242:36:18;;2230:2;2215:18;3124:91:12;2100:184:18;3015:272:13;;;:::i;5904:236:12:-;;;;;;:::i;:::-;;:::i;2233:164:0:-;;;;;;:::i;:::-;;:::i;1801:209::-;;;;;;:::i;:::-;;:::i;3439:125:12:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3539:18:12;3513:7;3539:18;;;:9;:18;;;;;;;3439:125;2765:126:13;;;;;;:::i;:::-;-1:-1:-1;;;;;2860:14:13;2834:7;2860:14;;;:7;:14;;;;;918::15;;2765:126:13;851:86:6;924:6;;851:86;;-1:-1:-1;;;;;924:6:6;;;2802:51:18;;2790:2;2775:18;851:86:6;2656:203:18;983:188:4;;;;;;:::i;:::-;;:::i;2398:102:12:-;;;:::i;6627:429::-;;;;;;:::i;:::-;;:::i;3760:189::-;;;;;;:::i;:::-;;:::i;678:319:5:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2053:651:13:-;;;;;;:::i;:::-;;:::i;4007:149:12:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4122:18:12;;;4096:7;4122:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4007:149;545:34:4;;;:::i;2187:98:12:-;2241:13;2273:5;2266:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2187:98;:::o;4464:197::-;4547:4;719:10:14;4601:32:12;719:10:14;4617:7:12;4626:6;4601:8;:32::i;:::-;-1:-1:-1;4650:4:12;;4464:197;-1:-1:-1;;;4464:197:12:o;1113:173:6:-;1183:14;:12;:14::i;:::-;1178:70;;1213:24;;-1:-1:-1;;;1213:24:6;;6910:2:18;1213:24:6;;;6892:21:18;6949:2;6929:18;;;6922:30;-1:-1:-1;;;6968:18:18;;;6961:44;7022:18;;1213:24:6;;;;;;;;1178:70;1257:22;1269:9;1257:11;:22::i;:::-;1113:173;:::o;5223:286:12:-;5350:4;719:10:14;5406:38:12;5422:4;719:10:14;5437:6:12;5406:15;:38::i;:::-;5454:27;5464:4;5470:2;5474:6;5454:9;:27::i;:::-;5498:4;5491:11;;;5223:286;;;;;;:::o;3015:272:13:-;3073:7;3104:4;-1:-1:-1;;;;;3113:12:13;3096:29;;:66;;;;;3146:16;3129:13;:33;3096:66;3092:189;;;-1:-1:-1;3185:24:13;;3015:272::o;3092:189::-;3247:23;:21;:23::i;:::-;3240:30;;3015:272;:::o;5904:236:12:-;719:10:14;5992:4:12;6071:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6071:27:12;;;;;;;;;;5992:4;;719:10:14;6046:66:12;;719:10:14;;6071:27:12;;:40;;6101:10;;6071:40;:::i;:::-;6046:8;:66::i;2233:164:0:-;2309:10;3513:7:12;3539:18;;;:9;:18;;;;;;2324:7:0;-1:-1:-1;2299:32:0;2291:63;;;;-1:-1:-1;;;2291:63:0;;7518:2:18;2291:63:0;;;7500:21:18;7557:2;7537:18;;;7530:30;-1:-1:-1;;;7576:18:18;;;7569:48;7634:18;;2291:63:0;7316:342:18;2291:63:0;2364:26;2370:10;2382:7;2364:5;:26::i;1801:209::-;1880:10;:8;:10::i;:::-;1872:46;;;;-1:-1:-1;;;1872:46:0;;7865:2:18;1872:46:0;;;7847:21:18;7904:2;7884:18;;;7877:30;7943:25;7923:18;;;7916:53;7986:18;;1872:46:0;7663:347:18;1872:46:0;1936:12;1928:45;;;;-1:-1:-1;;;1928:45:0;;8217:2:18;1928:45:0;;;8199:21:18;8256:2;8236:18;;;8229:30;-1:-1:-1;;;8275:18:18;;;8268:50;8335:18;;1928:45:0;8015:344:18;1928:45:0;1984:19;1990:3;1995:7;1984:5;:19::i;:::-;1801:209;;:::o;983:188:4:-;1060:20;:18;:20::i;:::-;1055:76;;1096:24;;-1:-1:-1;;;1096:24:4;;6910:2:18;1096:24:4;;;6892:21:18;6949:2;6929:18;;;6922:30;-1:-1:-1;;;6968:18:18;;;6961:44;7022:18;;1096:24:4;6708:338:18;1055:76:4;1141:23;1159:4;1141:17;:23::i;2398:102:12:-;2454:13;2486:7;2479:14;;;;;:::i;6627:429::-;719:10:14;6720:4:12;6801:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6801:27:12;;;;;;;;;;6720:4;;719:10:14;6846:35:12;;;;6838:85;;;;-1:-1:-1;;;6838:85:12;;8566:2:18;6838:85:12;;;8548:21:18;8605:2;8585:18;;;8578:30;8644:34;8624:18;;;8617:62;-1:-1:-1;;;8695:18:18;;;8688:35;8740:19;;6838:85:12;8364:401:18;6838:85:12;6957:60;6966:5;6973:7;7001:15;6982:16;:34;6957:8;:60::i;:::-;-1:-1:-1;7045:4:12;;6627:429;-1:-1:-1;;;;6627:429:12:o;3760:189::-;3839:4;719:10:14;3893:28:12;719:10:14;3910:2:12;3914:6;3893:9;:28::i;678:319:5:-;755:22;811:4;799:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;789:34;;838:9;833:134;853:15;;;833:134;;;902:54;941:4;948;;953:1;948:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;902:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;902:30:5;;-1:-1:-1;;;902:54:5:i;:::-;889:7;897:1;889:10;;;;;;;;:::i;:::-;;;;;;:67;;;;870:3;;;;;:::i;:::-;;;;833:134;;;;678:319;;;;:::o;2053:651:13:-;2288:8;2269:15;:27;;2261:69;;;;-1:-1:-1;;;2261:69:13;;9770:2:18;2261:69:13;;;9752:21:18;9809:2;9789:18;;;9782:30;9848:31;9828:18;;;9821:59;9897:18;;2261:69:13;9568:353:18;2261:69:13;2341:18;2383:16;2401:5;2408:7;2417:5;2424:16;2434:5;2424:9;:16::i;:::-;2372:79;;;;;;10213:25:18;;;;-1:-1:-1;;;;;10312:15:18;;;10292:18;;;10285:43;10364:15;;;;10344:18;;;10337:43;10396:18;;;10389:34;10439:19;;;10432:35;10483:19;;;10476:35;;;10185:19;;2372:79:13;;;;;;;;;;;;2362:90;;;;;;2341:111;;2463:12;2478:53;2500:18;:16;:18::i;:::-;2520:10;8686:4:16;8680:11;-1:-1:-1;;;8704:23:16;;8756:4;8747:14;;8740:39;;;;8808:4;8799:14;;8792:34;8862:4;8847:20;;;8486:397;2478:53:13;2463:68;;2542:14;2559:28;2573:4;2579:1;2582;2585;2559:13;:28::i;:::-;2542:45;;2615:5;-1:-1:-1;;;;;2605:15:13;:6;-1:-1:-1;;;;;2605:15:13;;2597:58;;;;-1:-1:-1;;;2597:58:13;;10724:2:18;2597:58:13;;;10706:21:18;10763:2;10743:18;;;10736:30;10802:32;10782:18;;;10775:60;10852:18;;2597:58:13;10522:354:18;2597:58:13;2666:31;2675:5;2682:7;2691:5;2666:8;:31::i;:::-;2251:453;;;2053:651;;;;;;;:::o;545:34:4:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;10154:370:12:-;-1:-1:-1;;;;;10285:19:12;;10277:68;;;;-1:-1:-1;;;10277:68:12;;11083:2:18;10277:68:12;;;11065:21:18;11122:2;11102:18;;;11095:30;11161:34;11141:18;;;11134:62;-1:-1:-1;;;11212:18:18;;;11205:34;11256:19;;10277:68:12;10881:400:18;10277:68:12;-1:-1:-1;;;;;10363:21:12;;10355:68;;;;-1:-1:-1;;;10355:68:12;;11488:2:18;10355:68:12;;;11470:21:18;11527:2;11507:18;;;11500:30;11566:34;11546:18;;;11539:62;-1:-1:-1;;;11617:18:18;;;11610:32;11659:19;;10355:68:12;11286:398:18;10355:68:12;-1:-1:-1;;;;;10434:18:12;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10485:32;;1731:25:18;;;10485:32:12;;1704:18:18;10485:32:12;;;;;;;;10154:370;;;:::o;3085:115:0:-;3149:4;3186:7;924:6:6;;-1:-1:-1;;;;;924:6:6;;851:86;3186:7:0;-1:-1:-1;;;;;3172:21:0;:10;-1:-1:-1;;;;;3172:21:0;;3165:28;;3085:115;:::o;1401:172:6:-;1481:6;;;-1:-1:-1;;;;;1497:18:6;;;-1:-1:-1;;;;;;1497:18:6;;;;;;;1531:35;;1481:6;;;1497:18;1481:6;;1531:35;;1460:18;;1531:35;1450:123;1401:172;:::o;10801:441:12:-;-1:-1:-1;;;;;4122:18:12;;;10931:24;4122:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10997:37:12;;10993:243;;11078:6;11058:16;:26;;11050:68;;;;-1:-1:-1;;;11050:68:12;;11891:2:18;11050:68:12;;;11873:21:18;11930:2;11910:18;;;11903:30;11969:31;11949:18;;;11942:59;12018:18;;11050:68:12;11689:353:18;11050:68:12;11160:51;11169:5;11176:7;11204:6;11185:16;:25;11160:8;:51::i;:::-;10921:321;10801:441;;;:::o;7519:651::-;-1:-1:-1;;;;;7645:18:12;;7637:68;;;;-1:-1:-1;;;7637:68:12;;12249:2:18;7637:68:12;;;12231:21:18;12288:2;12268:18;;;12261:30;12327:34;12307:18;;;12300:62;-1:-1:-1;;;12378:18:18;;;12371:35;12423:19;;7637:68:12;12047:401:18;7637:68:12;-1:-1:-1;;;;;7723:16:12;;7715:64;;;;-1:-1:-1;;;7715:64:12;;12655:2:18;7715:64:12;;;12637:21:18;12694:2;12674:18;;;12667:30;12733:34;12713:18;;;12706:62;-1:-1:-1;;;12784:18:18;;;12777:33;12827:19;;7715:64:12;12453:399:18;7715:64:12;-1:-1:-1;;;;;7861:15:12;;7839:19;7861:15;;;:9;:15;;;;;;7894:21;;;;7886:72;;;;-1:-1:-1;;;7886:72:12;;13059:2:18;7886:72:12;;;13041:21:18;13098:2;13078:18;;;13071:30;13137:34;13117:18;;;13110:62;-1:-1:-1;;;13188:18:18;;;13181:36;13234:19;;7886:72:12;12857:402:18;7886:72:12;-1:-1:-1;;;;;7992:15:12;;;;;;;:9;:15;;;;;;8010:20;;;7992:38;;8050:13;;;;;;;;:23;;8024:6;;7992:15;8050:23;;8024:6;;8050:23;:::i;:::-;;;;;;;;8104:2;-1:-1:-1;;;;;8089:26:12;8098:4;-1:-1:-1;;;;;8089:26:12;;8108:6;8089:26;;;;1731:25:18;;1719:2;1704:18;;1585:177;8089:26:12;;;;;;;;8126:37;9155:576;3293:438:13;3348:7;3445:95;3578:6;:4;:6::i;:::-;3562:24;;;;;;;3413:297;;;;;;13523:25:18;;;;13564:18;;;13557:34;;;;3608:14:13;13607:18:18;;;13600:34;3644:13:13;13650:18:18;;;13643:34;3687:4:13;13693:19:18;;;13686:61;13495:19;;3413:297:13;;;;;;;;;;;;3386:338;;;;;;3367:357;;3293:438;:::o;9155:576:12:-;-1:-1:-1;;;;;9238:21:12;;9230:67;;;;-1:-1:-1;;;9230:67:12;;13960:2:18;9230:67:12;;;13942:21:18;13999:2;13979:18;;;13972:30;14038:34;14018:18;;;14011:62;-1:-1:-1;;;14089:18:18;;;14082:31;14130:19;;9230:67:12;13758:397:18;9230:67:12;-1:-1:-1;;;;;9393:18:12;;9368:22;9393:18;;;:9;:18;;;;;;9429:24;;;;9421:71;;;;-1:-1:-1;;;9421:71:12;;14362:2:18;9421:71:12;;;14344:21:18;14401:2;14381:18;;;14374:30;14440:34;14420:18;;;14413:62;-1:-1:-1;;;14491:18:18;;;14484:32;14533:19;;9421:71:12;14160:398:18;9421:71:12;-1:-1:-1;;;;;9526:18:12;;;;;;:9;:18;;;;;9547:23;;;9526:44;;9590:12;:22;;9564:6;;9526:18;9590:22;;9564:6;;9590:22;:::i;:::-;;;;-1:-1:-1;;9628:37:12;;1731:25:18;;;9654:1:12;;-1:-1:-1;;;;;9628:37:12;;;;;1719:2:18;1704:18;9628:37:12;1585:177:18;8446:389:12;-1:-1:-1;;;;;8529:21:12;;8521:65;;;;-1:-1:-1;;;8521:65:12;;14895:2:18;8521:65:12;;;14877:21:18;14934:2;14914:18;;;14907:30;14973:33;14953:18;;;14946:61;15024:18;;8521:65:12;14693:355:18;8521:65:12;8673:6;8657:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8689:18:12;;;;;;:9;:18;;;;;:28;;8711:6;;8689:18;:28;;8711:6;;8689:28;:::i;:::-;;;;-1:-1:-1;;8732:37:12;;1731:25:18;;;-1:-1:-1;;;;;8732:37:12;;;8749:1;;8732:37;;1719:2:18;1704:18;8732:37:12;;;;;;;1801:209:0;;:::o;1253:185:4:-;1319:21;1343:11;1319:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1364:18:4;;1319:35;;-1:-1:-1;1364:18:4;;:11;;-1:-1:-1;1364:18:4;;;;-1:-1:-1;1364:18:4;-1:-1:-1;1364:18:4;:::i;:::-;;1398:33;1417:7;1426:4;1398:33;;;;;;;:::i;:::-;;;;;;;;1309:129;1253:185;:::o;6518:198:10:-;6601:12;6632:77;6653:6;6661:4;6632:77;;;;;;;;;;;;;;;;;:20;:77::i;3862:203:13:-;-1:-1:-1;;;;;3982:14:13;;3922:15;3982:14;;;:7;:14;;;;;918::15;;1050:1;1032:19;;;;918:14;4041:17:13;3939:126;3862:203;;;:::o;6708:270:16:-;6831:7;6851:17;6870:18;6892:25;6903:4;6909:1;6912;6915;6892:10;:25::i;:::-;6850:67;;;;6927:18;6939:5;6927:11;:18::i;:::-;-1:-1:-1;6962:9:16;6708:270;-1:-1:-1;;;;;6708:270:16:o;6902:387:10:-;7043:12;-1:-1:-1;;;;;1407:19:10;;;7067:69;;;;-1:-1:-1;;;7067:69:10;;15643:2:18;7067:69:10;;;15625:21:18;15682:2;15662:18;;;15655:30;15721:34;15701:18;;;15694:62;-1:-1:-1;;;15772:18:18;;;15765:36;15818:19;;7067:69:10;15441:402:18;7067:69:10;7148:12;7162:23;7189:6;-1:-1:-1;;;;;7189:19:10;7209:4;7189:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7147:67;;;;7231:51;7248:7;7257:10;7269:12;7231:16;:51::i;:::-;7224:58;6902:387;-1:-1:-1;;;;;;6902:387:10:o;5081:1494:16:-;5207:7;;6131:66;6118:79;;6114:161;;;-1:-1:-1;6229:1:16;;-1:-1:-1;6233:30:16;6213:51;;6114:161;6386:24;;;6369:14;6386:24;;;;;;;;;16354:25:18;;;16427:4;16415:17;;16395:18;;;16388:45;;;;16449:18;;;16442:34;;;16492:18;;;16485:34;;;6386:24:16;;16326:19:18;;6386:24:16;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6386:24:16;;-1:-1:-1;;6386:24:16;;;-1:-1:-1;;;;;;;6424:20:16;;6420:101;;6476:1;6480:29;6460:50;;;;;;;6420:101;6539:6;-1:-1:-1;6547:20:16;;-1:-1:-1;5081:1494:16;;;;;;;;:::o;582:511::-;659:20;650:5;:29;;;;;;;;:::i;:::-;;646:441;;;582:511;:::o;646:441::-;755:29;746:5;:38;;;;;;;;:::i;:::-;;742:345;;;800:34;;-1:-1:-1;;;800:34:16;;16864:2:18;800:34:16;;;16846:21:18;16903:2;16883:18;;;16876:30;16942:26;16922:18;;;16915:54;16986:18;;800:34:16;16662:348:18;742:345:16;864:35;855:5;:44;;;;;;;;:::i;:::-;;851:236;;;915:41;;-1:-1:-1;;;915:41:16;;17217:2:18;915:41:16;;;17199:21:18;17256:2;17236:18;;;17229:30;17295:33;17275:18;;;17268:61;17346:18;;915:41:16;17015:355:18;851:236:16;986:30;977:5;:39;;;;;;;;:::i;:::-;;973:114;;;1032:44;;-1:-1:-1;;;1032:44:16;;17577:2:18;1032:44:16;;;17559:21:18;17616:2;17596:18;;;17589:30;17655:34;17635:18;;;17628:62;-1:-1:-1;;;17706:18:18;;;17699:32;17748:19;;1032:44:16;17375:398:18;7509:692:10;7655:12;7683:7;7679:516;;;-1:-1:-1;7713:10:10;7706:17;;7679:516;7824:17;;:21;7820:365;;8018:10;8012:17;8078:15;8065:10;8061:2;8057:19;8050:44;7820:365;8157:12;8150:20;;-1:-1:-1;;;8150:20:10;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:258:18;86:1;96:113;110:6;107:1;104:13;96:113;;;186:11;;;180:18;167:11;;;160:39;132:2;125:10;96:113;;;227:6;224:1;221:13;218:48;;;-1:-1:-1;;262:1:18;244:16;;237:27;14:258::o;277:::-;319:3;357:5;351:12;384:6;379:3;372:19;400:63;456:6;449:4;444:3;440:14;433:4;426:5;422:16;400:63;:::i;:::-;517:2;496:15;-1:-1:-1;;492:29:18;483:39;;;;524:4;479:50;;277:258;-1:-1:-1;;277:258:18:o;540:220::-;689:2;678:9;671:21;652:4;709:45;750:2;739:9;735:18;727:6;709:45;:::i;765:173::-;833:20;;-1:-1:-1;;;;;882:31:18;;872:42;;862:70;;928:1;925;918:12;862:70;765:173;;;:::o;943:254::-;1011:6;1019;1072:2;1060:9;1051:7;1047:23;1043:32;1040:52;;;1088:1;1085;1078:12;1040:52;1111:29;1130:9;1111:29;:::i;:::-;1101:39;1187:2;1172:18;;;;1159:32;;-1:-1:-1;;;943:254:18:o;1394:186::-;1453:6;1506:2;1494:9;1485:7;1481:23;1477:32;1474:52;;;1522:1;1519;1512:12;1474:52;1545:29;1564:9;1545:29;:::i;1767:328::-;1844:6;1852;1860;1913:2;1901:9;1892:7;1888:23;1884:32;1881:52;;;1929:1;1926;1919:12;1881:52;1952:29;1971:9;1952:29;:::i;:::-;1942:39;;2000:38;2034:2;2023:9;2019:18;2000:38;:::i;:::-;1990:48;;2085:2;2074:9;2070:18;2057:32;2047:42;;1767:328;;;;;:::o;2471:180::-;2530:6;2583:2;2571:9;2562:7;2558:23;2554:32;2551:52;;;2599:1;2596;2589:12;2551:52;-1:-1:-1;2622:23:18;;2471:180;-1:-1:-1;2471:180:18:o;2864:127::-;2925:10;2920:3;2916:20;2913:1;2906:31;2956:4;2953:1;2946:15;2980:4;2977:1;2970:15;2996:922;3065:6;3118:2;3106:9;3097:7;3093:23;3089:32;3086:52;;;3134:1;3131;3124:12;3086:52;3174:9;3161:23;3203:18;3244:2;3236:6;3233:14;3230:34;;;3260:1;3257;3250:12;3230:34;3298:6;3287:9;3283:22;3273:32;;3343:7;3336:4;3332:2;3328:13;3324:27;3314:55;;3365:1;3362;3355:12;3314:55;3401:2;3388:16;3423:2;3419;3416:10;3413:36;;;3429:18;;:::i;:::-;3504:2;3498:9;3472:2;3558:13;;-1:-1:-1;;3554:22:18;;;3578:2;3550:31;3546:40;3534:53;;;3602:18;;;3622:22;;;3599:46;3596:72;;;3648:18;;:::i;:::-;3688:10;3684:2;3677:22;3723:2;3715:6;3708:18;3763:7;3758:2;3753;3749;3745:11;3741:20;3738:33;3735:53;;;3784:1;3781;3774:12;3735:53;3840:2;3835;3831;3827:11;3822:2;3814:6;3810:15;3797:46;3885:1;3863:15;;;3880:2;3859:24;3852:35;;;;-1:-1:-1;3867:6:18;2996:922;-1:-1:-1;;;;;2996:922:18:o;3923:626::-;4020:6;4028;4081:2;4069:9;4060:7;4056:23;4052:32;4049:52;;;4097:1;4094;4087:12;4049:52;4137:9;4124:23;4166:18;4207:2;4199:6;4196:14;4193:34;;;4223:1;4220;4213:12;4193:34;4261:6;4250:9;4246:22;4236:32;;4306:7;4299:4;4295:2;4291:13;4287:27;4277:55;;4328:1;4325;4318:12;4277:55;4368:2;4355:16;4394:2;4386:6;4383:14;4380:34;;;4410:1;4407;4400:12;4380:34;4463:7;4458:2;4448:6;4445:1;4441:14;4437:2;4433:23;4429:32;4426:45;4423:65;;;4484:1;4481;4474:12;4423:65;4515:2;4507:11;;;;;4537:6;;-1:-1:-1;3923:626:18;;-1:-1:-1;;;;3923:626:18:o;4554:801::-;4714:4;4743:2;4783;4772:9;4768:18;4813:2;4802:9;4795:21;4836:6;4871;4865:13;4902:6;4894;4887:22;4940:2;4929:9;4925:18;4918:25;;5002:2;4992:6;4989:1;4985:14;4974:9;4970:30;4966:39;4952:53;;5040:2;5032:6;5028:15;5061:1;5071:255;5085:6;5082:1;5079:13;5071:255;;;5178:2;5174:7;5162:9;5154:6;5150:22;5146:36;5141:3;5134:49;5206:40;5239:6;5230;5224:13;5206:40;:::i;:::-;5196:50;-1:-1:-1;5304:12:18;;;;5269:15;;;;5107:1;5100:9;5071:255;;;-1:-1:-1;5343:6:18;;4554:801;-1:-1:-1;;;;;;;4554:801:18:o;5360:693::-;5471:6;5479;5487;5495;5503;5511;5519;5572:3;5560:9;5551:7;5547:23;5543:33;5540:53;;;5589:1;5586;5579:12;5540:53;5612:29;5631:9;5612:29;:::i;:::-;5602:39;;5660:38;5694:2;5683:9;5679:18;5660:38;:::i;:::-;5650:48;;5745:2;5734:9;5730:18;5717:32;5707:42;;5796:2;5785:9;5781:18;5768:32;5758:42;;5850:3;5839:9;5835:19;5822:33;5895:4;5888:5;5884:16;5877:5;5874:27;5864:55;;5915:1;5912;5905:12;5864:55;5360:693;;;;-1:-1:-1;5360:693:18;;;;5938:5;5990:3;5975:19;;5962:33;;-1:-1:-1;6042:3:18;6027:19;;;6014:33;;5360:693;-1:-1:-1;;5360:693:18:o;6058:260::-;6126:6;6134;6187:2;6175:9;6166:7;6162:23;6158:32;6155:52;;;6203:1;6200;6193:12;6155:52;6226:29;6245:9;6226:29;:::i;:::-;6216:39;;6274:38;6308:2;6297:9;6293:18;6274:38;:::i;:::-;6264:48;;6058:260;;;;;:::o;6323:380::-;6402:1;6398:12;;;;6445;;;6466:61;;6520:4;6512:6;6508:17;6498:27;;6466:61;6573:2;6565:6;6562:14;6542:18;6539:38;6536:161;;;6619:10;6614:3;6610:20;6607:1;6600:31;6654:4;6651:1;6644:15;6682:4;6679:1;6672:15;7051:127;7112:10;7107:3;7103:20;7100:1;7093:31;7143:4;7140:1;7133:15;7167:4;7164:1;7157:15;7183:128;7223:3;7254:1;7250:6;7247:1;7244:13;7241:39;;;7260:18;;:::i;:::-;-1:-1:-1;7296:9:18;;7183:128::o;8770:127::-;8831:10;8826:3;8822:20;8819:1;8812:31;8862:4;8859:1;8852:15;8886:4;8883:1;8876:15;8902:521;8979:4;8985:6;9045:11;9032:25;9139:2;9135:7;9124:8;9108:14;9104:29;9100:43;9080:18;9076:68;9066:96;;9158:1;9155;9148:12;9066:96;9185:33;;9237:20;;;-1:-1:-1;9280:18:18;9269:30;;9266:50;;;9312:1;9309;9302:12;9266:50;9345:4;9333:17;;-1:-1:-1;9376:14:18;9372:27;;;9362:38;;9359:58;;;9413:1;9410;9403:12;9359:58;8902:521;;;;;:::o;9428:135::-;9467:3;-1:-1:-1;;9488:17:18;;9485:43;;;9508:18;;:::i;:::-;-1:-1:-1;9555:1:18;9544:13;;9428:135::o;14563:125::-;14603:4;14631:1;14628;14625:8;14622:34;;;14636:18;;:::i;:::-;-1:-1:-1;14673:9:18;;14563:125::o;15053:383::-;15250:2;15239:9;15232:21;15213:4;15276:45;15317:2;15306:9;15302:18;15294:6;15276:45;:::i;:::-;15369:9;15361:6;15357:22;15352:2;15341:9;15337:18;15330:50;15397:33;15423:6;15415;15397:33;:::i;:::-;15389:41;15053:383;-1:-1:-1;;;;;15053:383:18:o;15848:274::-;15977:3;16015:6;16009:13;16031:53;16077:6;16072:3;16065:4;16057:6;16053:17;16031:53;:::i;:::-;16100:16;;;;;15848:274;-1:-1:-1;;15848:274:18:o;16530:127::-;16591:10;16586:3;16582:20;16579:1;16572:31;16622:4;16619:1;16612:15;16646:4;16643:1;16636:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1389400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24648",
								"balanceOf(address)": "2560",
								"burn(uint256)": "53138",
								"contractURI()": "infinite",
								"decimals()": "200",
								"decreaseAllowance(address,uint256)": "26923",
								"increaseAllowance(address,uint256)": "27013",
								"mintTo(address,uint256)": "infinite",
								"multicall(bytes[])": "infinite",
								"name()": "infinite",
								"nonces(address)": "2582",
								"owner()": "2368",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"setContractURI(string)": "infinite",
								"setOwner(address)": "28431",
								"symbol()": "infinite",
								"totalSupply()": "2371",
								"transfer(address,uint256)": "51220",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_canMint()": "infinite",
								"_canSetContractURI()": "infinite",
								"_canSetOwner()": "2197"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1440,
									"end": 1535,
									"name": "PUSH",
									"source": 13,
									"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
								},
								{
									"begin": 1387,
									"end": 1535,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 1387,
									"end": 1535,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1218,
									"end": 1223,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1225,
									"end": 1232,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1829,
									"end": 1834,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1836,
									"end": 1843,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2083,
									"end": 2088,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2080,
									"name": "PUSH",
									"source": 12,
									"value": "5"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "9"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "tag",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "10"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2105,
									"name": "PUSH",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 2098,
									"end": 2105,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "9"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "tag",
									"source": 12,
									"value": "10"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1874,
									"end": 1887,
									"name": "CHAINID",
									"source": 13
								},
								{
									"begin": 1855,
									"end": 1887,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 1855,
									"end": 1887,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1920,
									"end": 1924,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 1897,
									"end": 1925,
									"name": "PUSH",
									"source": 13,
									"value": "C0"
								},
								{
									"begin": 1897,
									"end": 1925,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1962,
									"end": 1985,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "12"
								},
								{
									"begin": 1962,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "13"
								},
								{
									"begin": 1962,
									"end": 1985,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1962,
									"end": 1985,
									"name": "tag",
									"source": 13,
									"value": "12"
								},
								{
									"begin": 1962,
									"end": 1985,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1935,
									"end": 1985,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 1935,
									"end": 1985,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1244,
									"end": 1267,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1244,
									"end": 1267,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1256,
									"end": 1266,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 1244,
									"end": 1255,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1244,
									"end": 1267,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 1244,
									"end": 1267,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1244,
									"end": 1267,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1150,
									"end": 1274,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "43"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3293,
									"end": 3731,
									"name": "tag",
									"source": 13,
									"value": "13"
								},
								{
									"begin": 3293,
									"end": 3731,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3348,
									"end": 3355,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3445,
									"end": 3540,
									"name": "PUSH",
									"source": 13,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 3578,
									"end": 3584,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "19"
								},
								{
									"begin": 3578,
									"end": 3582,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3578,
									"end": 3584,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 3578,
									"end": 3584,
									"name": "tag",
									"source": 13,
									"value": "19"
								},
								{
									"begin": 3578,
									"end": 3584,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3562,
									"end": 3586,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3562,
									"end": 3586,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3562,
									"end": 3586,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3562,
									"end": 3586,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3562,
									"end": 3586,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3562,
									"end": 3586,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3562,
									"end": 3586,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1862,
									"end": 1887,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 1862,
									"end": 1887,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1862,
									"end": 1887,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 1862,
									"end": 1887,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1903,
									"end": 1921,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1903,
									"end": 1921,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1903,
									"end": 1921,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1896,
									"end": 1930,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1896,
									"end": 1930,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1896,
									"end": 1930,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1896,
									"end": 1930,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3608,
									"end": 3622,
									"name": "PUSH",
									"source": 13,
									"value": "C89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6"
								},
								{
									"begin": 1946,
									"end": 1964,
									"name": "PUSH",
									"source": 18,
									"value": "60"
								},
								{
									"begin": 1946,
									"end": 1964,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1946,
									"end": 1964,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1939,
									"end": 1973,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 13
								},
								{
									"begin": 1989,
									"end": 2007,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 1989,
									"end": 2007,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1989,
									"end": 2007,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1982,
									"end": 2016,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3687,
									"end": 3691,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 2032,
									"end": 2051,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 2032,
									"end": 2051,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2032,
									"end": 2051,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2025,
									"end": 2086,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1834,
									"end": 1853,
									"name": "PUSH",
									"source": 18,
									"value": "C0"
								},
								{
									"begin": 1834,
									"end": 1853,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 3413,
									"end": 3710,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3386,
									"end": 3724,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3386,
									"end": 3724,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3386,
									"end": 3724,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3386,
									"end": 3724,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3386,
									"end": 3724,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3386,
									"end": 3724,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 3367,
									"end": 3724,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3367,
									"end": 3724,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3293,
									"end": 3731,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3293,
									"end": 3731,
									"name": "JUMP",
									"source": 13,
									"value": "[out]"
								},
								{
									"begin": 1401,
									"end": 1573,
									"name": "tag",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1401,
									"end": 1573,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1481,
									"end": 1487,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1481,
									"end": 1487,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1481,
									"end": 1487,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1531,
									"end": 1566,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1531,
									"end": 1566,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1481,
									"end": 1487,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1481,
									"end": 1487,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1481,
									"end": 1487,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1497,
									"end": 1515,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1481,
									"end": 1487,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1481,
									"end": 1487,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1531,
									"end": 1566,
									"name": "PUSH",
									"source": 6,
									"value": "8292FCE18FA69EDF4DB7B94EA2E58241DF0AE57F97E0A6C9B29067028BF92D76"
								},
								{
									"begin": 1531,
									"end": 1566,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1460,
									"end": 1478,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1460,
									"end": 1478,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1531,
									"end": 1566,
									"name": "LOG3",
									"source": 6
								},
								{
									"begin": 1450,
									"end": 1573,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1401,
									"end": 1573,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1401,
									"end": 1573,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 2187,
									"end": 2285,
									"name": "tag",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2187,
									"end": 2285,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2241,
									"end": 2254,
									"name": "PUSH",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 2273,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "5"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "tag",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "tag",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "tag",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "KECCAK256",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "tag",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "tag",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2266,
									"end": 2278,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2187,
									"end": 2285,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2187,
									"end": 2285,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "38"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "38"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "tag",
									"source": 0,
									"value": "39"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "39"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 18,
									"value": "42"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "46"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 18,
									"value": "46"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "48"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "48"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 18,
									"value": "48"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 18,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "50"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "50"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 18,
									"value": "50"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 18
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "51"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 18,
									"value": "51"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 18,
									"value": "52"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "54"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "52"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 18,
									"value": "54"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "55"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 18,
									"value": "55"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 18
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "tag",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1135,
									"end": 1141,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1143,
									"end": 1149,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1196,
									"end": 1198,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1184,
									"end": 1193,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1175,
									"end": 1182,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1171,
									"end": 1194,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 1167,
									"end": 1199,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "57"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1212,
									"end": 1213,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1209,
									"end": 1210,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1202,
									"end": 1214,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "tag",
									"source": 18,
									"value": "57"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "58"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1331,
									"end": 1332,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1329,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1321,
									"end": 1333,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "tag",
									"source": 18,
									"value": "58"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "59"
								},
								{
									"begin": 1407,
									"end": 1414,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1398,
									"end": 1404,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1387,
									"end": 1396,
									"name": "DUP8",
									"source": 18
								},
								{
									"begin": 1383,
									"end": 1405,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "42"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "tag",
									"source": 18,
									"value": "59"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1461,
									"end": 1463,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1450,
									"end": 1459,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1446,
									"end": 1464,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1440,
									"end": 1465,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1490,
									"end": 1492,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1480,
									"end": 1488,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1477,
									"end": 1493,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "60"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1506,
									"end": 1507,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1503,
									"end": 1504,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1496,
									"end": 1508,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "tag",
									"source": 18,
									"value": "60"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "61"
								},
								{
									"begin": 1584,
									"end": 1591,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1573,
									"end": 1581,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1562,
									"end": 1571,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1558,
									"end": 1582,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "42"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "tag",
									"source": 18,
									"value": "61"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 2097,
									"end": 2477,
									"name": "tag",
									"source": 18,
									"value": "26"
								},
								{
									"begin": 2097,
									"end": 2477,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2176,
									"end": 2177,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 2172,
									"end": 2184,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 2172,
									"end": 2184,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 2172,
									"end": 2184,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 2172,
									"end": 2184,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 2219,
									"end": 2231,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2219,
									"end": 2231,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2219,
									"end": 2231,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 2240,
									"end": 2301,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 2240,
									"end": 2301,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 2294,
									"end": 2298,
									"name": "PUSH",
									"source": 18,
									"value": "7F"
								},
								{
									"begin": 2286,
									"end": 2292,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2282,
									"end": 2299,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2272,
									"end": 2299,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 2272,
									"end": 2299,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2240,
									"end": 2301,
									"name": "tag",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 2240,
									"end": 2301,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2347,
									"end": 2349,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 2339,
									"end": 2345,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2336,
									"end": 2350,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 2316,
									"end": 2334,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 2313,
									"end": 2351,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 2310,
									"end": 2471,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2310,
									"end": 2471,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "65"
								},
								{
									"begin": 2310,
									"end": 2471,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 2393,
									"end": 2403,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 2388,
									"end": 2391,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 2384,
									"end": 2404,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 2381,
									"end": 2382,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 2374,
									"end": 2405,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2428,
									"end": 2432,
									"name": "PUSH",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 2425,
									"end": 2426,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 2418,
									"end": 2433,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2456,
									"end": 2460,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 2453,
									"end": 2454,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 2446,
									"end": 2461,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 2310,
									"end": 2471,
									"name": "tag",
									"source": 18,
									"value": "65"
								},
								{
									"begin": 2310,
									"end": 2471,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2310,
									"end": 2471,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2097,
									"end": 2477,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 2097,
									"end": 2477,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 2097,
									"end": 2477,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2097,
									"end": 2477,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 2097,
									"end": 2477,
									"name": "tag",
									"source": 18,
									"value": "43"
								},
								{
									"begin": 2097,
									"end": 2477,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "C0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "1625"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "1620"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "1618"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "1616"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 893,
									"end": 3202,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204953d8b0bd7180db310463b779d4ec61c8aef183e4db35075dad142e864ba57164736f6c634300080b0033",
									".code": [
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "AC9650D8"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "D505ACCF"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "E8A3D485"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "7ECEBE00"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "938E3D7B"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "3644E515"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "42966C68"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "449A52F8"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "13AF4035"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 893,
											"end": 3202,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "tag",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "tag",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "tag",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1367,
											"end": 1381,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1367,
											"end": 1381,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1382,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1342,
											"end": 1383,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1342,
											"end": 1383,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 1202,
											"end": 1389,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3362,
											"end": 3374,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3362,
											"end": 3374,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "tag",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 1585,
											"end": 1762,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "tag",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "tag",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3206,
											"end": 3208,
											"name": "PUSH",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 2242,
											"end": 2278,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2242,
											"end": 2278,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2230,
											"end": 2232,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2215,
											"end": 2233,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 2100,
											"end": 2284,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "tag",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "tag",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "tag",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "tag",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3513,
											"end": 3520,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3548,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "tag",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "39"
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "tag",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2834,
											"end": 2841,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2860,
											"end": 2867,
											"name": "PUSH",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2860,
											"end": 2874,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 918,
											"end": 932,
											"name": "SLOAD",
											"source": 15
										},
										{
											"begin": 918,
											"end": 932,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 2765,
											"end": 2891,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 851,
											"end": 937,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 851,
											"end": 937,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 924,
											"end": 930,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 924,
											"end": 930,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 851,
											"end": 937,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 851,
											"end": 937,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 924,
											"end": 930,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 924,
											"end": 930,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 924,
											"end": 930,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2802,
											"end": 2853,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2802,
											"end": 2853,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2790,
											"end": 2792,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2775,
											"end": 2793,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 851,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 2656,
											"end": 2859,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "tag",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "tag",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "tag",
											"source": 12,
											"value": "89"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "tag",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "tag",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "103"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "tag",
											"source": 13,
											"value": "103"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "tag",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "107"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "108"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "tag",
											"source": 12,
											"value": "107"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4096,
											"end": 4103,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4133,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 545,
											"end": 579,
											"name": "tag",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "tag",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2241,
											"end": 2254,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2273,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "tag",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4547,
											"end": 4551,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4601,
											"end": 4633,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4617,
											"end": 4624,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4626,
											"end": 4632,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4601,
											"end": 4609,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 4601,
											"end": 4633,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4601,
											"end": 4633,
											"name": "tag",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 4601,
											"end": 4633,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4650,
											"end": 4654,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4650,
											"end": 4654,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "tag",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1183,
											"end": 1197,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 1183,
											"end": 1195,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 1183,
											"end": 1197,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1183,
											"end": 1197,
											"name": "tag",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 1183,
											"end": 1197,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1178,
											"end": 1248,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 1178,
											"end": 1248,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6910,
											"end": 6912,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6892,
											"end": 6913,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6949,
											"end": 6951,
											"name": "PUSH",
											"source": 18,
											"value": "E"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6922,
											"end": 6952,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "139BDD08185D5D1A1BDC9A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6968,
											"end": 6986,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 6968,
											"end": 6986,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6968,
											"end": 6986,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6961,
											"end": 7005,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7022,
											"end": 7040,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 7022,
											"end": 7040,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1213,
											"end": 1237,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1178,
											"end": 1248,
											"name": "tag",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 1178,
											"end": 1248,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1257,
											"end": 1279,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 1269,
											"end": 1278,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1257,
											"end": 1268,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 1257,
											"end": 1279,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1257,
											"end": 1279,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 1257,
											"end": 1279,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1113,
											"end": 1286,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "tag",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5350,
											"end": 5354,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 5406,
											"end": 5444,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 5422,
											"end": 5426,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5437,
											"end": 5443,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5406,
											"end": 5421,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 5406,
											"end": 5444,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5406,
											"end": 5444,
											"name": "tag",
											"source": 12,
											"value": "137"
										},
										{
											"begin": 5406,
											"end": 5444,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5454,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 5464,
											"end": 5468,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5470,
											"end": 5472,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5474,
											"end": 5480,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5454,
											"end": 5463,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "140"
										},
										{
											"begin": 5454,
											"end": 5481,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5454,
											"end": 5481,
											"name": "tag",
											"source": 12,
											"value": "139"
										},
										{
											"begin": 5454,
											"end": 5481,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5498,
											"end": 5502,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 5491,
											"end": 5502,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5491,
											"end": 5502,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5491,
											"end": 5502,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "tag",
											"source": 12,
											"value": "135"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "tag",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3073,
											"end": 3080,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3104,
											"end": 3108,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3113,
											"end": 3125,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "1620"
										},
										{
											"begin": 3096,
											"end": 3125,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3096,
											"end": 3125,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3096,
											"end": 3162,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3096,
											"end": 3162,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3096,
											"end": 3162,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 3096,
											"end": 3162,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3096,
											"end": 3162,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3146,
											"end": 3162,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "1618"
										},
										{
											"begin": 3129,
											"end": 3142,
											"name": "CHAINID",
											"source": 13
										},
										{
											"begin": 3129,
											"end": 3162,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3096,
											"end": 3162,
											"name": "tag",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 3096,
											"end": 3162,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3092,
											"end": 3281,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3092,
											"end": 3281,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "144"
										},
										{
											"begin": 3092,
											"end": 3281,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3185,
											"end": 3209,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "1616"
										},
										{
											"begin": 3185,
											"end": 3209,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 3092,
											"end": 3281,
											"name": "tag",
											"source": 13,
											"value": "144"
										},
										{
											"begin": 3092,
											"end": 3281,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3247,
											"end": 3270,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 3247,
											"end": 3268,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "147"
										},
										{
											"begin": 3247,
											"end": 3270,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3247,
											"end": 3270,
											"name": "tag",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 3247,
											"end": 3270,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3240,
											"end": 3270,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3240,
											"end": 3270,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3015,
											"end": 3287,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "tag",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 5992,
											"end": 5996,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6082,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5992,
											"end": 5996,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5992,
											"end": 5996,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6046,
											"end": 6112,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 6046,
											"end": 6112,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "151"
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6101,
											"end": 6111,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6101,
											"end": 6111,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "tag",
											"source": 12,
											"value": "151"
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6046,
											"end": 6054,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 6046,
											"end": 6112,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2233,
											"end": 2397,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2309,
											"end": 2319,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 3513,
											"end": 3520,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3548,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2324,
											"end": 2331,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 2299,
											"end": 2331,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7518,
											"end": 7520,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7500,
											"end": 7521,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7557,
											"end": 7559,
											"name": "PUSH",
											"source": 18,
											"value": "12"
										},
										{
											"begin": 7537,
											"end": 7555,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7537,
											"end": 7555,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7537,
											"end": 7555,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7530,
											"end": 7560,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E6F7420656E6F7567682062616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7576,
											"end": 7594,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 7576,
											"end": 7594,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7576,
											"end": 7594,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7569,
											"end": 7617,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7634,
											"end": 7652,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 7634,
											"end": 7652,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 7316,
											"end": 7658,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 2291,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2364,
											"end": 2390,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2370,
											"end": 2380,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 2382,
											"end": 2389,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2364,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 2364,
											"end": 2390,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1880,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1880,
											"end": 1888,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1880,
											"end": 1890,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1880,
											"end": 1890,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1880,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7865,
											"end": 7867,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7847,
											"end": 7868,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7904,
											"end": 7906,
											"name": "PUSH",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 7884,
											"end": 7902,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7884,
											"end": 7902,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7884,
											"end": 7902,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7877,
											"end": 7907,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7943,
											"end": 7968,
											"name": "PUSH",
											"source": 18,
											"value": "4E6F7420617574686F72697A656420746F206D696E742E000000000000000000"
										},
										{
											"begin": 7923,
											"end": 7941,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 7923,
											"end": 7941,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7923,
											"end": 7941,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7916,
											"end": 7969,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7986,
											"end": 8004,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 7986,
											"end": 8004,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 7663,
											"end": 8010,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1872,
											"end": 1918,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1936,
											"end": 1948,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8217,
											"end": 8219,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8199,
											"end": 8220,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8256,
											"end": 8258,
											"name": "PUSH",
											"source": 18,
											"value": "14"
										},
										{
											"begin": 8236,
											"end": 8254,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 8236,
											"end": 8254,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8236,
											"end": 8254,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8229,
											"end": 8259,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "26B4B73A34B733903D32B937903A37B5B2B73997"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "61"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8275,
											"end": 8293,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 8275,
											"end": 8293,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8275,
											"end": 8293,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8268,
											"end": 8318,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8335,
											"end": 8353,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 8335,
											"end": 8353,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 8015,
											"end": 8359,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 1928,
											"end": 1973,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1984,
											"end": 2003,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1990,
											"end": 1993,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1995,
											"end": 2002,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1984,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1984,
											"end": 2003,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1984,
											"end": 2003,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1984,
											"end": 2003,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "tag",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 983,
											"end": 1171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1060,
											"end": 1080,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "177"
										},
										{
											"begin": 1060,
											"end": 1078,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 1060,
											"end": 1080,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1060,
											"end": 1080,
											"name": "tag",
											"source": 4,
											"value": "177"
										},
										{
											"begin": 1060,
											"end": 1080,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1055,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "179"
										},
										{
											"begin": 1055,
											"end": 1131,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1120,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1096,
											"end": 1120,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1096,
											"end": 1120,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1120,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6910,
											"end": 6912,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1096,
											"end": 1120,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1096,
											"end": 1120,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1096,
											"end": 1120,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6892,
											"end": 6913,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6949,
											"end": 6951,
											"name": "PUSH",
											"source": 18,
											"value": "E"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6922,
											"end": 6952,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "139BDD08185D5D1A1BDC9A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6968,
											"end": 6986,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 6968,
											"end": 6986,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6968,
											"end": 6986,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6961,
											"end": 7005,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7022,
											"end": 7040,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 7022,
											"end": 7040,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1096,
											"end": 1120,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 6708,
											"end": 7046,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1055,
											"end": 1131,
											"name": "tag",
											"source": 4,
											"value": "179"
										},
										{
											"begin": 1055,
											"end": 1131,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1141,
											"end": 1164,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 1159,
											"end": 1163,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1141,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 1141,
											"end": 1164,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "tag",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2454,
											"end": 2467,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2486,
											"end": 2493,
											"name": "PUSH",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "115"
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "tag",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 6720,
											"end": 6724,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6812,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6720,
											"end": 6724,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6720,
											"end": 6724,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6846,
											"end": 6881,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6846,
											"end": 6881,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6846,
											"end": 6881,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6846,
											"end": 6881,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "191"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8566,
											"end": 8568,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8548,
											"end": 8569,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8605,
											"end": 8607,
											"name": "PUSH",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 8585,
											"end": 8603,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 8585,
											"end": 8603,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8585,
											"end": 8603,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8578,
											"end": 8608,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8644,
											"end": 8678,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 8624,
											"end": 8642,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 8624,
											"end": 8642,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8624,
											"end": 8642,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8617,
											"end": 8679,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8695,
											"end": 8713,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 8695,
											"end": 8713,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8695,
											"end": 8713,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8688,
											"end": 8723,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8740,
											"end": 8759,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 8740,
											"end": 8759,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 8364,
											"end": 8765,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "tag",
											"source": 12,
											"value": "191"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6957,
											"end": 7017,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 6966,
											"end": 6971,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6973,
											"end": 6980,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7001,
											"end": 7016,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6982,
											"end": 6998,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6982,
											"end": 7016,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6957,
											"end": 6965,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 6957,
											"end": 7017,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6957,
											"end": 7017,
											"name": "tag",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 6957,
											"end": 7017,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7045,
											"end": 7049,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 7045,
											"end": 7049,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "tag",
											"source": 12,
											"value": "94"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3839,
											"end": 3843,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 3893,
											"end": 3921,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3910,
											"end": 3912,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3914,
											"end": 3920,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3893,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "140"
										},
										{
											"begin": 3893,
											"end": 3921,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 755,
											"end": 777,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 811,
											"end": 815,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "200"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "200"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "201"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "tag",
											"source": 5,
											"value": "200"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "202"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "tag",
											"source": 5,
											"value": "203"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "203"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "tag",
											"source": 5,
											"value": "202"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 789,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 789,
											"end": 823,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 838,
											"end": 847,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "tag",
											"source": 5,
											"value": "204"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 853,
											"end": 868,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 853,
											"end": 868,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 853,
											"end": 868,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "205"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "207"
										},
										{
											"begin": 941,
											"end": 945,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 948,
											"end": 952,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 948,
											"end": 952,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 953,
											"end": 954,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "209"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "209"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "210"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "tag",
											"source": 5,
											"value": "209"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "211"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "212"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "tag",
											"source": 5,
											"value": "211"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "CALLDATACOPY",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 902,
											"end": 932,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "213"
										},
										{
											"begin": 902,
											"end": 932,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 902,
											"end": 956,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "tag",
											"source": 5,
											"value": "207"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 889,
											"end": 896,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 897,
											"end": 898,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "210"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "tag",
											"source": 5,
											"value": "215"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 889,
											"end": 956,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 889,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 889,
											"end": 956,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 889,
											"end": 956,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 870,
											"end": 873,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "217"
										},
										{
											"begin": 870,
											"end": 873,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 870,
											"end": 873,
											"name": "tag",
											"source": 5,
											"value": "216"
										},
										{
											"begin": 870,
											"end": 873,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "204"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "tag",
											"source": 5,
											"value": "205"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "tag",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2288,
											"end": 2296,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2269,
											"end": 2284,
											"name": "TIMESTAMP",
											"source": 13
										},
										{
											"begin": 2269,
											"end": 2296,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2269,
											"end": 2296,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "219"
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9770,
											"end": 9772,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9752,
											"end": 9773,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 9809,
											"end": 9811,
											"name": "PUSH",
											"source": 18,
											"value": "1D"
										},
										{
											"begin": 9789,
											"end": 9807,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 9789,
											"end": 9807,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 9789,
											"end": 9807,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9782,
											"end": 9812,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 9848,
											"end": 9879,
											"name": "PUSH",
											"source": 18,
											"value": "45524332305065726D69743A206578706972656420646561646C696E65000000"
										},
										{
											"begin": 9828,
											"end": 9846,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 9828,
											"end": 9846,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 9828,
											"end": 9846,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9821,
											"end": 9880,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 9897,
											"end": 9915,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 9897,
											"end": 9915,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "130"
										},
										{
											"begin": 9568,
											"end": 9921,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "tag",
											"source": 13,
											"value": "219"
										},
										{
											"begin": 2261,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2341,
											"end": 2359,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2399,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "1625"
										},
										{
											"begin": 2401,
											"end": 2406,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 2408,
											"end": 2415,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 2417,
											"end": 2422,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 2424,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 2434,
											"end": 2439,
											"name": "DUP13",
											"source": 13
										},
										{
											"begin": 2424,
											"end": 2433,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "223"
										},
										{
											"begin": 2424,
											"end": 2440,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2424,
											"end": 2440,
											"name": "tag",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 2424,
											"end": 2440,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10213,
											"end": 10238,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 10213,
											"end": 10238,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 10213,
											"end": 10238,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 10213,
											"end": 10238,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10312,
											"end": 10327,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 10312,
											"end": 10327,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 10312,
											"end": 10327,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 10292,
											"end": 10310,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 10292,
											"end": 10310,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 10292,
											"end": 10310,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10285,
											"end": 10328,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10364,
											"end": 10379,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 10364,
											"end": 10379,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 10364,
											"end": 10379,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 10364,
											"end": 10379,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 10344,
											"end": 10362,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 10344,
											"end": 10362,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 10344,
											"end": 10362,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10337,
											"end": 10380,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10396,
											"end": 10414,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 10396,
											"end": 10414,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 10396,
											"end": 10414,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10389,
											"end": 10423,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10439,
											"end": 10458,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 10439,
											"end": 10458,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10439,
											"end": 10458,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10432,
											"end": 10467,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10483,
											"end": 10502,
											"name": "PUSH",
											"source": 18,
											"value": "C0"
										},
										{
											"begin": 10483,
											"end": 10502,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 10483,
											"end": 10502,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10476,
											"end": 10511,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 10476,
											"end": 10511,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 10476,
											"end": 10511,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10185,
											"end": 10204,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 10185,
											"end": 10204,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2372,
											"end": 2451,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2362,
											"end": 2452,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2362,
											"end": 2452,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2362,
											"end": 2452,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2362,
											"end": 2452,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2362,
											"end": 2452,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2362,
											"end": 2452,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 2341,
											"end": 2452,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2341,
											"end": 2452,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2463,
											"end": 2475,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2478,
											"end": 2531,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "226"
										},
										{
											"begin": 2500,
											"end": 2518,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "227"
										},
										{
											"begin": 2500,
											"end": 2516,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 2500,
											"end": 2518,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2500,
											"end": 2518,
											"name": "tag",
											"source": 13,
											"value": "227"
										},
										{
											"begin": 2500,
											"end": 2518,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2520,
											"end": 2530,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8686,
											"end": 8690,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8680,
											"end": 8691,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8704,
											"end": 8727,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8704,
											"end": 8727,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8756,
											"end": 8760,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 8747,
											"end": 8761,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8747,
											"end": 8761,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8740,
											"end": 8779,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 8740,
											"end": 8779,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8740,
											"end": 8779,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 8740,
											"end": 8779,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8808,
											"end": 8812,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 8799,
											"end": 8813,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8799,
											"end": 8813,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8792,
											"end": 8826,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8862,
											"end": 8866,
											"name": "PUSH",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 8847,
											"end": 8867,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8847,
											"end": 8867,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 8847,
											"end": 8867,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 8486,
											"end": 8883,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2478,
											"end": 2531,
											"name": "tag",
											"source": 13,
											"value": "226"
										},
										{
											"begin": 2478,
											"end": 2531,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2463,
											"end": 2531,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2463,
											"end": 2531,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2542,
											"end": 2556,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2559,
											"end": 2587,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "229"
										},
										{
											"begin": 2573,
											"end": 2577,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2579,
											"end": 2580,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 2582,
											"end": 2583,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 2585,
											"end": 2586,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 2559,
											"end": 2572,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "230"
										},
										{
											"begin": 2559,
											"end": 2587,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2559,
											"end": 2587,
											"name": "tag",
											"source": 13,
											"value": "229"
										},
										{
											"begin": 2559,
											"end": 2587,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2542,
											"end": 2587,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2542,
											"end": 2587,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2615,
											"end": 2620,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2605,
											"end": 2620,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2605,
											"end": 2611,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2605,
											"end": 2620,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2605,
											"end": 2620,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "231"
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10724,
											"end": 10726,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10706,
											"end": 10727,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10763,
											"end": 10765,
											"name": "PUSH",
											"source": 18,
											"value": "1E"
										},
										{
											"begin": 10743,
											"end": 10761,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 10743,
											"end": 10761,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10743,
											"end": 10761,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10736,
											"end": 10766,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10802,
											"end": 10834,
											"name": "PUSH",
											"source": 18,
											"value": "45524332305065726D69743A20696E76616C6964207369676E61747572650000"
										},
										{
											"begin": 10782,
											"end": 10800,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 10782,
											"end": 10800,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 10782,
											"end": 10800,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10775,
											"end": 10835,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10852,
											"end": 10870,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 10852,
											"end": 10870,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "130"
										},
										{
											"begin": 10522,
											"end": 10876,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "tag",
											"source": 13,
											"value": "231"
										},
										{
											"begin": 2597,
											"end": 2655,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2666,
											"end": 2697,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "234"
										},
										{
											"begin": 2675,
											"end": 2680,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 2682,
											"end": 2689,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 2691,
											"end": 2696,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 2666,
											"end": 2674,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "125"
										},
										{
											"begin": 2666,
											"end": 2697,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2666,
											"end": 2697,
											"name": "tag",
											"source": 13,
											"value": "234"
										},
										{
											"begin": 2666,
											"end": 2697,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2251,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2251,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2251,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2704,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "tag",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "tag",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "tag",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "tag",
											"source": 4,
											"value": "240"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "240"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "tag",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 545,
											"end": 579,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "tag",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10285,
											"end": 10304,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10285,
											"end": 10304,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11083,
											"end": 11085,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11065,
											"end": 11086,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11122,
											"end": 11124,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 11102,
											"end": 11120,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 11102,
											"end": 11120,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11102,
											"end": 11120,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11095,
											"end": 11125,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11161,
											"end": 11195,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 11141,
											"end": 11159,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 11141,
											"end": 11159,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11141,
											"end": 11159,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11134,
											"end": 11196,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11212,
											"end": 11230,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 11212,
											"end": 11230,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11212,
											"end": 11230,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11205,
											"end": 11239,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11256,
											"end": 11275,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 11256,
											"end": 11275,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 10881,
											"end": 11281,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "tag",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10363,
											"end": 10384,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10363,
											"end": 10384,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11488,
											"end": 11490,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11470,
											"end": 11491,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11527,
											"end": 11529,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 11507,
											"end": 11525,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 11507,
											"end": 11525,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11507,
											"end": 11525,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11500,
											"end": 11530,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11566,
											"end": 11600,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 11546,
											"end": 11564,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 11546,
											"end": 11564,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11546,
											"end": 11564,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11539,
											"end": 11601,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11617,
											"end": 11635,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 11617,
											"end": 11635,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11617,
											"end": 11635,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11610,
											"end": 11642,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11659,
											"end": 11678,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 11659,
											"end": 11678,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 11286,
											"end": 11684,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "tag",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10445,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10470,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10470,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10470,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "PUSH",
											"source": 12,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "tag",
											"source": 12,
											"value": "249"
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3085,
											"end": 3200,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 3085,
											"end": 3200,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3149,
											"end": 3153,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3186,
											"end": 3193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 924,
											"end": 930,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 924,
											"end": 930,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 924,
											"end": 930,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 924,
											"end": 930,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 851,
											"end": 937,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3186,
											"end": 3193,
											"name": "tag",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 3186,
											"end": 3193,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3172,
											"end": 3193,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3172,
											"end": 3182,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3172,
											"end": 3193,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3172,
											"end": 3193,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3165,
											"end": 3193,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3165,
											"end": 3193,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3085,
											"end": 3200,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3085,
											"end": 3200,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1401,
											"end": 1573,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 1401,
											"end": 1573,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1481,
											"end": 1487,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1481,
											"end": 1487,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1481,
											"end": 1487,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1566,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1531,
											"end": 1566,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1481,
											"end": 1487,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1481,
											"end": 1487,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1481,
											"end": 1487,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1481,
											"end": 1487,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1481,
											"end": 1487,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1566,
											"name": "PUSH",
											"source": 6,
											"value": "8292FCE18FA69EDF4DB7B94EA2E58241DF0AE57F97E0A6C9B29067028BF92D76"
										},
										{
											"begin": 1531,
											"end": 1566,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1460,
											"end": 1478,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1460,
											"end": 1478,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1531,
											"end": 1566,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 1450,
											"end": 1573,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1401,
											"end": 1573,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1401,
											"end": 1573,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "tag",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10931,
											"end": 10955,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4133,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10997,
											"end": 11034,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10997,
											"end": 11034,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 10993,
											"end": 11236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 10993,
											"end": 11236,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11078,
											"end": 11084,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11058,
											"end": 11074,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11058,
											"end": 11084,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 11058,
											"end": 11084,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11891,
											"end": 11893,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11873,
											"end": 11894,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11930,
											"end": 11932,
											"name": "PUSH",
											"source": 18,
											"value": "1D"
										},
										{
											"begin": 11910,
											"end": 11928,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 11910,
											"end": 11928,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11910,
											"end": 11928,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11903,
											"end": 11933,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 11969,
											"end": 12000,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 11949,
											"end": 11967,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 11949,
											"end": 11967,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 11949,
											"end": 11967,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11942,
											"end": 12001,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12018,
											"end": 12036,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 12018,
											"end": 12036,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 11689,
											"end": 12042,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "tag",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11211,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 11169,
											"end": 11174,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11176,
											"end": 11183,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11204,
											"end": 11210,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11185,
											"end": 11201,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11185,
											"end": 11210,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11168,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 11160,
											"end": 11211,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11160,
											"end": 11211,
											"name": "tag",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 11160,
											"end": 11211,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10921,
											"end": 11242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7519,
											"end": 8170,
											"name": "tag",
											"source": 12,
											"value": "140"
										},
										{
											"begin": 7519,
											"end": 8170,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7645,
											"end": 7663,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7645,
											"end": 7663,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12249,
											"end": 12251,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12231,
											"end": 12252,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12288,
											"end": 12290,
											"name": "PUSH",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 12268,
											"end": 12286,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 12268,
											"end": 12286,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12268,
											"end": 12286,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 12261,
											"end": 12291,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12327,
											"end": 12361,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 12307,
											"end": 12325,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 12307,
											"end": 12325,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12307,
											"end": 12325,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 12300,
											"end": 12362,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12378,
											"end": 12396,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 12378,
											"end": 12396,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12378,
											"end": 12396,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 12371,
											"end": 12406,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12423,
											"end": 12442,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 12423,
											"end": 12442,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 12047,
											"end": 12448,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "tag",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7723,
											"end": 7739,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7723,
											"end": 7739,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12655,
											"end": 12657,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12637,
											"end": 12658,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12694,
											"end": 12696,
											"name": "PUSH",
											"source": 18,
											"value": "23"
										},
										{
											"begin": 12674,
											"end": 12692,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 12674,
											"end": 12692,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12674,
											"end": 12692,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 12667,
											"end": 12697,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12733,
											"end": 12767,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 12713,
											"end": 12731,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 12713,
											"end": 12731,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12713,
											"end": 12731,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 12706,
											"end": 12768,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12784,
											"end": 12802,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 12784,
											"end": 12802,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 12784,
											"end": 12802,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 12777,
											"end": 12810,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 12827,
											"end": 12846,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 12827,
											"end": 12846,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 12453,
											"end": 12852,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "tag",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7839,
											"end": 7858,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7870,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 7915,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 7915,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 7915,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 7915,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13059,
											"end": 13061,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13041,
											"end": 13062,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13098,
											"end": 13100,
											"name": "PUSH",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 13078,
											"end": 13096,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 13078,
											"end": 13096,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13078,
											"end": 13096,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13071,
											"end": 13101,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13137,
											"end": 13171,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 13117,
											"end": 13135,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 13117,
											"end": 13135,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13117,
											"end": 13135,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13110,
											"end": 13172,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13188,
											"end": 13206,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 13188,
											"end": 13206,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13188,
											"end": 13206,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13181,
											"end": 13217,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13234,
											"end": 13253,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 13234,
											"end": 13253,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 12857,
											"end": 13259,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "tag",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8001,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8010,
											"end": 8030,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8010,
											"end": 8030,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8010,
											"end": 8030,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8030,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8030,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "tag",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8104,
											"end": 8106,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8098,
											"end": 8102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8108,
											"end": 8114,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1585,
											"end": 1762,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "tag",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 8126,
											"end": 8163,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 9155,
											"end": 9731,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3293,
											"end": 3731,
											"name": "tag",
											"source": 13,
											"value": "147"
										},
										{
											"begin": 3293,
											"end": 3731,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3348,
											"end": 3355,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3445,
											"end": 3540,
											"name": "PUSH",
											"source": 13,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 3578,
											"end": 3584,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "277"
										},
										{
											"begin": 3578,
											"end": 3582,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 3578,
											"end": 3584,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3578,
											"end": 3584,
											"name": "tag",
											"source": 13,
											"value": "277"
										},
										{
											"begin": 3578,
											"end": 3584,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3562,
											"end": 3586,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3562,
											"end": 3586,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3562,
											"end": 3586,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3562,
											"end": 3586,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3562,
											"end": 3586,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3562,
											"end": 3586,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3562,
											"end": 3586,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13523,
											"end": 13548,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 13523,
											"end": 13548,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 13523,
											"end": 13548,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 13523,
											"end": 13548,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13564,
											"end": 13582,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 13564,
											"end": 13582,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 13564,
											"end": 13582,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13557,
											"end": 13591,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 13557,
											"end": 13591,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 13557,
											"end": 13591,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 13557,
											"end": 13591,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3608,
											"end": 3622,
											"name": "PUSH",
											"source": 13,
											"value": "C89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6"
										},
										{
											"begin": 13607,
											"end": 13625,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 13607,
											"end": 13625,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13607,
											"end": 13625,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13600,
											"end": 13634,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3644,
											"end": 3657,
											"name": "CHAINID",
											"source": 13
										},
										{
											"begin": 13650,
											"end": 13668,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 13650,
											"end": 13668,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13650,
											"end": 13668,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13643,
											"end": 13677,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3687,
											"end": 3691,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 13693,
											"end": 13712,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 13693,
											"end": 13712,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13693,
											"end": 13712,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13686,
											"end": 13747,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13495,
											"end": 13514,
											"name": "PUSH",
											"source": 18,
											"value": "C0"
										},
										{
											"begin": 13495,
											"end": 13514,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3413,
											"end": 3710,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3386,
											"end": 3724,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3386,
											"end": 3724,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3386,
											"end": 3724,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3386,
											"end": 3724,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3386,
											"end": 3724,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3386,
											"end": 3724,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3367,
											"end": 3724,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3367,
											"end": 3724,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3293,
											"end": 3731,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3293,
											"end": 3731,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 9155,
											"end": 9731,
											"name": "tag",
											"source": 12,
											"value": "159"
										},
										{
											"begin": 9155,
											"end": 9731,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9238,
											"end": 9259,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9238,
											"end": 9259,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13960,
											"end": 13962,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13942,
											"end": 13963,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 13999,
											"end": 14001,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 13979,
											"end": 13997,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 13979,
											"end": 13997,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 13979,
											"end": 13997,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 13972,
											"end": 14002,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14038,
											"end": 14072,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 14018,
											"end": 14036,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 14018,
											"end": 14036,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14018,
											"end": 14036,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 14011,
											"end": 14073,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14089,
											"end": 14107,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 14089,
											"end": 14107,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14089,
											"end": 14107,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 14082,
											"end": 14113,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14130,
											"end": 14149,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 14130,
											"end": 14149,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 13758,
											"end": 14155,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "tag",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 9230,
											"end": 9297,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9368,
											"end": 9390,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9393,
											"end": 9402,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 9429,
											"end": 9453,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9429,
											"end": 9453,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9429,
											"end": 9453,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 9429,
											"end": 9453,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "285"
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14362,
											"end": 14364,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14344,
											"end": 14365,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14401,
											"end": 14403,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 14381,
											"end": 14399,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 14381,
											"end": 14399,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14381,
											"end": 14399,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 14374,
											"end": 14404,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14440,
											"end": 14474,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
										},
										{
											"begin": 14420,
											"end": 14438,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 14420,
											"end": 14438,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14420,
											"end": 14438,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 14413,
											"end": 14475,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14491,
											"end": 14509,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 14491,
											"end": 14509,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14491,
											"end": 14509,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 14484,
											"end": 14516,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14533,
											"end": 14552,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 14533,
											"end": 14552,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 14160,
											"end": 14558,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "tag",
											"source": 12,
											"value": "285"
										},
										{
											"begin": 9421,
											"end": 9492,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9535,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 9547,
											"end": 9570,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9547,
											"end": 9570,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9547,
											"end": 9570,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9570,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9570,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 9590,
											"end": 9602,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 9564,
											"end": 9570,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9564,
											"end": 9570,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9526,
											"end": 9544,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9564,
											"end": 9570,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9564,
											"end": 9570,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "tag",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9590,
											"end": 9612,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9628,
											"end": 9665,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9628,
											"end": 9665,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 9654,
											"end": 9655,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9654,
											"end": 9655,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9628,
											"end": 9665,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9628,
											"end": 9665,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9628,
											"end": 9665,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9628,
											"end": 9665,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9628,
											"end": 9665,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9628,
											"end": 9665,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "249"
										},
										{
											"begin": 1585,
											"end": 1762,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8446,
											"end": 8835,
											"name": "tag",
											"source": 12,
											"value": "170"
										},
										{
											"begin": 8446,
											"end": 8835,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8529,
											"end": 8550,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8529,
											"end": 8550,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "295"
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14895,
											"end": 14897,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14877,
											"end": 14898,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14934,
											"end": 14936,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 14914,
											"end": 14932,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 14914,
											"end": 14932,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14914,
											"end": 14932,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 14907,
											"end": 14937,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14973,
											"end": 15006,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 14946,
											"end": 15007,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 15024,
											"end": 15042,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 15024,
											"end": 15042,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 14693,
											"end": 15048,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "tag",
											"source": 12,
											"value": "295"
										},
										{
											"begin": 8521,
											"end": 8586,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8673,
											"end": 8679,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8669,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8657,
											"end": 8669,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "299"
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "tag",
											"source": 12,
											"value": "299"
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8657,
											"end": 8679,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8698,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8711,
											"end": 8717,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8711,
											"end": 8717,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8707,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "300"
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8711,
											"end": 8717,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8711,
											"end": 8717,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "tag",
											"source": 12,
											"value": "300"
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8689,
											"end": 8717,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1731,
											"end": 1756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8749,
											"end": 8750,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8749,
											"end": 8750,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1719,
											"end": 1721,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1722,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8732,
											"end": 8769,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1801,
											"end": 2010,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1253,
											"end": 1438,
											"name": "tag",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 1253,
											"end": 1438,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1340,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1343,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "307"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "tag",
											"source": 4,
											"value": "307"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "308"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "tag",
											"source": 4,
											"value": "308"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "309"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "310"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "309"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "tag",
											"source": 4,
											"value": "310"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "tag",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "tag",
											"source": 4,
											"value": "309"
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1319,
											"end": 1354,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "312"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1364,
											"end": 1375,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1364,
											"end": 1375,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "313"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "tag",
											"source": 4,
											"value": "312"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "PUSH",
											"source": 4,
											"value": "C9C7C3FE08B88B4DF9D4D47EF47D2C43D55C025A0BA88CA442580ED9E7348A16"
										},
										{
											"begin": 1417,
											"end": 1424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1426,
											"end": 1430,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "314"
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "tag",
											"source": 4,
											"value": "314"
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1398,
											"end": 1431,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 1309,
											"end": 1438,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1253,
											"end": 1438,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1253,
											"end": 1438,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 6518,
											"end": 6716,
											"name": "tag",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 6518,
											"end": 6716,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6601,
											"end": 6613,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 6653,
											"end": 6659,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6661,
											"end": 6665,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH data",
											"source": 10,
											"value": "9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "CODECOPY",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6652,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3862,
											"end": 4065,
											"name": "tag",
											"source": 13,
											"value": "223"
										},
										{
											"begin": 3862,
											"end": 4065,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3922,
											"end": 3937,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3982,
											"end": 3989,
											"name": "PUSH",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3982,
											"end": 3996,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 918,
											"end": 932,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 918,
											"end": 932,
											"name": "SLOAD",
											"source": 15
										},
										{
											"begin": 1050,
											"end": 1051,
											"name": "PUSH",
											"source": 15,
											"value": "1"
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SSTORE",
											"source": 15
										},
										{
											"begin": 918,
											"end": 932,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4041,
											"end": 4058,
											"name": "tag",
											"source": 13,
											"value": "321"
										},
										{
											"begin": 4041,
											"end": 4058,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3939,
											"end": 4065,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3862,
											"end": 4065,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3862,
											"end": 4065,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3862,
											"end": 4065,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3862,
											"end": 4065,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 6708,
											"end": 6978,
											"name": "tag",
											"source": 16,
											"value": "230"
										},
										{
											"begin": 6708,
											"end": 6978,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6831,
											"end": 6838,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6851,
											"end": 6868,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6870,
											"end": 6888,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6892,
											"end": 6917,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "325"
										},
										{
											"begin": 6903,
											"end": 6907,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 6909,
											"end": 6910,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 6912,
											"end": 6913,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 6915,
											"end": 6916,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 6892,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "326"
										},
										{
											"begin": 6892,
											"end": 6917,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 6892,
											"end": 6917,
											"name": "tag",
											"source": 16,
											"value": "325"
										},
										{
											"begin": 6892,
											"end": 6917,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6850,
											"end": 6917,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 6850,
											"end": 6917,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6850,
											"end": 6917,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 6850,
											"end": 6917,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "327"
										},
										{
											"begin": 6939,
											"end": 6944,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6927,
											"end": 6938,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "328"
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "tag",
											"source": 16,
											"value": "327"
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6962,
											"end": 6971,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 6708,
											"end": 6978,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6708,
											"end": 6978,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 6902,
											"end": 7289,
											"name": "tag",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 6902,
											"end": 7289,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7043,
											"end": 7055,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1407,
											"end": 1426,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1407,
											"end": 1426,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1407,
											"end": 1426,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15643,
											"end": 15645,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 15625,
											"end": 15646,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 15682,
											"end": 15684,
											"name": "PUSH",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 15662,
											"end": 15680,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 15662,
											"end": 15680,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 15662,
											"end": 15680,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 15655,
											"end": 15685,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 15721,
											"end": 15755,
											"name": "PUSH",
											"source": 18,
											"value": "416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F"
										},
										{
											"begin": 15701,
											"end": 15719,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 15701,
											"end": 15719,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 15701,
											"end": 15719,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 15694,
											"end": 15756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15772,
											"end": 15790,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 15772,
											"end": 15790,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 15772,
											"end": 15790,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 15765,
											"end": 15801,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 15818,
											"end": 15837,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 15818,
											"end": 15837,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 15441,
											"end": 15843,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "tag",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7148,
											"end": 7160,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7162,
											"end": 7185,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7195,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7189,
											"end": 7208,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7209,
											"end": 7213,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "338"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "tag",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DELEGATECALL",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "3F"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "tag",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "tag",
											"source": 10,
											"value": "340"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7147,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7147,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7147,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7147,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7231,
											"end": 7282,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "342"
										},
										{
											"begin": 7248,
											"end": 7255,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7257,
											"end": 7267,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7269,
											"end": 7281,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 7231,
											"end": 7247,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 7231,
											"end": 7282,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7231,
											"end": 7282,
											"name": "tag",
											"source": 10,
											"value": "342"
										},
										{
											"begin": 7231,
											"end": 7282,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7224,
											"end": 7282,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 6902,
											"end": 7289,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6902,
											"end": 7289,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "tag",
											"source": 16,
											"value": "326"
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5207,
											"end": 5214,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5207,
											"end": 5214,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6131,
											"end": 6197,
											"name": "PUSH",
											"source": 16,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6118,
											"end": 6197,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6118,
											"end": 6197,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 6114,
											"end": 6275,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6114,
											"end": 6275,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "346"
										},
										{
											"begin": 6114,
											"end": 6275,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6229,
											"end": 6230,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6229,
											"end": 6230,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6233,
											"end": 6263,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 6213,
											"end": 6264,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "345"
										},
										{
											"begin": 6213,
											"end": 6264,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6114,
											"end": 6275,
											"name": "tag",
											"source": 16,
											"value": "346"
										},
										{
											"begin": 6114,
											"end": 6275,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6369,
											"end": 6383,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16354,
											"end": 16379,
											"name": "DUP10",
											"source": 18
										},
										{
											"begin": 16354,
											"end": 16379,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 16354,
											"end": 16379,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 16427,
											"end": 16431,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 16415,
											"end": 16432,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 16415,
											"end": 16432,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 16395,
											"end": 16413,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 16395,
											"end": 16413,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 16395,
											"end": 16413,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 16388,
											"end": 16433,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 16388,
											"end": 16433,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 16388,
											"end": 16433,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 16388,
											"end": 16433,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 16449,
											"end": 16467,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 16449,
											"end": 16467,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 16449,
											"end": 16467,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 16442,
											"end": 16476,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 16442,
											"end": 16476,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 16442,
											"end": 16476,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 16492,
											"end": 16510,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 16492,
											"end": 16510,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 16492,
											"end": 16510,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 16485,
											"end": 16519,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 16485,
											"end": 16519,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 16485,
											"end": 16519,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 16326,
											"end": 16345,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 16326,
											"end": 16345,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "STATICCALL",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "350"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "tag",
											"source": 16,
											"value": "350"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6386,
											"end": 6410,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6424,
											"end": 6444,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6424,
											"end": 6444,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6420,
											"end": 6521,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "351"
										},
										{
											"begin": 6420,
											"end": 6521,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6476,
											"end": 6477,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6480,
											"end": 6509,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 6460,
											"end": 6510,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6460,
											"end": 6510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6460,
											"end": 6510,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6460,
											"end": 6510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6460,
											"end": 6510,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6460,
											"end": 6510,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "345"
										},
										{
											"begin": 6460,
											"end": 6510,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6420,
											"end": 6521,
											"name": "tag",
											"source": 16,
											"value": "351"
										},
										{
											"begin": 6420,
											"end": 6521,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6539,
											"end": 6545,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6547,
											"end": 6567,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6547,
											"end": 6567,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "tag",
											"source": 16,
											"value": "345"
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5081,
											"end": 6575,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 582,
											"end": 1093,
											"name": "tag",
											"source": 16,
											"value": "328"
										},
										{
											"begin": 582,
											"end": 1093,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 659,
											"end": 679,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 650,
											"end": 655,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 650,
											"end": 679,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 650,
											"end": 679,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 650,
											"end": 679,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 650,
											"end": 679,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 650,
											"end": 679,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "357"
										},
										{
											"begin": 650,
											"end": 679,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 650,
											"end": 679,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "357"
										},
										{
											"begin": 650,
											"end": 679,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "355"
										},
										{
											"begin": 650,
											"end": 679,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 650,
											"end": 679,
											"name": "tag",
											"source": 16,
											"value": "357"
										},
										{
											"begin": 650,
											"end": 679,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 650,
											"end": 679,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 646,
											"end": 1087,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 646,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "358"
										},
										{
											"begin": 646,
											"end": 1087,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 582,
											"end": 1093,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 582,
											"end": 1093,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 646,
											"end": 1087,
											"name": "tag",
											"source": 16,
											"value": "358"
										},
										{
											"begin": 646,
											"end": 1087,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 755,
											"end": 784,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 746,
											"end": 751,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 746,
											"end": 784,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 746,
											"end": 784,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 746,
											"end": 784,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 746,
											"end": 784,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 746,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "363"
										},
										{
											"begin": 746,
											"end": 784,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 746,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "363"
										},
										{
											"begin": 746,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "355"
										},
										{
											"begin": 746,
											"end": 784,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 746,
											"end": 784,
											"name": "tag",
											"source": 16,
											"value": "363"
										},
										{
											"begin": 746,
											"end": 784,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 746,
											"end": 784,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 742,
											"end": 1087,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 742,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "364"
										},
										{
											"begin": 742,
											"end": 1087,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 800,
											"end": 834,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 800,
											"end": 834,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 800,
											"end": 834,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 800,
											"end": 834,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16864,
											"end": 16866,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 800,
											"end": 834,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 800,
											"end": 834,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 800,
											"end": 834,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16846,
											"end": 16867,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 16903,
											"end": 16905,
											"name": "PUSH",
											"source": 18,
											"value": "18"
										},
										{
											"begin": 16883,
											"end": 16901,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 16883,
											"end": 16901,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 16883,
											"end": 16901,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 16876,
											"end": 16906,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 16942,
											"end": 16968,
											"name": "PUSH",
											"source": 18,
											"value": "45434453413A20696E76616C6964207369676E61747572650000000000000000"
										},
										{
											"begin": 16922,
											"end": 16940,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 16922,
											"end": 16940,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 16922,
											"end": 16940,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 16915,
											"end": 16969,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 16986,
											"end": 17004,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 16986,
											"end": 17004,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 800,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "130"
										},
										{
											"begin": 16662,
											"end": 17010,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 742,
											"end": 1087,
											"name": "tag",
											"source": 16,
											"value": "364"
										},
										{
											"begin": 742,
											"end": 1087,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 864,
											"end": 899,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 855,
											"end": 860,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 855,
											"end": 899,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 855,
											"end": 899,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 855,
											"end": 899,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 855,
											"end": 899,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 855,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "371"
										},
										{
											"begin": 855,
											"end": 899,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 855,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "371"
										},
										{
											"begin": 855,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "355"
										},
										{
											"begin": 855,
											"end": 899,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 855,
											"end": 899,
											"name": "tag",
											"source": 16,
											"value": "371"
										},
										{
											"begin": 855,
											"end": 899,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 855,
											"end": 899,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 851,
											"end": 1087,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 851,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "372"
										},
										{
											"begin": 851,
											"end": 1087,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 915,
											"end": 956,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 915,
											"end": 956,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 915,
											"end": 956,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 915,
											"end": 956,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17217,
											"end": 17219,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 915,
											"end": 956,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 915,
											"end": 956,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 915,
											"end": 956,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17199,
											"end": 17220,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 17256,
											"end": 17258,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 17236,
											"end": 17254,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 17236,
											"end": 17254,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 17236,
											"end": 17254,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 17229,
											"end": 17259,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 17295,
											"end": 17328,
											"name": "PUSH",
											"source": 18,
											"value": "45434453413A20696E76616C6964207369676E6174757265206C656E67746800"
										},
										{
											"begin": 17275,
											"end": 17293,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 17275,
											"end": 17293,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 17275,
											"end": 17293,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 17268,
											"end": 17329,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 17346,
											"end": 17364,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 17346,
											"end": 17364,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 915,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "130"
										},
										{
											"begin": 17015,
											"end": 17370,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 851,
											"end": 1087,
											"name": "tag",
											"source": 16,
											"value": "372"
										},
										{
											"begin": 851,
											"end": 1087,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 986,
											"end": 1016,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 977,
											"end": 982,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "379"
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "379"
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "355"
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "tag",
											"source": 16,
											"value": "379"
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 977,
											"end": 1016,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 973,
											"end": 1087,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 973,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "132"
										},
										{
											"begin": 973,
											"end": 1087,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1032,
											"end": 1076,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1032,
											"end": 1076,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1032,
											"end": 1076,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1032,
											"end": 1076,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17577,
											"end": 17579,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1032,
											"end": 1076,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 1032,
											"end": 1076,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1032,
											"end": 1076,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17559,
											"end": 17580,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 17616,
											"end": 17618,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 17596,
											"end": 17614,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 17596,
											"end": 17614,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 17596,
											"end": 17614,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 17589,
											"end": 17619,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 17655,
											"end": 17689,
											"name": "PUSH",
											"source": 18,
											"value": "45434453413A20696E76616C6964207369676E6174757265202773272076616C"
										},
										{
											"begin": 17635,
											"end": 17653,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 17635,
											"end": 17653,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 17635,
											"end": 17653,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 17628,
											"end": 17690,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17706,
											"end": 17724,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 17706,
											"end": 17724,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 17706,
											"end": 17724,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 17699,
											"end": 17731,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 17748,
											"end": 17767,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 17748,
											"end": 17767,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1032,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "130"
										},
										{
											"begin": 17375,
											"end": 17773,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7509,
											"end": 8201,
											"name": "tag",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 7509,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7655,
											"end": 7667,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7683,
											"end": 7690,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "385"
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7713,
											"end": 7723,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7706,
											"end": 7723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 7706,
											"end": 7723,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "tag",
											"source": 10,
											"value": "385"
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7824,
											"end": 7841,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7824,
											"end": 7841,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7824,
											"end": 7845,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7820,
											"end": 8185,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "387"
										},
										{
											"begin": 7820,
											"end": 8185,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8018,
											"end": 8028,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8012,
											"end": 8029,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8078,
											"end": 8093,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8065,
											"end": 8075,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8063,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8057,
											"end": 8076,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8050,
											"end": 8094,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7820,
											"end": 8185,
											"name": "tag",
											"source": 10,
											"value": "387"
										},
										{
											"begin": 7820,
											"end": 8185,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8157,
											"end": 8169,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "313"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "390"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "116"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "390"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "392"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "395"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "392"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "393"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "395"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "393"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "395"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "394"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "395"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "394"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "395"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "396"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "397"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "396"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "397"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "398"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "396"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "398"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 272,
											"name": "tag",
											"source": 18,
											"value": "400"
										},
										{
											"begin": 14,
											"end": 272,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 86,
											"end": 87,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 96,
											"end": 209,
											"name": "tag",
											"source": 18,
											"value": "406"
										},
										{
											"begin": 96,
											"end": 209,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 110,
											"end": 116,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 107,
											"end": 108,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 104,
											"end": 117,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 96,
											"end": 209,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 96,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "408"
										},
										{
											"begin": 96,
											"end": 209,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 186,
											"end": 197,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 186,
											"end": 197,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 186,
											"end": 197,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 180,
											"end": 198,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 167,
											"end": 178,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 167,
											"end": 178,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 167,
											"end": 178,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 160,
											"end": 199,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 132,
											"end": 134,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 125,
											"end": 135,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 96,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "406"
										},
										{
											"begin": 96,
											"end": 209,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 96,
											"end": 209,
											"name": "tag",
											"source": 18,
											"value": "408"
										},
										{
											"begin": 96,
											"end": 209,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 227,
											"end": 233,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 224,
											"end": 225,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 221,
											"end": 234,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 218,
											"end": 266,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 218,
											"end": 266,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "259"
										},
										{
											"begin": 218,
											"end": 266,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 262,
											"end": 263,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 244,
											"end": 260,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 244,
											"end": 260,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 237,
											"end": 264,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 14,
											"end": 272,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 277,
											"end": 535,
											"name": "tag",
											"source": 18,
											"value": "401"
										},
										{
											"begin": 277,
											"end": 535,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 319,
											"end": 322,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 357,
											"end": 362,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 351,
											"end": 363,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 384,
											"end": 390,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 379,
											"end": 382,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 372,
											"end": 391,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 400,
											"end": 463,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "411"
										},
										{
											"begin": 456,
											"end": 462,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 449,
											"end": 453,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 444,
											"end": 447,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 440,
											"end": 454,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 433,
											"end": 437,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 426,
											"end": 431,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 422,
											"end": 438,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 400,
											"end": 463,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "400"
										},
										{
											"begin": 400,
											"end": 463,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 400,
											"end": 463,
											"name": "tag",
											"source": 18,
											"value": "411"
										},
										{
											"begin": 400,
											"end": 463,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 496,
											"end": 511,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 492,
											"end": 521,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 483,
											"end": 522,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 483,
											"end": 522,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 483,
											"end": 522,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 483,
											"end": 522,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 524,
											"end": 528,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 479,
											"end": 529,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 479,
											"end": 529,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 277,
											"end": 535,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 277,
											"end": 535,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 540,
											"end": 760,
											"name": "tag",
											"source": 18,
											"value": "30"
										},
										{
											"begin": 540,
											"end": 760,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 689,
											"end": 691,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 678,
											"end": 687,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 671,
											"end": 692,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 652,
											"end": 656,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 709,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "135"
										},
										{
											"begin": 750,
											"end": 752,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 739,
											"end": 748,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 735,
											"end": 753,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 727,
											"end": 733,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 709,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "401"
										},
										{
											"begin": 709,
											"end": 754,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 765,
											"end": 938,
											"name": "tag",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 765,
											"end": 938,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 833,
											"end": 853,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 833,
											"end": 853,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 882,
											"end": 913,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 882,
											"end": 913,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 872,
											"end": 914,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 872,
											"end": 914,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 862,
											"end": 932,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "415"
										},
										{
											"begin": 862,
											"end": 932,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 928,
											"end": 929,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 925,
											"end": 926,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 918,
											"end": 930,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 862,
											"end": 932,
											"name": "tag",
											"source": 18,
											"value": "415"
										},
										{
											"begin": 862,
											"end": 932,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 765,
											"end": 938,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 765,
											"end": 938,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 765,
											"end": 938,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 765,
											"end": 938,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 943,
											"end": 1197,
											"name": "tag",
											"source": 18,
											"value": "33"
										},
										{
											"begin": 943,
											"end": 1197,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1011,
											"end": 1017,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1019,
											"end": 1025,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1072,
											"end": 1074,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1060,
											"end": 1069,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1051,
											"end": 1058,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1047,
											"end": 1070,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1043,
											"end": 1075,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1040,
											"end": 1092,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1040,
											"end": 1092,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "417"
										},
										{
											"begin": 1040,
											"end": 1092,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1088,
											"end": 1089,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1085,
											"end": 1086,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1078,
											"end": 1090,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1040,
											"end": 1092,
											"name": "tag",
											"source": 18,
											"value": "417"
										},
										{
											"begin": 1040,
											"end": 1092,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1111,
											"end": 1140,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "418"
										},
										{
											"begin": 1130,
											"end": 1139,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1111,
											"end": 1140,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 1111,
											"end": 1140,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1111,
											"end": 1140,
											"name": "tag",
											"source": 18,
											"value": "418"
										},
										{
											"begin": 1111,
											"end": 1140,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1101,
											"end": 1140,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1189,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1172,
											"end": 1190,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1172,
											"end": 1190,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1172,
											"end": 1190,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1172,
											"end": 1190,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1159,
											"end": 1191,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1159,
											"end": 1191,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 943,
											"end": 1197,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1394,
											"end": 1580,
											"name": "tag",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 1394,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1453,
											"end": 1459,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1506,
											"end": 1508,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1494,
											"end": 1503,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1485,
											"end": 1492,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1481,
											"end": 1504,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1477,
											"end": 1509,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1474,
											"end": 1526,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1474,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "421"
										},
										{
											"begin": 1474,
											"end": 1526,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1522,
											"end": 1523,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1519,
											"end": 1520,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1512,
											"end": 1524,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1474,
											"end": 1526,
											"name": "tag",
											"source": 18,
											"value": "421"
										},
										{
											"begin": 1474,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1545,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "135"
										},
										{
											"begin": 1564,
											"end": 1573,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1545,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 1545,
											"end": 1574,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "tag",
											"source": 18,
											"value": "47"
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1844,
											"end": 1850,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1852,
											"end": 1858,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1860,
											"end": 1866,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1913,
											"end": 1915,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 1901,
											"end": 1910,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1892,
											"end": 1899,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1888,
											"end": 1911,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1884,
											"end": 1916,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "425"
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1929,
											"end": 1930,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1926,
											"end": 1927,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1919,
											"end": 1931,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "tag",
											"source": 18,
											"value": "425"
										},
										{
											"begin": 1881,
											"end": 1933,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "426"
										},
										{
											"begin": 1971,
											"end": 1980,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "tag",
											"source": 18,
											"value": "426"
										},
										{
											"begin": 1952,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1942,
											"end": 1981,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1942,
											"end": 1981,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "427"
										},
										{
											"begin": 2034,
											"end": 2036,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2023,
											"end": 2032,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 2019,
											"end": 2037,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "tag",
											"source": 18,
											"value": "427"
										},
										{
											"begin": 2000,
											"end": 2038,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1990,
											"end": 2038,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1990,
											"end": 2038,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2085,
											"end": 2087,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2083,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2070,
											"end": 2088,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2057,
											"end": 2089,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2047,
											"end": 2089,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2047,
											"end": 2089,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1767,
											"end": 2095,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2471,
											"end": 2651,
											"name": "tag",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 2471,
											"end": 2651,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2530,
											"end": 2536,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2583,
											"end": 2585,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2571,
											"end": 2580,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2562,
											"end": 2569,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2558,
											"end": 2581,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2554,
											"end": 2586,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2551,
											"end": 2603,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2551,
											"end": 2603,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "431"
										},
										{
											"begin": 2551,
											"end": 2603,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2599,
											"end": 2600,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2596,
											"end": 2597,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2589,
											"end": 2601,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2551,
											"end": 2603,
											"name": "tag",
											"source": 18,
											"value": "431"
										},
										{
											"begin": 2551,
											"end": 2603,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2622,
											"end": 2645,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2622,
											"end": 2645,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2471,
											"end": 2651,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2471,
											"end": 2651,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2864,
											"end": 2991,
											"name": "tag",
											"source": 18,
											"value": "201"
										},
										{
											"begin": 2864,
											"end": 2991,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2925,
											"end": 2935,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 2920,
											"end": 2923,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2916,
											"end": 2936,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2913,
											"end": 2914,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2906,
											"end": 2937,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2956,
											"end": 2960,
											"name": "PUSH",
											"source": 18,
											"value": "41"
										},
										{
											"begin": 2953,
											"end": 2954,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2946,
											"end": 2961,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2980,
											"end": 2984,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2977,
											"end": 2978,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2970,
											"end": 2985,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2996,
											"end": 3918,
											"name": "tag",
											"source": 18,
											"value": "83"
										},
										{
											"begin": 2996,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3065,
											"end": 3071,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3118,
											"end": 3120,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3106,
											"end": 3115,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3097,
											"end": 3104,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3093,
											"end": 3116,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 3089,
											"end": 3121,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 3086,
											"end": 3138,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3086,
											"end": 3138,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "435"
										},
										{
											"begin": 3086,
											"end": 3138,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3134,
											"end": 3135,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3131,
											"end": 3132,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3124,
											"end": 3136,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3086,
											"end": 3138,
											"name": "tag",
											"source": 18,
											"value": "435"
										},
										{
											"begin": 3086,
											"end": 3138,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3174,
											"end": 3183,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3161,
											"end": 3184,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 3203,
											"end": 3221,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3244,
											"end": 3246,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3236,
											"end": 3242,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3233,
											"end": 3247,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 3230,
											"end": 3264,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3230,
											"end": 3264,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "436"
										},
										{
											"begin": 3230,
											"end": 3264,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3260,
											"end": 3261,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3257,
											"end": 3258,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3250,
											"end": 3262,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3230,
											"end": 3264,
											"name": "tag",
											"source": 18,
											"value": "436"
										},
										{
											"begin": 3230,
											"end": 3264,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3298,
											"end": 3304,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3287,
											"end": 3296,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3283,
											"end": 3305,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3273,
											"end": 3305,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3273,
											"end": 3305,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3343,
											"end": 3350,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3336,
											"end": 3340,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 3332,
											"end": 3334,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3328,
											"end": 3341,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3324,
											"end": 3351,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 3314,
											"end": 3369,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "437"
										},
										{
											"begin": 3314,
											"end": 3369,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3365,
											"end": 3366,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3362,
											"end": 3363,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3355,
											"end": 3367,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3314,
											"end": 3369,
											"name": "tag",
											"source": 18,
											"value": "437"
										},
										{
											"begin": 3314,
											"end": 3369,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3401,
											"end": 3403,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3388,
											"end": 3404,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 3423,
											"end": 3425,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3419,
											"end": 3421,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3416,
											"end": 3426,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 3413,
											"end": 3449,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3413,
											"end": 3449,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "439"
										},
										{
											"begin": 3413,
											"end": 3449,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3429,
											"end": 3447,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "439"
										},
										{
											"begin": 3429,
											"end": 3447,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "201"
										},
										{
											"begin": 3429,
											"end": 3447,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3429,
											"end": 3447,
											"name": "tag",
											"source": 18,
											"value": "439"
										},
										{
											"begin": 3429,
											"end": 3447,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3504,
											"end": 3506,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 3498,
											"end": 3507,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 3472,
											"end": 3474,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 3558,
											"end": 3571,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3558,
											"end": 3571,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3554,
											"end": 3576,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3554,
											"end": 3576,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3554,
											"end": 3576,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3578,
											"end": 3580,
											"name": "PUSH",
											"source": 18,
											"value": "3F"
										},
										{
											"begin": 3550,
											"end": 3581,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3546,
											"end": 3586,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3534,
											"end": 3587,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3534,
											"end": 3587,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3534,
											"end": 3587,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3602,
											"end": 3620,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3602,
											"end": 3620,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3602,
											"end": 3620,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 3622,
											"end": 3644,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3622,
											"end": 3644,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3622,
											"end": 3644,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 3599,
											"end": 3645,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 3596,
											"end": 3668,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3596,
											"end": 3668,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "441"
										},
										{
											"begin": 3596,
											"end": 3668,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3648,
											"end": 3666,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "441"
										},
										{
											"begin": 3648,
											"end": 3666,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "201"
										},
										{
											"begin": 3648,
											"end": 3666,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3648,
											"end": 3666,
											"name": "tag",
											"source": 18,
											"value": "441"
										},
										{
											"begin": 3648,
											"end": 3666,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3688,
											"end": 3698,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3684,
											"end": 3686,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 3677,
											"end": 3699,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3723,
											"end": 3725,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3715,
											"end": 3721,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3708,
											"end": 3726,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3763,
											"end": 3770,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 3758,
											"end": 3760,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3753,
											"end": 3755,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3749,
											"end": 3751,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 3745,
											"end": 3756,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3741,
											"end": 3761,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3738,
											"end": 3771,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 3735,
											"end": 3788,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3735,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "442"
										},
										{
											"begin": 3735,
											"end": 3788,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3784,
											"end": 3785,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3781,
											"end": 3782,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3774,
											"end": 3786,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3735,
											"end": 3788,
											"name": "tag",
											"source": 18,
											"value": "442"
										},
										{
											"begin": 3735,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3840,
											"end": 3842,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3835,
											"end": 3837,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3831,
											"end": 3833,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 3827,
											"end": 3838,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3822,
											"end": 3824,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3814,
											"end": 3820,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3810,
											"end": 3825,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3797,
											"end": 3843,
											"name": "CALLDATACOPY",
											"source": 18
										},
										{
											"begin": 3885,
											"end": 3886,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3863,
											"end": 3878,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3863,
											"end": 3878,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3863,
											"end": 3878,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3880,
											"end": 3882,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3859,
											"end": 3883,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3852,
											"end": 3887,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3852,
											"end": 3887,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3852,
											"end": 3887,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3852,
											"end": 3887,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3867,
											"end": 3873,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 2996,
											"end": 3918,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2996,
											"end": 3918,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 3923,
											"end": 4549,
											"name": "tag",
											"source": 18,
											"value": "98"
										},
										{
											"begin": 3923,
											"end": 4549,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4020,
											"end": 4026,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4028,
											"end": 4034,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4081,
											"end": 4083,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4069,
											"end": 4078,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4060,
											"end": 4067,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4056,
											"end": 4079,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4052,
											"end": 4084,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 4049,
											"end": 4101,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4049,
											"end": 4101,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "444"
										},
										{
											"begin": 4049,
											"end": 4101,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4097,
											"end": 4098,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4094,
											"end": 4095,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4087,
											"end": 4099,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4049,
											"end": 4101,
											"name": "tag",
											"source": 18,
											"value": "444"
										},
										{
											"begin": 4049,
											"end": 4101,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4137,
											"end": 4146,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4124,
											"end": 4147,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4166,
											"end": 4184,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4207,
											"end": 4209,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4199,
											"end": 4205,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4196,
											"end": 4210,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 4193,
											"end": 4227,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4193,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "445"
										},
										{
											"begin": 4193,
											"end": 4227,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4223,
											"end": 4224,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4220,
											"end": 4221,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4213,
											"end": 4225,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4193,
											"end": 4227,
											"name": "tag",
											"source": 18,
											"value": "445"
										},
										{
											"begin": 4193,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4261,
											"end": 4267,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4250,
											"end": 4259,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4246,
											"end": 4268,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4236,
											"end": 4268,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4236,
											"end": 4268,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4306,
											"end": 4313,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4299,
											"end": 4303,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 4295,
											"end": 4297,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4291,
											"end": 4304,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4287,
											"end": 4314,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 4277,
											"end": 4332,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "446"
										},
										{
											"begin": 4277,
											"end": 4332,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4328,
											"end": 4329,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4325,
											"end": 4326,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4318,
											"end": 4330,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4277,
											"end": 4332,
											"name": "tag",
											"source": 18,
											"value": "446"
										},
										{
											"begin": 4277,
											"end": 4332,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4368,
											"end": 4370,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4355,
											"end": 4371,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4394,
											"end": 4396,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4386,
											"end": 4392,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4383,
											"end": 4397,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 4380,
											"end": 4414,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4380,
											"end": 4414,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "447"
										},
										{
											"begin": 4380,
											"end": 4414,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4410,
											"end": 4411,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4407,
											"end": 4408,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4400,
											"end": 4412,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4380,
											"end": 4414,
											"name": "tag",
											"source": 18,
											"value": "447"
										},
										{
											"begin": 4380,
											"end": 4414,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4463,
											"end": 4470,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 4458,
											"end": 4460,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4448,
											"end": 4454,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4445,
											"end": 4446,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 4441,
											"end": 4455,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 4437,
											"end": 4439,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4433,
											"end": 4456,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4429,
											"end": 4461,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4426,
											"end": 4471,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 4423,
											"end": 4488,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4423,
											"end": 4488,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "448"
										},
										{
											"begin": 4423,
											"end": 4488,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4484,
											"end": 4485,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4481,
											"end": 4482,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4474,
											"end": 4486,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4423,
											"end": 4488,
											"name": "tag",
											"source": 18,
											"value": "448"
										},
										{
											"begin": 4423,
											"end": 4488,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4515,
											"end": 4517,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4507,
											"end": 4518,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4507,
											"end": 4518,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4507,
											"end": 4518,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4507,
											"end": 4518,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4507,
											"end": 4518,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 4537,
											"end": 4543,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4537,
											"end": 4543,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3923,
											"end": 4549,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3923,
											"end": 4549,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3923,
											"end": 4549,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 4554,
											"end": 5355,
											"name": "tag",
											"source": 18,
											"value": "101"
										},
										{
											"begin": 4554,
											"end": 5355,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4714,
											"end": 4718,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4743,
											"end": 4745,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4783,
											"end": 4785,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4772,
											"end": 4781,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4768,
											"end": 4786,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4813,
											"end": 4815,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4802,
											"end": 4811,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4795,
											"end": 4816,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4836,
											"end": 4842,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4871,
											"end": 4877,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4865,
											"end": 4878,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 4902,
											"end": 4908,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4894,
											"end": 4900,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4887,
											"end": 4909,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4940,
											"end": 4942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4929,
											"end": 4938,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 4925,
											"end": 4943,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4918,
											"end": 4943,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4918,
											"end": 4943,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5002,
											"end": 5004,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4992,
											"end": 4998,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4989,
											"end": 4990,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 4985,
											"end": 4999,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 4974,
											"end": 4983,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 4970,
											"end": 5000,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4966,
											"end": 5005,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4952,
											"end": 5005,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4952,
											"end": 5005,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5040,
											"end": 5042,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 5032,
											"end": 5038,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 5028,
											"end": 5043,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5061,
											"end": 5062,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "tag",
											"source": 18,
											"value": "450"
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5085,
											"end": 5091,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5082,
											"end": 5083,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5079,
											"end": 5092,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "452"
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5178,
											"end": 5180,
											"name": "PUSH",
											"source": 18,
											"value": "3F"
										},
										{
											"begin": 5174,
											"end": 5181,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 5162,
											"end": 5171,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 5154,
											"end": 5160,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 5150,
											"end": 5172,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 5146,
											"end": 5182,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5141,
											"end": 5144,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 5134,
											"end": 5183,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5206,
											"end": 5246,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "453"
										},
										{
											"begin": 5239,
											"end": 5245,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 5230,
											"end": 5236,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 5224,
											"end": 5237,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5206,
											"end": 5246,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "401"
										},
										{
											"begin": 5206,
											"end": 5246,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 5206,
											"end": 5246,
											"name": "tag",
											"source": 18,
											"value": "453"
										},
										{
											"begin": 5206,
											"end": 5246,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5196,
											"end": 5246,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5304,
											"end": 5316,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5304,
											"end": 5316,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 5304,
											"end": 5316,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5304,
											"end": 5316,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5269,
											"end": 5284,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5269,
											"end": 5284,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 5269,
											"end": 5284,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5269,
											"end": 5284,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5107,
											"end": 5108,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 5100,
											"end": 5109,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "450"
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "tag",
											"source": 18,
											"value": "452"
										},
										{
											"begin": 5071,
											"end": 5326,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5343,
											"end": 5349,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5343,
											"end": 5349,
											"name": "SWAP8",
											"source": 18
										},
										{
											"begin": 4554,
											"end": 5355,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4554,
											"end": 5355,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "tag",
											"source": 18,
											"value": "104"
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5471,
											"end": 5477,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5479,
											"end": 5485,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5487,
											"end": 5493,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5495,
											"end": 5501,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5503,
											"end": 5509,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5511,
											"end": 5517,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5519,
											"end": 5525,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5572,
											"end": 5575,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 5560,
											"end": 5569,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 5551,
											"end": 5558,
											"name": "DUP11",
											"source": 18
										},
										{
											"begin": 5547,
											"end": 5570,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 5543,
											"end": 5576,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 5540,
											"end": 5593,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 5540,
											"end": 5593,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "455"
										},
										{
											"begin": 5540,
											"end": 5593,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5589,
											"end": 5590,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5586,
											"end": 5587,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5579,
											"end": 5591,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 5540,
											"end": 5593,
											"name": "tag",
											"source": 18,
											"value": "455"
										},
										{
											"begin": 5540,
											"end": 5593,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5612,
											"end": 5641,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "456"
										},
										{
											"begin": 5631,
											"end": 5640,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 5612,
											"end": 5641,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 5612,
											"end": 5641,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 5612,
											"end": 5641,
											"name": "tag",
											"source": 18,
											"value": "456"
										},
										{
											"begin": 5612,
											"end": 5641,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5602,
											"end": 5641,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 5602,
											"end": 5641,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5660,
											"end": 5698,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "457"
										},
										{
											"begin": 5694,
											"end": 5696,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5683,
											"end": 5692,
											"name": "DUP10",
											"source": 18
										},
										{
											"begin": 5679,
											"end": 5697,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5660,
											"end": 5698,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 5660,
											"end": 5698,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 5660,
											"end": 5698,
											"name": "tag",
											"source": 18,
											"value": "457"
										},
										{
											"begin": 5660,
											"end": 5698,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5650,
											"end": 5698,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 5650,
											"end": 5698,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5745,
											"end": 5747,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5734,
											"end": 5743,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 5730,
											"end": 5748,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5717,
											"end": 5749,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 5707,
											"end": 5749,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 5707,
											"end": 5749,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5796,
											"end": 5798,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 5785,
											"end": 5794,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 5781,
											"end": 5799,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5768,
											"end": 5800,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 5758,
											"end": 5800,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 5758,
											"end": 5800,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5850,
											"end": 5853,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 5839,
											"end": 5848,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5822,
											"end": 5855,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 5895,
											"end": 5899,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 5888,
											"end": 5893,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5884,
											"end": 5900,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 5877,
											"end": 5882,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5874,
											"end": 5901,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 5864,
											"end": 5919,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "458"
										},
										{
											"begin": 5864,
											"end": 5919,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5915,
											"end": 5916,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5912,
											"end": 5913,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5905,
											"end": 5917,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 5864,
											"end": 5919,
											"name": "tag",
											"source": 18,
											"value": "458"
										},
										{
											"begin": 5864,
											"end": 5919,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP10",
											"source": 18
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP9",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 5938,
											"end": 5943,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 5990,
											"end": 5993,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 5975,
											"end": 5994,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 5975,
											"end": 5994,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5962,
											"end": 5995,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 5962,
											"end": 5995,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6042,
											"end": 6045,
											"name": "PUSH",
											"source": 18,
											"value": "C0"
										},
										{
											"begin": 6027,
											"end": 6046,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6027,
											"end": 6046,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 6027,
											"end": 6046,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6014,
											"end": 6047,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 6014,
											"end": 6047,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5360,
											"end": 6053,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 6058,
											"end": 6318,
											"name": "tag",
											"source": 18,
											"value": "108"
										},
										{
											"begin": 6058,
											"end": 6318,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6126,
											"end": 6132,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6134,
											"end": 6140,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 6187,
											"end": 6189,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 6175,
											"end": 6184,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 6166,
											"end": 6173,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 6162,
											"end": 6185,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 6158,
											"end": 6190,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 6155,
											"end": 6207,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 6155,
											"end": 6207,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "460"
										},
										{
											"begin": 6155,
											"end": 6207,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 6203,
											"end": 6204,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6200,
											"end": 6201,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 6193,
											"end": 6205,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 6155,
											"end": 6207,
											"name": "tag",
											"source": 18,
											"value": "460"
										},
										{
											"begin": 6155,
											"end": 6207,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6226,
											"end": 6255,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "461"
										},
										{
											"begin": 6245,
											"end": 6254,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 6226,
											"end": 6255,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 6226,
											"end": 6255,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 6226,
											"end": 6255,
											"name": "tag",
											"source": 18,
											"value": "461"
										},
										{
											"begin": 6226,
											"end": 6255,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6216,
											"end": 6255,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 6216,
											"end": 6255,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6274,
											"end": 6312,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "462"
										},
										{
											"begin": 6308,
											"end": 6310,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 6297,
											"end": 6306,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 6293,
											"end": 6311,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6274,
											"end": 6312,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "402"
										},
										{
											"begin": 6274,
											"end": 6312,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 6274,
											"end": 6312,
											"name": "tag",
											"source": 18,
											"value": "462"
										},
										{
											"begin": 6274,
											"end": 6312,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6264,
											"end": 6312,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6264,
											"end": 6312,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6058,
											"end": 6318,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 6058,
											"end": 6318,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6058,
											"end": 6318,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 6058,
											"end": 6318,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6058,
											"end": 6318,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6058,
											"end": 6318,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 6323,
											"end": 6703,
											"name": "tag",
											"source": 18,
											"value": "116"
										},
										{
											"begin": 6323,
											"end": 6703,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6402,
											"end": 6403,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 6398,
											"end": 6410,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6398,
											"end": 6410,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6398,
											"end": 6410,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 6398,
											"end": 6410,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6445,
											"end": 6457,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6445,
											"end": 6457,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 6445,
											"end": 6457,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 6466,
											"end": 6527,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "464"
										},
										{
											"begin": 6466,
											"end": 6527,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 6520,
											"end": 6524,
											"name": "PUSH",
											"source": 18,
											"value": "7F"
										},
										{
											"begin": 6512,
											"end": 6518,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6508,
											"end": 6525,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 6498,
											"end": 6525,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 6498,
											"end": 6525,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 6466,
											"end": 6527,
											"name": "tag",
											"source": 18,
											"value": "464"
										},
										{
											"begin": 6466,
											"end": 6527,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6573,
											"end": 6575,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 6565,
											"end": 6571,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6562,
											"end": 6576,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 6542,
											"end": 6560,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6539,
											"end": 6577,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 6536,
											"end": 6697,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 6536,
											"end": 6697,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "321"
										},
										{
											"begin": 6536,
											"end": 6697,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 6619,
											"end": 6629,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 6614,
											"end": 6617,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 6610,
											"end": 6630,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 6607,
											"end": 6608,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6600,
											"end": 6631,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6654,
											"end": 6658,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 6651,
											"end": 6652,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 6644,
											"end": 6659,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6682,
											"end": 6686,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 6679,
											"end": 6680,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 6672,
											"end": 6687,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 7051,
											"end": 7178,
											"name": "tag",
											"source": 18,
											"value": "403"
										},
										{
											"begin": 7051,
											"end": 7178,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 7112,
											"end": 7122,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 7107,
											"end": 7110,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 7103,
											"end": 7123,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 7100,
											"end": 7101,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 7093,
											"end": 7124,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7143,
											"end": 7147,
											"name": "PUSH",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 7140,
											"end": 7141,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 7133,
											"end": 7148,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7167,
											"end": 7171,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7164,
											"end": 7165,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 7157,
											"end": 7172,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 7183,
											"end": 7311,
											"name": "tag",
											"source": 18,
											"value": "152"
										},
										{
											"begin": 7183,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 7223,
											"end": 7226,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 7254,
											"end": 7255,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7250,
											"end": 7256,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 7247,
											"end": 7248,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7244,
											"end": 7257,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 7241,
											"end": 7280,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 7241,
											"end": 7280,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "470"
										},
										{
											"begin": 7241,
											"end": 7280,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 7260,
											"end": 7278,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "470"
										},
										{
											"begin": 7260,
											"end": 7278,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "403"
										},
										{
											"begin": 7260,
											"end": 7278,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 7260,
											"end": 7278,
											"name": "tag",
											"source": 18,
											"value": "470"
										},
										{
											"begin": 7260,
											"end": 7278,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7296,
											"end": 7305,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7296,
											"end": 7305,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 7183,
											"end": 7311,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 8770,
											"end": 8897,
											"name": "tag",
											"source": 18,
											"value": "210"
										},
										{
											"begin": 8770,
											"end": 8897,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 8831,
											"end": 8841,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 8826,
											"end": 8829,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 8822,
											"end": 8842,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 8819,
											"end": 8820,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 8812,
											"end": 8843,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8862,
											"end": 8866,
											"name": "PUSH",
											"source": 18,
											"value": "32"
										},
										{
											"begin": 8859,
											"end": 8860,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 8852,
											"end": 8867,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8886,
											"end": 8890,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 8883,
											"end": 8884,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 8876,
											"end": 8891,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 8902,
											"end": 9423,
											"name": "tag",
											"source": 18,
											"value": "212"
										},
										{
											"begin": 8902,
											"end": 9423,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 8979,
											"end": 8983,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 8985,
											"end": 8991,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 9045,
											"end": 9056,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 9032,
											"end": 9057,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 9139,
											"end": 9141,
											"name": "PUSH",
											"source": 18,
											"value": "1E"
										},
										{
											"begin": 9135,
											"end": 9142,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 9124,
											"end": 9132,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 9108,
											"end": 9122,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 9104,
											"end": 9133,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 9100,
											"end": 9143,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9080,
											"end": 9098,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 9076,
											"end": 9144,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 9066,
											"end": 9162,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "477"
										},
										{
											"begin": 9066,
											"end": 9162,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 9158,
											"end": 9159,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 9155,
											"end": 9156,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 9148,
											"end": 9160,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 9066,
											"end": 9162,
											"name": "tag",
											"source": 18,
											"value": "477"
										},
										{
											"begin": 9066,
											"end": 9162,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 9185,
											"end": 9218,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 9185,
											"end": 9218,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9237,
											"end": 9257,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 9237,
											"end": 9257,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 9237,
											"end": 9257,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9269,
											"end": 9299,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 9269,
											"end": 9299,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 9266,
											"end": 9316,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 9266,
											"end": 9316,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "478"
										},
										{
											"begin": 9266,
											"end": 9316,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 9312,
											"end": 9313,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 9309,
											"end": 9310,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 9302,
											"end": 9314,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 9266,
											"end": 9316,
											"name": "tag",
											"source": 18,
											"value": "478"
										},
										{
											"begin": 9266,
											"end": 9316,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 9345,
											"end": 9349,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 9333,
											"end": 9350,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9333,
											"end": 9350,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9376,
											"end": 9390,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 9372,
											"end": 9399,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 9372,
											"end": 9399,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 9372,
											"end": 9399,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 9362,
											"end": 9400,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 9362,
											"end": 9400,
											"name": "SGT",
											"source": 18
										},
										{
											"begin": 9359,
											"end": 9417,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 9359,
											"end": 9417,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "479"
										},
										{
											"begin": 9359,
											"end": 9417,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 9413,
											"end": 9414,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 9410,
											"end": 9411,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 9403,
											"end": 9415,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 9359,
											"end": 9417,
											"name": "tag",
											"source": 18,
											"value": "479"
										},
										{
											"begin": 9359,
											"end": 9417,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 8902,
											"end": 9423,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 8902,
											"end": 9423,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 8902,
											"end": 9423,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 8902,
											"end": 9423,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 8902,
											"end": 9423,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 8902,
											"end": 9423,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 9428,
											"end": 9563,
											"name": "tag",
											"source": 18,
											"value": "217"
										},
										{
											"begin": 9428,
											"end": 9563,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 9467,
											"end": 9470,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9488,
											"end": 9505,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 9488,
											"end": 9505,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 9485,
											"end": 9528,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 9485,
											"end": 9528,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "482"
										},
										{
											"begin": 9485,
											"end": 9528,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 9508,
											"end": 9526,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "482"
										},
										{
											"begin": 9508,
											"end": 9526,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "403"
										},
										{
											"begin": 9508,
											"end": 9526,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 9508,
											"end": 9526,
											"name": "tag",
											"source": 18,
											"value": "482"
										},
										{
											"begin": 9508,
											"end": 9526,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9555,
											"end": 9556,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 9544,
											"end": 9557,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 9544,
											"end": 9557,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 9428,
											"end": 9563,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 14563,
											"end": 14688,
											"name": "tag",
											"source": 18,
											"value": "289"
										},
										{
											"begin": 14563,
											"end": 14688,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 14603,
											"end": 14607,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 14631,
											"end": 14632,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14628,
											"end": 14629,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 14625,
											"end": 14633,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 14622,
											"end": 14656,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 14622,
											"end": 14656,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "497"
										},
										{
											"begin": 14622,
											"end": 14656,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 14636,
											"end": 14654,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "497"
										},
										{
											"begin": 14636,
											"end": 14654,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "403"
										},
										{
											"begin": 14636,
											"end": 14654,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 14636,
											"end": 14654,
											"name": "tag",
											"source": 18,
											"value": "497"
										},
										{
											"begin": 14636,
											"end": 14654,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14673,
											"end": 14682,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 14673,
											"end": 14682,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 14563,
											"end": 14688,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 15053,
											"end": 15436,
											"name": "tag",
											"source": 18,
											"value": "315"
										},
										{
											"begin": 15053,
											"end": 15436,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 15250,
											"end": 15252,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 15239,
											"end": 15248,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 15232,
											"end": 15253,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 15213,
											"end": 15217,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 15276,
											"end": 15321,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "500"
										},
										{
											"begin": 15317,
											"end": 15319,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 15306,
											"end": 15315,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 15302,
											"end": 15320,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 15294,
											"end": 15300,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 15276,
											"end": 15321,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "401"
										},
										{
											"begin": 15276,
											"end": 15321,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 15276,
											"end": 15321,
											"name": "tag",
											"source": 18,
											"value": "500"
										},
										{
											"begin": 15276,
											"end": 15321,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 15369,
											"end": 15378,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 15361,
											"end": 15367,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 15357,
											"end": 15379,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 15352,
											"end": 15354,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 15341,
											"end": 15350,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 15337,
											"end": 15355,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 15330,
											"end": 15380,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 15397,
											"end": 15430,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 15423,
											"end": 15429,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 15415,
											"end": 15421,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 15397,
											"end": 15430,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "401"
										},
										{
											"begin": 15397,
											"end": 15430,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 15397,
											"end": 15430,
											"name": "tag",
											"source": 18,
											"value": "501"
										},
										{
											"begin": 15397,
											"end": 15430,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 15389,
											"end": 15430,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 15053,
											"end": 15436,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15053,
											"end": 15436,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 15848,
											"end": 16122,
											"name": "tag",
											"source": 18,
											"value": "338"
										},
										{
											"begin": 15848,
											"end": 16122,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 15977,
											"end": 15980,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 16015,
											"end": 16021,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 16009,
											"end": 16022,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 16031,
											"end": 16084,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "504"
										},
										{
											"begin": 16077,
											"end": 16083,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 16072,
											"end": 16075,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 16065,
											"end": 16069,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 16057,
											"end": 16063,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 16053,
											"end": 16070,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 16031,
											"end": 16084,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "400"
										},
										{
											"begin": 16031,
											"end": 16084,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 16031,
											"end": 16084,
											"name": "tag",
											"source": 18,
											"value": "504"
										},
										{
											"begin": 16031,
											"end": 16084,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 16100,
											"end": 16116,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 16100,
											"end": 16116,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 16100,
											"end": 16116,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 16100,
											"end": 16116,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 16100,
											"end": 16116,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 15848,
											"end": 16122,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15848,
											"end": 16122,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 16530,
											"end": 16657,
											"name": "tag",
											"source": 18,
											"value": "355"
										},
										{
											"begin": 16530,
											"end": 16657,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 16591,
											"end": 16601,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 16586,
											"end": 16589,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 16582,
											"end": 16602,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 16579,
											"end": 16580,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 16572,
											"end": 16603,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 16622,
											"end": 16626,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 16619,
											"end": 16620,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 16612,
											"end": 16627,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 16646,
											"end": 16650,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 16643,
											"end": 16644,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 16636,
											"end": 16651,
											"name": "REVERT",
											"source": 18
										}
									],
									".data": {
										"9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"contractURI()": "e8a3d485",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"mintTo(address,uint256)": "449a52f8",
							"multicall(bytes[])": "ac9650d8",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"setContractURI(string)": "938e3d7b",
							"setOwner(address)": "13af4035",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Caller should own the `_amount` of tokens.\",\"params\":{\"_amount\":\"The number of tokens to burn.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintTo(address,uint256)\":{\"details\":\"The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.\",\"params\":{\"_amount\":\"Quantity of tokens to mint.\",\"_to\":\"The recipient of the tokens to mint.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner a given amount of their tokens.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"mintTo(address,uint256)\":{\"notice\":\"Lets an authorized address mint tokens to a recipient.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"}},\"notice\":\"The `ERC20Base` smart contract implements the ERC20 standard.  It includes the following additions to standard ERC20 logic:      - Ability to mint & burn tokens via the provided `mint` & `burn` functions.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by                             presenting a message signed by the account.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"base/ERC20Base.sol\":\"ERC20Base\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"base/ERC20Base.sol\":{\"keccak256\":\"0xb846e12b1a7f98933dafeadfcda6062630fe91c88a47260c20b68a42b7a8119e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d5952f7e3ec3d67d5c3edaf1bf23cca0a17d3336a2db36ba0557a9cddda1c1e4\",\"dweb:/ipfs/QmbT3Jj83BfJdEEWSWZ3rZ5AnMjXg37Pf3xKA4jeqt5ZnP\"]},\"eip/interface/IERC20.sol\":{\"keccak256\":\"0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592\",\"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA\"]},\"eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]},\"eip/interface/IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"extension/ContractMetadata.sol\":{\"keccak256\":\"0xc09170b980a2fe0fae2997302bda8a21d0e6f0af26992ce3cf091228b5b789ef\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4cfaeaf0eee995e1f1e452736c2372056a790f8a8fc3546c6699c1e8e2c32c63\",\"dweb:/ipfs/QmaCivosks6cZjd8NFruwzyZffAqjHbYEbcyNzW85CMMpF\"]},\"extension/Multicall.sol\":{\"keccak256\":\"0x786f697de4ca3ea6538de8e7a491744f7dcf07607a8b8cdd55e18e6cf5065d1e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b4f8b42f64cd0177ad3db597d68e608822f7616e6737e89bc98890a9300d67a7\",\"dweb:/ipfs/QmRQfw5TXvkEkKiUgnQw2HWLJmU7PyFhgUXQAAPtpcQ8JK\"]},\"extension/Ownable.sol\":{\"keccak256\":\"0x81af362c307b177241b6cba2f7ce247255c8808ab1beb4a20ef73137f6281370\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0c901d44bfae9c6dc0313172ed8697d2f8b0ec286da4259b422df657a5565fb7\",\"dweb:/ipfs/QmPKtKu5hszbGitqVu5MjGtRhzk1yP56iy38UM9h9X1prY\"]},\"extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x1fcbe96e8ec5c383aa27706a09cef56c4f956cca1a16ec824ae5765cc2943dfd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://589882546f80bf827147e5ae6acc24b632ddf5fa0b2274e8cfc0329fec02fda6\",\"dweb:/ipfs/QmUJBcmJnHf4zPQKgDnBjWBAUzjaJNPTMKUkvNrKnF3gCR\"]},\"extension/interface/IMulticall.sol\":{\"keccak256\":\"0xed60ae2fe1dc703fac2e749de0ab11816a408caca78544e9aa2de559a9b57dab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12979ce3edf286d313f2056c9995ce03c5fc36e6a74d0c8c1ddaaf4a2ff6a9d2\",\"dweb:/ipfs/QmevKW4ui2SbBNGyiZR71pMdCprZpgz8ECB3GPZ4SFt5Kq\"]},\"extension/interface/IOwnable.sol\":{\"keccak256\":\"0x7940f02f9b82c4f56f1550edf0a6ff0756b122a474aaa1696744e4e93d122d51\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9405259f8619be8b2a1ebfccc3422f52649d1a9f1db613bdcedafcbf4bcadc55\",\"dweb:/ipfs/QmUsSgUAMitLkHaT1tiUUkpRijTETxAZDqm3i1WPmPoLcF\"]},\"lib/TWAddress.sol\":{\"keccak256\":\"0x64bad93ff4e8ccc24a800b84a882a44f0d3f89a36f5ae7babf7eba3d400cded4\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://6a22a5002533f7261207c6f4a4ae0c7fd96725e457d4ef9f8d10f81e22d720e0\",\"dweb:/ipfs/QmU8HtjhZReUMnZwqouzNk8mWqAbXcrHnHKRFWpk25C6UG\"]},\"lib/TWStrings.sol\":{\"keccak256\":\"0x397c71618c46cacdd241e5ce269e8084b49e4372e7170d4e8873a6b530da305d\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://f2fa573cf225c7e9c3a8b352c8a4bcb650ca22d15bd05335c301a3cac3599a81\",\"dweb:/ipfs/QmUCNUdwzLXq2DA1gKYjFJgjqosC8HqnXMd5udJ2GbKUfa\"]},\"openzeppelin-presets/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x0429da8e9a940fceb58b83ea0425489dccf4f0c2178625dac6864c889c96f43f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1519284bd9276de5bb35f3fea2068e718518e179091ca494652b0fddfa1ea940\",\"dweb:/ipfs/QmTbZkyEFbgTLA8ehLgs29JLGaqrGdUNJQxagN8dFiiSma\"]},\"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x409682c602fff6428b40be9c454a3dca04e3c891a9dec03ad923da083b336312\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://692a8d672cf6a5c87d4ff10520e7f440496fa3896fe4b3f0bd15a5af6155e032\",\"dweb:/ipfs/QmXnzi7Y3rP8wfRy71j5BsRPZAAmbQ2SMGcQdEdt4N7fYT\"]},\"openzeppelin-presets/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"openzeppelin-presets/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"openzeppelin-presets/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xe7c8a90c658962ae2d706fb5a4e522404b11a06347d36186e0d64a26d8f58d2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6b4d213258d6693acd3b6131f723e01bf2629c48520103986c5ec039f144f8\",\"dweb:/ipfs/QmQvzsASAkfs4BwPSKE4Quu3dxzseHNBehNntLyGfdwJuN\"]},\"openzeppelin-presets/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 258,
								"contract": "base/ERC20Base.sol:ERC20Base",
								"label": "contractURI",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 374,
								"contract": "base/ERC20Base.sol:ERC20Base",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 1021,
								"contract": "base/ERC20Base.sol:ERC20Base",
								"label": "_balances",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1027,
								"contract": "base/ERC20Base.sol:ERC20Base",
								"label": "_allowances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1029,
								"contract": "base/ERC20Base.sol:ERC20Base",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 1031,
								"contract": "base/ERC20Base.sol:ERC20Base",
								"label": "_name",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 1033,
								"contract": "base/ERC20Base.sol:ERC20Base",
								"label": "_symbol",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1614,
								"contract": "base/ERC20Base.sol:ERC20Base",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Counter)1863_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)1863_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Counters.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)1863_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)1863_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 1862,
										"contract": "base/ERC20Base.sol:ERC20Base",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "Lets an owner a given amount of their tokens."
							},
							"contractURI()": {
								"notice": "Returns the contract metadata URI."
							},
							"mintTo(address,uint256)": {
								"notice": "Lets an authorized address mint tokens to a recipient."
							},
							"multicall(bytes[])": {
								"notice": "Receives and executes a batch of function calls on this contract."
							},
							"owner()": {
								"notice": "Returns the owner of the contract."
							},
							"setContractURI(string)": {
								"notice": "Lets a contract admin set the URI for contract-level metadata."
							},
							"setOwner(address)": {
								"notice": "Lets an authorized wallet set a new owner for the contract."
							}
						},
						"notice": "The `ERC20Base` smart contract implements the ERC20 standard.  It includes the following additions to standard ERC20 logic:      - Ability to mint & burn tokens via the provided `mint` & `burn` functions.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by                             presenting a message signed by the account.",
						"version": 1
					}
				}
			},
			"eip/interface/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "who",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "see https://github.com/ethereum/EIPs/issues/20",
						"kind": "dev",
						"methods": {},
						"title": "ERC20 interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://github.com/ethereum/EIPs/issues/20\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20 interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"eip/interface/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"eip/interface/IERC20.sol\":{\"keccak256\":\"0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592\",\"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"eip/interface/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "see https://github.com/ethereum/EIPs/issues/20",
						"kind": "dev",
						"methods": {},
						"title": "ERC20Metadata interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://github.com/ethereum/EIPs/issues/20\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20Metadata interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"eip/interface/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"eip/interface/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"eip/interface/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"eip/interface/IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"extension/ContractMetadata.sol": {
				"ContractMetadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "string",
									"name": "prevURI",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "newURI",
									"type": "string"
								}
							],
							"name": "ContractURIUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "contractURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "setContractURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"setContractURI(string)": {
								"details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
								"params": {
									"_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
								}
							}
						},
						"title": "Contract Metadata",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"contractURI()": "e8a3d485",
							"setContractURI(string)": "938e3d7b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}}},\"title\":\"Contract Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"}},\"notice\":\"Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI           for you contract.           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"extension/ContractMetadata.sol\":\"ContractMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"extension/ContractMetadata.sol\":{\"keccak256\":\"0xc09170b980a2fe0fae2997302bda8a21d0e6f0af26992ce3cf091228b5b789ef\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://4cfaeaf0eee995e1f1e452736c2372056a790f8a8fc3546c6699c1e8e2c32c63\",\"dweb:/ipfs/QmaCivosks6cZjd8NFruwzyZffAqjHbYEbcyNzW85CMMpF\"]},\"extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x1fcbe96e8ec5c383aa27706a09cef56c4f956cca1a16ec824ae5765cc2943dfd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://589882546f80bf827147e5ae6acc24b632ddf5fa0b2274e8cfc0329fec02fda6\",\"dweb:/ipfs/QmUJBcmJnHf4zPQKgDnBjWBAUzjaJNPTMKUkvNrKnF3gCR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 258,
								"contract": "extension/ContractMetadata.sol:ContractMetadata",
								"label": "contractURI",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"contractURI()": {
								"notice": "Returns the contract metadata URI."
							},
							"setContractURI(string)": {
								"notice": "Lets a contract admin set the URI for contract-level metadata."
							}
						},
						"notice": "Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI           for you contract.           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.",
						"version": 1
					}
				}
			},
			"extension/Multicall.sol": {
				"Multicall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides a function to batch together multiple calls in a single external call. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "Receives and executes a batch of function calls on this contract.",
								"params": {
									"data": "The bytes data that makes up the batch of function calls to execute."
								},
								"returns": {
									"results": "The bytes data that makes up the result of the batch of function calls executed."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"extension/Multicall.sol\":261:999  contract Multicall is IMulticall {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"extension/Multicall.sol\":261:999  contract Multicall is IMulticall {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xac9650d8\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"extension/Multicall.sol\":678:997  function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {... */\n    tag_3:\n      tag_4\n      tag_5\n      calldatasize\n      0x04\n      tag_6\n      jump\t// in\n    tag_5:\n      tag_7\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_8\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_7:\n        /* \"extension/Multicall.sol\":755:777  bytes[] memory results */\n      0x60\n        /* \"extension/Multicall.sol\":811:815  data */\n      dup2\n        /* \"extension/Multicall.sol\":799:823  new bytes[](data.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_12\n      jumpi\n      tag_12\n      tag_13\n      jump\t// in\n    tag_12:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_14\n      jumpi\n      dup2\n      0x20\n      add\n    tag_15:\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      swap1\n      sub\n      swap1\n      dup2\n      tag_15\n      jumpi\n      swap1\n      pop\n    tag_14:\n      pop\n        /* \"extension/Multicall.sol\":789:823  results = new bytes[](data.length) */\n      swap1\n      pop\n        /* \"extension/Multicall.sol\":838:847  uint256 i */\n      0x00\n        /* \"extension/Multicall.sol\":833:967  for (uint256 i = 0; i < data.length; i++) {... */\n    tag_16:\n        /* \"extension/Multicall.sol\":853:868  i < data.length */\n      dup3\n      dup2\n      lt\n        /* \"extension/Multicall.sol\":833:967  for (uint256 i = 0; i < data.length; i++) {... */\n      iszero\n      tag_17\n      jumpi\n        /* \"extension/Multicall.sol\":902:956  TWAddress.functionDelegateCall(address(this), data[i]) */\n      tag_19\n        /* \"extension/Multicall.sol\":941:945  this */\n      address\n        /* \"extension/Multicall.sol\":948:952  data */\n      dup6\n      dup6\n        /* \"extension/Multicall.sol\":953:954  i */\n      dup5\n        /* \"extension/Multicall.sol\":948:955  data[i] */\n      dup2\n      dup2\n      lt\n      tag_21\n      jumpi\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      swap1\n      pop\n      0x20\n      mul\n      dup2\n      add\n      swap1\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n        /* \"extension/Multicall.sol\":902:956  TWAddress.functionDelegateCall(address(this), data[i]) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"extension/Multicall.sol\":902:932  TWAddress.functionDelegateCall */\n      tag_25\n      swap3\n      pop\n      pop\n      pop\n        /* \"extension/Multicall.sol\":902:956  TWAddress.functionDelegateCall(address(this), data[i]) */\n      jump\t// in\n    tag_19:\n        /* \"extension/Multicall.sol\":889:896  results */\n      dup3\n        /* \"extension/Multicall.sol\":897:898  i */\n      dup3\n        /* \"extension/Multicall.sol\":889:899  results[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_27\n      jumpi\n      tag_27\n      tag_22\n      jump\t// in\n    tag_27:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"extension/Multicall.sol\":889:956  results[i] = TWAddress.functionDelegateCall(address(this), data[i]) */\n      dup2\n      swap1\n      mstore\n      pop\n        /* \"extension/Multicall.sol\":870:873  i++ */\n      dup1\n      dup1\n      tag_28\n      swap1\n      tag_29\n      jump\t// in\n    tag_28:\n      swap2\n      pop\n      pop\n        /* \"extension/Multicall.sol\":833:967  for (uint256 i = 0; i < data.length; i++) {... */\n      jump(tag_16)\n    tag_17:\n      pop\n        /* \"extension/Multicall.sol\":678:997  function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/TWAddress.sol\":6518:6716  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_25:\n        /* \"lib/TWAddress.sol\":6601:6613  bytes memory */\n      0x60\n        /* \"lib/TWAddress.sol\":6632:6709  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      tag_31\n        /* \"lib/TWAddress.sol\":6653:6659  target */\n      dup4\n        /* \"lib/TWAddress.sol\":6661:6665  data */\n      dup4\n        /* \"lib/TWAddress.sol\":6632:6709  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x27\n      dup2\n      mstore\n      0x20\n      add\n      data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398\n      0x27\n      swap2\n      codecopy\n        /* \"lib/TWAddress.sol\":6632:6652  functionDelegateCall */\n      tag_32\n        /* \"lib/TWAddress.sol\":6632:6709  functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      jump\t// in\n    tag_31:\n        /* \"lib/TWAddress.sol\":6625:6709  return functionDelegateCall(target, data, \"Address: low-level delegate call failed\") */\n      swap4\n        /* \"lib/TWAddress.sol\":6518:6716  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/TWAddress.sol\":6902:7289  function functionDelegateCall(... */\n    tag_32:\n        /* \"lib/TWAddress.sol\":7043:7055  bytes memory */\n      0x60\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/TWAddress.sol\":1407:1426  account.code.length */\n      dup5\n      and\n      extcodesize\n        /* \"lib/TWAddress.sol\":7067:7136  require(isContract(target), \"Address: delegate call to non-contract\") */\n      tag_36\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3204:3206   */\n      0x20\n        /* \"lib/TWAddress.sol\":7067:7136  require(isContract(target), \"Address: delegate call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3186:3207   */\n      mstore\n        /* \"#utility.yul\":3243:3245   */\n      0x26\n        /* \"#utility.yul\":3223:3241   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3216:3246   */\n      mstore\n        /* \"#utility.yul\":3282:3316   */\n      0x416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f\n        /* \"#utility.yul\":3262:3280   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3255:3317   */\n      mstore\n      shl(0xd2, 0x1b9d1c9858dd)\n        /* \"#utility.yul\":3333:3351   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3326:3362   */\n      mstore\n        /* \"#utility.yul\":3379:3398   */\n      0x84\n      add\n        /* \"lib/TWAddress.sol\":7067:7136  require(isContract(target), \"Address: delegate call to non-contract\") */\n    tag_37:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_36:\n        /* \"lib/TWAddress.sol\":7148:7160  bool success */\n      0x00\n        /* \"lib/TWAddress.sol\":7162:7185  bytes memory returndata */\n      dup1\n        /* \"lib/TWAddress.sol\":7189:7195  target */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/TWAddress.sol\":7189:7208  target.delegatecall */\n      and\n        /* \"lib/TWAddress.sol\":7209:7213  data */\n      dup6\n        /* \"lib/TWAddress.sol\":7189:7214  target.delegatecall(data) */\n      mload(0x40)\n      tag_39\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_43\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_42)\n    tag_43:\n      0x60\n      swap2\n      pop\n    tag_42:\n      pop\n        /* \"lib/TWAddress.sol\":7147:7214  (bool success, bytes memory returndata) = target.delegatecall(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"lib/TWAddress.sol\":7231:7282  verifyCallResult(success, returndata, errorMessage) */\n      tag_44\n        /* \"lib/TWAddress.sol\":7248:7255  success */\n      dup3\n        /* \"lib/TWAddress.sol\":7257:7267  returndata */\n      dup3\n        /* \"lib/TWAddress.sol\":7269:7281  errorMessage */\n      dup7\n        /* \"lib/TWAddress.sol\":7231:7247  verifyCallResult */\n      tag_45\n        /* \"lib/TWAddress.sol\":7231:7282  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_44:\n        /* \"lib/TWAddress.sol\":7224:7282  return verifyCallResult(success, returndata, errorMessage) */\n      swap7\n        /* \"lib/TWAddress.sol\":6902:7289  function functionDelegateCall(... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/TWAddress.sol\":7509:8201  function verifyCallResult(... */\n    tag_45:\n        /* \"lib/TWAddress.sol\":7655:7667  bytes memory */\n      0x60\n        /* \"lib/TWAddress.sol\":7683:7690  success */\n      dup4\n        /* \"lib/TWAddress.sol\":7679:8195  if (success) {... */\n      iszero\n      tag_48\n      jumpi\n      pop\n        /* \"lib/TWAddress.sol\":7713:7723  returndata */\n      dup2\n        /* \"lib/TWAddress.sol\":7706:7723  return returndata */\n      jump(tag_31)\n        /* \"lib/TWAddress.sol\":7679:8195  if (success) {... */\n    tag_48:\n        /* \"lib/TWAddress.sol\":7824:7841  returndata.length */\n      dup3\n      mload\n        /* \"lib/TWAddress.sol\":7824:7845  returndata.length > 0 */\n      iszero\n        /* \"lib/TWAddress.sol\":7820:8185  if (returndata.length > 0) {... */\n      tag_50\n      jumpi\n        /* \"lib/TWAddress.sol\":8018:8028  returndata */\n      dup3\n        /* \"lib/TWAddress.sol\":8012:8029  mload(returndata) */\n      mload\n        /* \"lib/TWAddress.sol\":8078:8093  returndata_size */\n      dup1\n        /* \"lib/TWAddress.sol\":8065:8075  returndata */\n      dup5\n        /* \"lib/TWAddress.sol\":8061:8063  32 */\n      0x20\n        /* \"lib/TWAddress.sol\":8057:8076  add(32, returndata) */\n      add\n        /* \"lib/TWAddress.sol\":8050:8094  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"lib/TWAddress.sol\":7820:8185  if (returndata.length > 0) {... */\n    tag_50:\n        /* \"lib/TWAddress.sol\":8157:8169  errorMessage */\n      dup2\n        /* \"lib/TWAddress.sol\":8150:8170  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_37\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n        /* \"#utility.yul\":14:640   */\n    tag_6:\n        /* \"#utility.yul\":111:117   */\n      0x00\n        /* \"#utility.yul\":119:125   */\n      dup1\n        /* \"#utility.yul\":172:174   */\n      0x20\n        /* \"#utility.yul\":160:169   */\n      dup4\n        /* \"#utility.yul\":151:158   */\n      dup6\n        /* \"#utility.yul\":147:170   */\n      sub\n        /* \"#utility.yul\":143:175   */\n      slt\n        /* \"#utility.yul\":140:192   */\n      iszero\n      tag_58\n      jumpi\n        /* \"#utility.yul\":188:189   */\n      0x00\n        /* \"#utility.yul\":185:186   */\n      dup1\n        /* \"#utility.yul\":178:190   */\n      revert\n        /* \"#utility.yul\":140:192   */\n    tag_58:\n        /* \"#utility.yul\":228:237   */\n      dup3\n        /* \"#utility.yul\":215:238   */\n      calldataload\n        /* \"#utility.yul\":257:275   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":298:300   */\n      dup1\n        /* \"#utility.yul\":290:296   */\n      dup3\n        /* \"#utility.yul\":287:301   */\n      gt\n        /* \"#utility.yul\":284:318   */\n      iszero\n      tag_59\n      jumpi\n        /* \"#utility.yul\":314:315   */\n      0x00\n        /* \"#utility.yul\":311:312   */\n      dup1\n        /* \"#utility.yul\":304:316   */\n      revert\n        /* \"#utility.yul\":284:318   */\n    tag_59:\n        /* \"#utility.yul\":352:358   */\n      dup2\n        /* \"#utility.yul\":341:350   */\n      dup6\n        /* \"#utility.yul\":337:359   */\n      add\n        /* \"#utility.yul\":327:359   */\n      swap2\n      pop\n        /* \"#utility.yul\":397:404   */\n      dup6\n        /* \"#utility.yul\":390:394   */\n      0x1f\n        /* \"#utility.yul\":386:388   */\n      dup4\n        /* \"#utility.yul\":382:395   */\n      add\n        /* \"#utility.yul\":378:405   */\n      slt\n        /* \"#utility.yul\":368:423   */\n      tag_60\n      jumpi\n        /* \"#utility.yul\":419:420   */\n      0x00\n        /* \"#utility.yul\":416:417   */\n      dup1\n        /* \"#utility.yul\":409:421   */\n      revert\n        /* \"#utility.yul\":368:423   */\n    tag_60:\n        /* \"#utility.yul\":459:461   */\n      dup2\n        /* \"#utility.yul\":446:462   */\n      calldataload\n        /* \"#utility.yul\":485:487   */\n      dup2\n        /* \"#utility.yul\":477:483   */\n      dup2\n        /* \"#utility.yul\":474:488   */\n      gt\n        /* \"#utility.yul\":471:505   */\n      iszero\n      tag_61\n      jumpi\n        /* \"#utility.yul\":501:502   */\n      0x00\n        /* \"#utility.yul\":498:499   */\n      dup1\n        /* \"#utility.yul\":491:503   */\n      revert\n        /* \"#utility.yul\":471:505   */\n    tag_61:\n        /* \"#utility.yul\":554:561   */\n      dup7\n        /* \"#utility.yul\":549:551   */\n      0x20\n        /* \"#utility.yul\":539:545   */\n      dup3\n        /* \"#utility.yul\":536:537   */\n      0x05\n        /* \"#utility.yul\":532:546   */\n      shl\n        /* \"#utility.yul\":528:530   */\n      dup6\n        /* \"#utility.yul\":524:547   */\n      add\n        /* \"#utility.yul\":520:552   */\n      add\n        /* \"#utility.yul\":517:562   */\n      gt\n        /* \"#utility.yul\":514:579   */\n      iszero\n      tag_62\n      jumpi\n        /* \"#utility.yul\":575:576   */\n      0x00\n        /* \"#utility.yul\":572:573   */\n      dup1\n        /* \"#utility.yul\":565:577   */\n      revert\n        /* \"#utility.yul\":514:579   */\n    tag_62:\n        /* \"#utility.yul\":606:608   */\n      0x20\n        /* \"#utility.yul\":598:609   */\n      swap3\n      swap1\n      swap3\n      add\n      swap7\n        /* \"#utility.yul\":628:634   */\n      swap2\n      swap6\n      pop\n        /* \"#utility.yul\":14:640   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":645:903   */\n    tag_54:\n        /* \"#utility.yul\":717:718   */\n      0x00\n        /* \"#utility.yul\":727:840   */\n    tag_64:\n        /* \"#utility.yul\":741:747   */\n      dup4\n        /* \"#utility.yul\":738:739   */\n      dup2\n        /* \"#utility.yul\":735:748   */\n      lt\n        /* \"#utility.yul\":727:840   */\n      iszero\n      tag_66\n      jumpi\n        /* \"#utility.yul\":817:828   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":811:829   */\n      mload\n        /* \"#utility.yul\":798:809   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":791:830   */\n      mstore\n        /* \"#utility.yul\":763:765   */\n      0x20\n        /* \"#utility.yul\":756:766   */\n      add\n        /* \"#utility.yul\":727:840   */\n      jump(tag_64)\n    tag_66:\n        /* \"#utility.yul\":858:864   */\n      dup4\n        /* \"#utility.yul\":855:856   */\n      dup2\n        /* \"#utility.yul\":852:865   */\n      gt\n        /* \"#utility.yul\":849:897   */\n      iszero\n      tag_67\n      jumpi\n        /* \"#utility.yul\":893:894   */\n      0x00\n        /* \"#utility.yul\":884:890   */\n      dup5\n        /* \"#utility.yul\":879:882   */\n      dup5\n        /* \"#utility.yul\":875:891   */\n      add\n        /* \"#utility.yul\":868:895   */\n      mstore\n        /* \"#utility.yul\":849:897   */\n    tag_67:\n      pop\n        /* \"#utility.yul\":645:903   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":908:1165   */\n    tag_55:\n        /* \"#utility.yul\":949:952   */\n      0x00\n        /* \"#utility.yul\":987:992   */\n      dup2\n        /* \"#utility.yul\":981:993   */\n      mload\n        /* \"#utility.yul\":1014:1020   */\n      dup1\n        /* \"#utility.yul\":1009:1012   */\n      dup5\n        /* \"#utility.yul\":1002:1021   */\n      mstore\n        /* \"#utility.yul\":1030:1093   */\n      tag_69\n        /* \"#utility.yul\":1086:1092   */\n      dup2\n        /* \"#utility.yul\":1079:1083   */\n      0x20\n        /* \"#utility.yul\":1074:1077   */\n      dup7\n        /* \"#utility.yul\":1070:1084   */\n      add\n        /* \"#utility.yul\":1063:1067   */\n      0x20\n        /* \"#utility.yul\":1056:1061   */\n      dup7\n        /* \"#utility.yul\":1052:1068   */\n      add\n        /* \"#utility.yul\":1030:1093   */\n      tag_54\n      jump\t// in\n    tag_69:\n        /* \"#utility.yul\":1147:1149   */\n      0x1f\n        /* \"#utility.yul\":1126:1141   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1122:1151   */\n      and\n        /* \"#utility.yul\":1113:1152   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1154:1158   */\n      0x20\n        /* \"#utility.yul\":1109:1159   */\n      add\n      swap3\n        /* \"#utility.yul\":908:1165   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1170:1970   */\n    tag_9:\n        /* \"#utility.yul\":1330:1334   */\n      0x00\n        /* \"#utility.yul\":1359:1361   */\n      0x20\n        /* \"#utility.yul\":1399:1401   */\n      dup1\n        /* \"#utility.yul\":1388:1397   */\n      dup4\n        /* \"#utility.yul\":1384:1402   */\n      add\n        /* \"#utility.yul\":1429:1431   */\n      dup2\n        /* \"#utility.yul\":1418:1427   */\n      dup5\n        /* \"#utility.yul\":1411:1432   */\n      mstore\n        /* \"#utility.yul\":1452:1458   */\n      dup1\n        /* \"#utility.yul\":1487:1493   */\n      dup6\n        /* \"#utility.yul\":1481:1494   */\n      mload\n        /* \"#utility.yul\":1518:1524   */\n      dup1\n        /* \"#utility.yul\":1510:1516   */\n      dup4\n        /* \"#utility.yul\":1503:1525   */\n      mstore\n        /* \"#utility.yul\":1556:1558   */\n      0x40\n        /* \"#utility.yul\":1545:1554   */\n      dup7\n        /* \"#utility.yul\":1541:1559   */\n      add\n        /* \"#utility.yul\":1534:1559   */\n      swap2\n      pop\n        /* \"#utility.yul\":1618:1620   */\n      0x40\n        /* \"#utility.yul\":1608:1614   */\n      dup2\n        /* \"#utility.yul\":1605:1606   */\n      0x05\n        /* \"#utility.yul\":1601:1615   */\n      shl\n        /* \"#utility.yul\":1590:1599   */\n      dup8\n        /* \"#utility.yul\":1586:1616   */\n      add\n        /* \"#utility.yul\":1582:1621   */\n      add\n        /* \"#utility.yul\":1568:1621   */\n      swap3\n      pop\n        /* \"#utility.yul\":1656:1658   */\n      dup4\n        /* \"#utility.yul\":1648:1654   */\n      dup8\n        /* \"#utility.yul\":1644:1659   */\n      add\n        /* \"#utility.yul\":1677:1678   */\n      0x00\n        /* \"#utility.yul\":1687:1941   */\n    tag_71:\n        /* \"#utility.yul\":1701:1707   */\n      dup3\n        /* \"#utility.yul\":1698:1699   */\n      dup2\n        /* \"#utility.yul\":1695:1708   */\n      lt\n        /* \"#utility.yul\":1687:1941   */\n      iszero\n      tag_73\n      jumpi\n        /* \"#utility.yul\":1794:1796   */\n      0x3f\n        /* \"#utility.yul\":1790:1797   */\n      not\n        /* \"#utility.yul\":1778:1787   */\n      dup9\n        /* \"#utility.yul\":1770:1776   */\n      dup7\n        /* \"#utility.yul\":1766:1788   */\n      sub\n        /* \"#utility.yul\":1762:1798   */\n      add\n        /* \"#utility.yul\":1757:1760   */\n      dup5\n        /* \"#utility.yul\":1750:1799   */\n      mstore\n        /* \"#utility.yul\":1822:1861   */\n      tag_74\n        /* \"#utility.yul\":1854:1860   */\n      dup6\n        /* \"#utility.yul\":1845:1851   */\n      dup4\n        /* \"#utility.yul\":1839:1852   */\n      mload\n        /* \"#utility.yul\":1822:1861   */\n      tag_55\n      jump\t// in\n    tag_74:\n        /* \"#utility.yul\":1812:1861   */\n      swap5\n      pop\n        /* \"#utility.yul\":1919:1931   */\n      swap3\n      dup6\n      add\n      swap3\n        /* \"#utility.yul\":1884:1899   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":1723:1724   */\n      0x01\n        /* \"#utility.yul\":1716:1725   */\n      add\n        /* \"#utility.yul\":1687:1941   */\n      jump(tag_71)\n    tag_73:\n      pop\n        /* \"#utility.yul\":1958:1964   */\n      swap3\n      swap8\n        /* \"#utility.yul\":1170:1970   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1975:2102   */\n    tag_13:\n        /* \"#utility.yul\":2036:2046   */\n      0x4e487b71\n        /* \"#utility.yul\":2031:2034   */\n      0xe0\n        /* \"#utility.yul\":2027:2047   */\n      shl\n        /* \"#utility.yul\":2024:2025   */\n      0x00\n        /* \"#utility.yul\":2017:2048   */\n      mstore\n        /* \"#utility.yul\":2067:2071   */\n      0x41\n        /* \"#utility.yul\":2064:2065   */\n      0x04\n        /* \"#utility.yul\":2057:2072   */\n      mstore\n        /* \"#utility.yul\":2091:2095   */\n      0x24\n        /* \"#utility.yul\":2088:2089   */\n      0x00\n        /* \"#utility.yul\":2081:2096   */\n      revert\n        /* \"#utility.yul\":2107:2234   */\n    tag_22:\n        /* \"#utility.yul\":2168:2178   */\n      0x4e487b71\n        /* \"#utility.yul\":2163:2166   */\n      0xe0\n        /* \"#utility.yul\":2159:2179   */\n      shl\n        /* \"#utility.yul\":2156:2157   */\n      0x00\n        /* \"#utility.yul\":2149:2180   */\n      mstore\n        /* \"#utility.yul\":2199:2203   */\n      0x32\n        /* \"#utility.yul\":2196:2197   */\n      0x04\n        /* \"#utility.yul\":2189:2204   */\n      mstore\n        /* \"#utility.yul\":2223:2227   */\n      0x24\n        /* \"#utility.yul\":2220:2221   */\n      0x00\n        /* \"#utility.yul\":2213:2228   */\n      revert\n        /* \"#utility.yul\":2239:2760   */\n    tag_24:\n        /* \"#utility.yul\":2316:2320   */\n      0x00\n        /* \"#utility.yul\":2322:2328   */\n      dup1\n        /* \"#utility.yul\":2382:2393   */\n      dup4\n        /* \"#utility.yul\":2369:2394   */\n      calldataload\n        /* \"#utility.yul\":2476:2478   */\n      0x1e\n        /* \"#utility.yul\":2472:2479   */\n      not\n        /* \"#utility.yul\":2461:2469   */\n      dup5\n        /* \"#utility.yul\":2445:2459   */\n      calldatasize\n        /* \"#utility.yul\":2441:2470   */\n      sub\n        /* \"#utility.yul\":2437:2480   */\n      add\n        /* \"#utility.yul\":2417:2435   */\n      dup2\n        /* \"#utility.yul\":2413:2481   */\n      slt\n        /* \"#utility.yul\":2403:2499   */\n      tag_78\n      jumpi\n        /* \"#utility.yul\":2495:2496   */\n      0x00\n        /* \"#utility.yul\":2492:2493   */\n      dup1\n        /* \"#utility.yul\":2485:2497   */\n      revert\n        /* \"#utility.yul\":2403:2499   */\n    tag_78:\n        /* \"#utility.yul\":2522:2555   */\n      dup4\n      add\n        /* \"#utility.yul\":2574:2594   */\n      dup1\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":2617:2635   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2606:2636   */\n      dup3\n      gt\n        /* \"#utility.yul\":2603:2653   */\n      iszero\n      tag_79\n      jumpi\n        /* \"#utility.yul\":2649:2650   */\n      0x00\n        /* \"#utility.yul\":2646:2647   */\n      dup1\n        /* \"#utility.yul\":2639:2651   */\n      revert\n        /* \"#utility.yul\":2603:2653   */\n    tag_79:\n        /* \"#utility.yul\":2682:2686   */\n      0x20\n        /* \"#utility.yul\":2670:2687   */\n      add\n      swap2\n      pop\n        /* \"#utility.yul\":2713:2727   */\n      calldatasize\n        /* \"#utility.yul\":2709:2736   */\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":2699:2737   */\n      dup3\n      sgt\n        /* \"#utility.yul\":2696:2754   */\n      iszero\n      tag_80\n      jumpi\n        /* \"#utility.yul\":2750:2751   */\n      0x00\n        /* \"#utility.yul\":2747:2748   */\n      dup1\n        /* \"#utility.yul\":2740:2752   */\n      revert\n        /* \"#utility.yul\":2696:2754   */\n    tag_80:\n        /* \"#utility.yul\":2239:2760   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2765:2997   */\n    tag_29:\n        /* \"#utility.yul\":2804:2807   */\n      0x00\n      not(0x00)\n        /* \"#utility.yul\":2825:2842   */\n      dup3\n      eq\n        /* \"#utility.yul\":2822:2962   */\n      iszero\n      tag_82\n      jumpi\n        /* \"#utility.yul\":2884:2894   */\n      0x4e487b71\n        /* \"#utility.yul\":2879:2882   */\n      0xe0\n        /* \"#utility.yul\":2875:2895   */\n      shl\n        /* \"#utility.yul\":2872:2873   */\n      0x00\n        /* \"#utility.yul\":2865:2896   */\n      mstore\n        /* \"#utility.yul\":2919:2923   */\n      0x11\n        /* \"#utility.yul\":2916:2917   */\n      0x04\n        /* \"#utility.yul\":2909:2924   */\n      mstore\n        /* \"#utility.yul\":2947:2951   */\n      0x24\n        /* \"#utility.yul\":2944:2945   */\n      0x00\n        /* \"#utility.yul\":2937:2952   */\n      revert\n        /* \"#utility.yul\":2822:2962   */\n    tag_82:\n      pop\n        /* \"#utility.yul\":2989:2990   */\n      0x01\n        /* \"#utility.yul\":2978:2991   */\n      add\n      swap1\n        /* \"#utility.yul\":2765:2997   */\n      jump\t// out\n        /* \"#utility.yul\":3409:3683   */\n    tag_40:\n        /* \"#utility.yul\":3538:3541   */\n      0x00\n        /* \"#utility.yul\":3576:3582   */\n      dup3\n        /* \"#utility.yul\":3570:3583   */\n      mload\n        /* \"#utility.yul\":3592:3645   */\n      tag_85\n        /* \"#utility.yul\":3638:3644   */\n      dup2\n        /* \"#utility.yul\":3633:3636   */\n      dup5\n        /* \"#utility.yul\":3626:3630   */\n      0x20\n        /* \"#utility.yul\":3618:3624   */\n      dup8\n        /* \"#utility.yul\":3614:3631   */\n      add\n        /* \"#utility.yul\":3592:3645   */\n      tag_54\n      jump\t// in\n    tag_85:\n        /* \"#utility.yul\":3661:3677   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":3409:3683   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3688:3907   */\n    tag_53:\n        /* \"#utility.yul\":3837:3839   */\n      0x20\n        /* \"#utility.yul\":3826:3835   */\n      dup2\n        /* \"#utility.yul\":3819:3840   */\n      mstore\n        /* \"#utility.yul\":3800:3804   */\n      0x00\n        /* \"#utility.yul\":3857:3901   */\n      tag_31\n        /* \"#utility.yul\":3897:3899   */\n      0x20\n        /* \"#utility.yul\":3886:3895   */\n      dup4\n        /* \"#utility.yul\":3882:3900   */\n      add\n        /* \"#utility.yul\":3874:3880   */\n      dup5\n        /* \"#utility.yul\":3857:3901   */\n      tag_55\n      jump\t// in\n    stop\n    data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398 416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564\n\n    auxdata: 0xa264697066735822122081522307a49f495ce59744dd95b8bea4d9386d2cd47a271cfc2824f9736d24fe64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506104f7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ac9650d814610030575b600080fd5b61004361003e366004610295565b610059565b6040516100509190610366565b60405180910390f35b60608167ffffffffffffffff811115610074576100746103c8565b6040519080825280602002602001820160405280156100a757816020015b60608152602001906001900390816100925790505b50905060005b8281101561014757610117308585848181106100cb576100cb6103de565b90506020028101906100dd91906103f4565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061014e92505050565b828281518110610129576101296103de565b6020026020010181905250808061013f90610442565b9150506100ad565b5092915050565b6060610173838360405180606001604052806027815260200161049b6027913961017a565b9392505050565b60606001600160a01b0384163b6101e75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b031685604051610202919061046b565b600060405180830381855af49150503d806000811461023d576040519150601f19603f3d011682016040523d82523d6000602084013e610242565b606091505b509150915061025282828661025c565b9695505050505050565b6060831561026b575081610173565b82511561027b5782518084602001fd5b8160405162461bcd60e51b81526004016101de9190610487565b600080602083850312156102a857600080fd5b823567ffffffffffffffff808211156102c057600080fd5b818501915085601f8301126102d457600080fd5b8135818111156102e357600080fd5b8660208260051b85010111156102f857600080fd5b60209290920196919550909350505050565b60005b8381101561032557818101518382015260200161030d565b83811115610334576000848401525b50505050565b6000815180845261035281602086016020860161030a565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156103bb57603f198886030184526103a985835161033a565b9450928501929085019060010161038d565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261040b57600080fd5b83018035915067ffffffffffffffff82111561042657600080fd5b60200191503681900382131561043b57600080fd5b9250929050565b600060001982141561046457634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825161047d81846020870161030a565b9190910192915050565b602081526000610173602083018461033a56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122081522307a49f495ce59744dd95b8bea4d9386d2cd47a271cfc2824f9736d24fe64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F7 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x295 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x366 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x74 JUMPI PUSH2 0x74 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA7 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x92 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH2 0x117 ADDRESS DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xCB JUMPI PUSH2 0xCB PUSH2 0x3DE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xDD SWAP2 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x14E SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x129 JUMPI PUSH2 0x129 PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x13F SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAD JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x173 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x49B PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x17A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x1E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x202 SWAP2 SWAP1 PUSH2 0x46B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x242 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x252 DUP3 DUP3 DUP7 PUSH2 0x25C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x26B JUMPI POP DUP2 PUSH2 0x173 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x27B JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x487 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x325 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x352 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3BB JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x3A9 DUP6 DUP4 MLOAD PUSH2 0x33A JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x38D JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x464 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x47D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x30A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x173 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x33A JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220815223 SMOD LOG4 SWAP16 0x49 0x5C 0xE5 SWAP8 DIFFICULTY 0xDD SWAP6 0xB8 0xBE LOG4 0xD9 CODESIZE PUSH14 0x2CD47A271CFC2824F9736D24FE64 PUSH20 0x6F6C634300080B00330000000000000000000000 ",
							"sourceMap": "261:738:5:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@functionDelegateCall_735": {
									"entryPoint": 334,
									"id": 735,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionDelegateCall_770": {
									"entryPoint": 378,
									"id": 770,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@isContract_525": {
									"entryPoint": null,
									"id": 525,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@multicall_364": {
									"entryPoint": 89,
									"id": 364,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@verifyCallResult_801": {
									"entryPoint": 604,
									"id": 801,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr": {
									"entryPoint": 661,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_bytes": {
									"entryPoint": 826,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 1131,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 870,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1159,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"access_calldata_tail_t_bytes_calldata_ptr": {
									"entryPoint": 1012,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"copy_memory_to_memory": {
									"entryPoint": 778,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"increment_t_uint256": {
									"entryPoint": 1090,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 990,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 968,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3909:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "130:510:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "176:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "185:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "188:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "178:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "178:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "178:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "151:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "160:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "147:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "147:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "172:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "143:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "143:32:18"
															},
															"nodeType": "YulIf",
															"src": "140:52:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "201:37:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "228:9:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "215:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "215:23:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "205:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "247:28:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "257:18:18",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "251:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "302:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "311:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "314:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "304:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "304:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "304:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "290:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "298:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "287:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "287:14:18"
															},
															"nodeType": "YulIf",
															"src": "284:34:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "327:32:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "341:9:18"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "352:6:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "337:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "337:22:18"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "331:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "407:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "416:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "419:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "409:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "409:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "409:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "386:2:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "390:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "382:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "382:13:18"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "397:7:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "378:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "378:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "371:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "371:35:18"
															},
															"nodeType": "YulIf",
															"src": "368:55:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "432:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "459:2:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "446:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:16:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "436:6:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "489:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "498:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "501:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "491:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "491:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "491:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "477:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "485:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "474:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:14:18"
															},
															"nodeType": "YulIf",
															"src": "471:34:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "563:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "572:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "575:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "565:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "565:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "565:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "528:2:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "536:1:18",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "539:6:18"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "532:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "532:14:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "524:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "524:23:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "549:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "520:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "520:32:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "554:7:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "517:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "517:45:18"
															},
															"nodeType": "YulIf",
															"src": "514:65:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "588:21:18",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "602:2:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "606:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "598:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "598:11:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "588:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "618:16:18",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "628:6:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "618:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "88:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "99:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "111:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "119:6:18",
														"type": ""
													}
												],
												"src": "14:626:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "698:205:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "708:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "717:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "712:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "777:63:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "802:3:18"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "807:1:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "798:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "798:11:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "821:3:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "826:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "817:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "817:11:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "811:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "811:18:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "791:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "791:39:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "791:39:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "738:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "741:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "735:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "735:13:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "749:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "751:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "760:1:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "763:2:18",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "756:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "756:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "751:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "731:3:18",
																"statements": []
															},
															"src": "727:113:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "866:31:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "879:3:18"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "884:6:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "875:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "875:16:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "893:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "868:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "868:27:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "868:27:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "855:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "858:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "852:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "852:13:18"
															},
															"nodeType": "YulIf",
															"src": "849:48:18"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "676:3:18",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "681:3:18",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "686:6:18",
														"type": ""
													}
												],
												"src": "645:258:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "957:208:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "967:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "987:5:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "981:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "981:12:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "971:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1009:3:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1014:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1002:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1002:19:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1002:19:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1056:5:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1063:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1052:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1052:16:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1074:3:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1079:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1070:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1070:14:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1086:6:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1030:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1030:63:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1030:63:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1102:57:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1117:3:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1130:6:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1138:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1126:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1126:15:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1147:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1143:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1143:7:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1122:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1122:29:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1113:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1113:39:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1154:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1109:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1109:50:18"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1102:3:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "934:5:18",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "941:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "949:3:18",
														"type": ""
													}
												],
												"src": "908:257:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1339:631:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1349:12:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1359:2:18",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1353:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1370:32:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1388:9:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1399:2:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1384:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1384:18:18"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "1374:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1418:9:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1429:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1411:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1411:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1411:21:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1441:17:18",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "1452:6:18"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "1445:3:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1467:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1487:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1481:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1481:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1471:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "1510:6:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1518:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1503:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1503:22:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1503:22:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1534:25:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1545:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1556:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1541:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1541:18:18"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1534:3:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1568:53:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1590:9:18"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1605:1:18",
																						"type": "",
																						"value": "5"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "1608:6:18"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "1601:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1601:14:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1586:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1586:30:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1618:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1582:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1582:39:18"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nodeType": "YulTypedName",
																	"src": "1572:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1630:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1648:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1656:2:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1644:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1644:15:18"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "1634:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1668:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1677:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1672:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1736:205:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "1757:3:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tail_2",
																									"nodeType": "YulIdentifier",
																									"src": "1770:6:18"
																								},
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1778:9:18"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "1766:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1766:22:18"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "1794:2:18",
																									"type": "",
																									"value": "63"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "1790:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1790:7:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1762:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1762:36:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1750:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1750:49:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1750:49:18"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1812:49:18",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nodeType": "YulIdentifier",
																							"src": "1845:6:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1839:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1839:13:18"
																				},
																				{
																					"name": "tail_2",
																					"nodeType": "YulIdentifier",
																					"src": "1854:6:18"
																				}
																			],
																			"functionName": {
																				"name": "abi_encode_bytes",
																				"nodeType": "YulIdentifier",
																				"src": "1822:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1822:39:18"
																		},
																		"variableNames": [
																			{
																				"name": "tail_2",
																				"nodeType": "YulIdentifier",
																				"src": "1812:6:18"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1874:25:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "1888:6:18"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1896:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1884:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1884:15:18"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1874:6:18"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1912:19:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "1923:3:18"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1928:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1919:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1919:12:18"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1912:3:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1698:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1701:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1695:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1695:13:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1709:18:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1711:14:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1720:1:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1723:1:18",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1716:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1716:9:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1711:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1691:3:18",
																"statements": []
															},
															"src": "1687:254:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1950:14:18",
															"value": {
																"name": "tail_2",
																"nodeType": "YulIdentifier",
																"src": "1958:6:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1950:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1308:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1319:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1330:4:18",
														"type": ""
													}
												],
												"src": "1170:800:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2007:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2024:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2031:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2036:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2027:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2027:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2017:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2017:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2017:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2064:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2067:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2057:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2057:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2057:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2088:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2091:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2081:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2081:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2081:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1975:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2139:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2156:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2163:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2168:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2159:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2159:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2149:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2149:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2149:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2196:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2199:4:18",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2189:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2189:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2189:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2220:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2223:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2213:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2213:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2213:15:18"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "2107:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2333:427:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2343:51:18",
															"value": {
																"arguments": [
																	{
																		"name": "ptr_to_tail",
																		"nodeType": "YulIdentifier",
																		"src": "2382:11:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2369:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2369:25:18"
															},
															"variables": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulTypedName",
																	"src": "2347:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2483:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2492:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2495:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2485:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2485:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2485:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "rel_offset_of_tail",
																				"nodeType": "YulIdentifier",
																				"src": "2417:18:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "calldatasize",
																									"nodeType": "YulIdentifier",
																									"src": "2445:12:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2445:14:18"
																							},
																							{
																								"name": "base_ref",
																								"nodeType": "YulIdentifier",
																								"src": "2461:8:18"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "2441:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2441:29:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2476:2:18",
																								"type": "",
																								"value": "30"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2472:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2472:7:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2437:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2437:43:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2413:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2413:68:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2406:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2406:76:18"
															},
															"nodeType": "YulIf",
															"src": "2403:96:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2508:47:18",
															"value": {
																"arguments": [
																	{
																		"name": "base_ref",
																		"nodeType": "YulIdentifier",
																		"src": "2526:8:18"
																	},
																	{
																		"name": "rel_offset_of_tail",
																		"nodeType": "YulIdentifier",
																		"src": "2536:18:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2522:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2522:33:18"
															},
															"variables": [
																{
																	"name": "addr_1",
																	"nodeType": "YulTypedName",
																	"src": "2512:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2564:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "2587:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2574:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2574:20:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2564:6:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2637:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2646:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2649:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2639:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2639:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2639:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2609:6:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2617:18:18",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2606:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2606:30:18"
															},
															"nodeType": "YulIf",
															"src": "2603:50:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2662:25:18",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "2674:6:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2682:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2670:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2670:17:18"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nodeType": "YulIdentifier",
																	"src": "2662:4:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2738:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2747:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2750:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2740:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2740:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2740:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "2703:4:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "calldatasize",
																					"nodeType": "YulIdentifier",
																					"src": "2713:12:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2713:14:18"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2729:6:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2709:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2709:27:18"
																	}
																],
																"functionName": {
																	"name": "sgt",
																	"nodeType": "YulIdentifier",
																	"src": "2699:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2699:38:18"
															},
															"nodeType": "YulIf",
															"src": "2696:58:18"
														}
													]
												},
												"name": "access_calldata_tail_t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base_ref",
														"nodeType": "YulTypedName",
														"src": "2290:8:18",
														"type": ""
													},
													{
														"name": "ptr_to_tail",
														"nodeType": "YulTypedName",
														"src": "2300:11:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "addr",
														"nodeType": "YulTypedName",
														"src": "2316:4:18",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2322:6:18",
														"type": ""
													}
												],
												"src": "2239:521:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2812:185:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2851:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2872:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2879:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2884:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2875:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2875:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2865:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2865:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2865:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2916:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2919:4:18",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2909:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2909:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2909:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2944:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2947:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2937:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2937:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2937:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2828:5:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2839:1:18",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2835:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2835:6:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2825:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2825:17:18"
															},
															"nodeType": "YulIf",
															"src": "2822:140:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2971:20:18",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2982:5:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2989:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2978:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2978:13:18"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2971:3:18"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2794:5:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2804:3:18",
														"type": ""
													}
												],
												"src": "2765:232:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3176:228:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3193:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3204:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3186:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3186:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3186:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3227:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3238:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3223:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3223:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3243:2:18",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3216:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3216:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3216:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3266:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3277:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3262:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3262:18:18"
																	},
																	{
																		"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3282:34:18",
																		"type": "",
																		"value": "Address: delegate call to non-co"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3255:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3255:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3255:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3337:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3348:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3333:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3333:18:18"
																	},
																	{
																		"hexValue": "6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3353:8:18",
																		"type": "",
																		"value": "ntract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3326:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3326:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3326:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3371:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3383:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3394:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3379:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3379:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3371:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3153:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3167:4:18",
														"type": ""
													}
												],
												"src": "3002:402:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3546:137:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3556:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3576:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3570:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3570:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3560:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3618:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3626:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3614:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3614:17:18"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3633:3:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3638:6:18"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3592:21:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3592:53:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3592:53:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3654:23:18",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3665:3:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3670:6:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3661:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3661:16:18"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3654:3:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3522:3:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3527:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3538:3:18",
														"type": ""
													}
												],
												"src": "3409:274:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3809:98:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3826:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3837:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3819:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3819:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3819:21:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3849:52:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3874:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3886:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3897:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3882:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3882:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "3857:16:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3857:44:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3849:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3778:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3789:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3800:4:18",
														"type": ""
													}
												],
												"src": "3688:219:18"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ac9650d814610030575b600080fd5b61004361003e366004610295565b610059565b6040516100509190610366565b60405180910390f35b60608167ffffffffffffffff811115610074576100746103c8565b6040519080825280602002602001820160405280156100a757816020015b60608152602001906001900390816100925790505b50905060005b8281101561014757610117308585848181106100cb576100cb6103de565b90506020028101906100dd91906103f4565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061014e92505050565b828281518110610129576101296103de565b6020026020010181905250808061013f90610442565b9150506100ad565b5092915050565b6060610173838360405180606001604052806027815260200161049b6027913961017a565b9392505050565b60606001600160a01b0384163b6101e75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b031685604051610202919061046b565b600060405180830381855af49150503d806000811461023d576040519150601f19603f3d011682016040523d82523d6000602084013e610242565b606091505b509150915061025282828661025c565b9695505050505050565b6060831561026b575081610173565b82511561027b5782518084602001fd5b8160405162461bcd60e51b81526004016101de9190610487565b600080602083850312156102a857600080fd5b823567ffffffffffffffff808211156102c057600080fd5b818501915085601f8301126102d457600080fd5b8135818111156102e357600080fd5b8660208260051b85010111156102f857600080fd5b60209290920196919550909350505050565b60005b8381101561032557818101518382015260200161030d565b83811115610334576000848401525b50505050565b6000815180845261035281602086016020860161030a565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156103bb57603f198886030184526103a985835161033a565b9450928501929085019060010161038d565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261040b57600080fd5b83018035915067ffffffffffffffff82111561042657600080fd5b60200191503681900382131561043b57600080fd5b9250929050565b600060001982141561046457634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825161047d81846020870161030a565b9190910192915050565b602081526000610173602083018461033a56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122081522307a49f495ce59744dd95b8bea4d9386d2cd47a271cfc2824f9736d24fe64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x295 JUMP JUMPDEST PUSH2 0x59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x366 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x74 JUMPI PUSH2 0x74 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA7 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x92 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH2 0x117 ADDRESS DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xCB JUMPI PUSH2 0xCB PUSH2 0x3DE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xDD SWAP2 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x14E SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x129 JUMPI PUSH2 0x129 PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x13F SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAD JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x173 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x49B PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x17A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x1E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x202 SWAP2 SWAP1 PUSH2 0x46B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x242 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x252 DUP3 DUP3 DUP7 PUSH2 0x25C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x26B JUMPI POP DUP2 PUSH2 0x173 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x27B JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x487 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x325 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x352 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3BB JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x3A9 DUP6 DUP4 MLOAD PUSH2 0x33A JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x38D JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x464 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x47D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x30A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x173 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x33A JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220815223 SMOD LOG4 SWAP16 0x49 0x5C 0xE5 SWAP8 DIFFICULTY 0xDD SWAP6 0xB8 0xBE LOG4 0xD9 CODESIZE PUSH14 0x2CD47A271CFC2824F9736D24FE64 PUSH20 0x6F6C634300080B00330000000000000000000000 ",
							"sourceMap": "261:738:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;678:319;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;755:22;811:4;799:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;789:34;;838:9;833:134;853:15;;;833:134;;;902:54;941:4;948;;953:1;948:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;902:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;902:30:5;;-1:-1:-1;;;902:54:5:i;:::-;889:7;897:1;889:10;;;;;;;;:::i;:::-;;;;;;:67;;;;870:3;;;;;:::i;:::-;;;;833:134;;;;678:319;;;;:::o;6518:198:10:-;6601:12;6632:77;6653:6;6661:4;6632:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6625:84;6518:198;-1:-1:-1;;;6518:198:10:o;6902:387::-;7043:12;-1:-1:-1;;;;;1407:19:10;;;7067:69;;;;-1:-1:-1;;;7067:69:10;;3204:2:18;7067:69:10;;;3186:21:18;3243:2;3223:18;;;3216:30;3282:34;3262:18;;;3255:62;-1:-1:-1;;;3333:18:18;;;3326:36;3379:19;;7067:69:10;;;;;;;;;7148:12;7162:23;7189:6;-1:-1:-1;;;;;7189:19:10;7209:4;7189:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7147:67;;;;7231:51;7248:7;7257:10;7269:12;7231:16;:51::i;:::-;7224:58;6902:387;-1:-1:-1;;;;;;6902:387:10:o;7509:692::-;7655:12;7683:7;7679:516;;;-1:-1:-1;7713:10:10;7706:17;;7679:516;7824:17;;:21;7820:365;;8018:10;8012:17;8078:15;8065:10;8061:2;8057:19;8050:44;7820:365;8157:12;8150:20;;-1:-1:-1;;;8150:20:10;;;;;;;;:::i;14:626:18:-;111:6;119;172:2;160:9;151:7;147:23;143:32;140:52;;;188:1;185;178:12;140:52;228:9;215:23;257:18;298:2;290:6;287:14;284:34;;;314:1;311;304:12;284:34;352:6;341:9;337:22;327:32;;397:7;390:4;386:2;382:13;378:27;368:55;;419:1;416;409:12;368:55;459:2;446:16;485:2;477:6;474:14;471:34;;;501:1;498;491:12;471:34;554:7;549:2;539:6;536:1;532:14;528:2;524:23;520:32;517:45;514:65;;;575:1;572;565:12;514:65;606:2;598:11;;;;;628:6;;-1:-1:-1;14:626:18;;-1:-1:-1;;;;14:626:18:o;645:258::-;717:1;727:113;741:6;738:1;735:13;727:113;;;817:11;;;811:18;798:11;;;791:39;763:2;756:10;727:113;;;858:6;855:1;852:13;849:48;;;893:1;884:6;879:3;875:16;868:27;849:48;;645:258;;;:::o;908:257::-;949:3;987:5;981:12;1014:6;1009:3;1002:19;1030:63;1086:6;1079:4;1074:3;1070:14;1063:4;1056:5;1052:16;1030:63;:::i;:::-;1147:2;1126:15;-1:-1:-1;;1122:29:18;1113:39;;;;1154:4;1109:50;;908:257;-1:-1:-1;;908:257:18:o;1170:800::-;1330:4;1359:2;1399;1388:9;1384:18;1429:2;1418:9;1411:21;1452:6;1487;1481:13;1518:6;1510;1503:22;1556:2;1545:9;1541:18;1534:25;;1618:2;1608:6;1605:1;1601:14;1590:9;1586:30;1582:39;1568:53;;1656:2;1648:6;1644:15;1677:1;1687:254;1701:6;1698:1;1695:13;1687:254;;;1794:2;1790:7;1778:9;1770:6;1766:22;1762:36;1757:3;1750:49;1822:39;1854:6;1845;1839:13;1822:39;:::i;:::-;1812:49;-1:-1:-1;1919:12:18;;;;1884:15;;;;1723:1;1716:9;1687:254;;;-1:-1:-1;1958:6:18;;1170:800;-1:-1:-1;;;;;;;1170:800:18:o;1975:127::-;2036:10;2031:3;2027:20;2024:1;2017:31;2067:4;2064:1;2057:15;2091:4;2088:1;2081:15;2107:127;2168:10;2163:3;2159:20;2156:1;2149:31;2199:4;2196:1;2189:15;2223:4;2220:1;2213:15;2239:521;2316:4;2322:6;2382:11;2369:25;2476:2;2472:7;2461:8;2445:14;2441:29;2437:43;2417:18;2413:68;2403:96;;2495:1;2492;2485:12;2403:96;2522:33;;2574:20;;;-1:-1:-1;2617:18:18;2606:30;;2603:50;;;2649:1;2646;2639:12;2603:50;2682:4;2670:17;;-1:-1:-1;2713:14:18;2709:27;;;2699:38;;2696:58;;;2750:1;2747;2740:12;2696:58;2239:521;;;;;:::o;2765:232::-;2804:3;-1:-1:-1;;2825:17:18;;2822:140;;;2884:10;2879:3;2875:20;2872:1;2865:31;2919:4;2916:1;2909:15;2947:4;2944:1;2937:15;2822:140;-1:-1:-1;2989:1:18;2978:13;;2765:232::o;3409:274::-;3538:3;3576:6;3570:13;3592:53;3638:6;3633:3;3626:4;3618:6;3614:17;3592:53;:::i;:::-;3661:16;;;;;3409:274;-1:-1:-1;;3409:274:18:o;3688:219::-;3837:2;3826:9;3819:21;3800:4;3857:44;3897:2;3886:9;3882:18;3874:6;3857:44;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "254200",
								"executionCost": "294",
								"totalCost": "254494"
							},
							"external": {
								"multicall(bytes[])": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 261,
									"end": 999,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 261,
									"end": 999,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 261,
									"end": 999,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122081522307a49f495ce59744dd95b8bea4d9386d2cd47a271cfc2824f9736d24fe64736f6c634300080b0033",
									".code": [
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH",
											"source": 5,
											"value": "AC9650D8"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 999,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 261,
											"end": 999,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 755,
											"end": 777,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 811,
											"end": 815,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 799,
											"end": 823,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 799,
											"end": 823,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 789,
											"end": 823,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 789,
											"end": 823,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 838,
											"end": 847,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 853,
											"end": 868,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 853,
											"end": 868,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 853,
											"end": 868,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 941,
											"end": 945,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 948,
											"end": 952,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 948,
											"end": 952,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 953,
											"end": 954,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "tag",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 948,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 948,
											"end": 955,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "CALLDATACOPY",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 956,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 902,
											"end": 932,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 902,
											"end": 932,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 902,
											"end": 956,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 902,
											"end": 956,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 889,
											"end": 896,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 897,
											"end": 898,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "tag",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 889,
											"end": 899,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 889,
											"end": 899,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 889,
											"end": 956,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 889,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 889,
											"end": 956,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 889,
											"end": 956,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 870,
											"end": 873,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 870,
											"end": 873,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 870,
											"end": 873,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 870,
											"end": 873,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 870,
											"end": 873,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "tag",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 833,
											"end": 967,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 833,
											"end": 967,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 678,
											"end": 997,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 6518,
											"end": 6716,
											"name": "tag",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 6518,
											"end": 6716,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6601,
											"end": 6613,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 6653,
											"end": 6659,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6661,
											"end": 6665,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH data",
											"source": 10,
											"value": "9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "PUSH",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "CODECOPY",
											"source": 10
										},
										{
											"begin": 6632,
											"end": 6652,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 6632,
											"end": 6709,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6625,
											"end": 6709,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6518,
											"end": 6716,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6518,
											"end": 6716,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6902,
											"end": 7289,
											"name": "tag",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 6902,
											"end": 7289,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7043,
											"end": 7055,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1407,
											"end": 1426,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1407,
											"end": 1426,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1407,
											"end": 1426,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3204,
											"end": 3206,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3186,
											"end": 3207,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3243,
											"end": 3245,
											"name": "PUSH",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 3223,
											"end": 3241,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 3223,
											"end": 3241,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3223,
											"end": 3241,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3216,
											"end": 3246,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3282,
											"end": 3316,
											"name": "PUSH",
											"source": 18,
											"value": "416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F"
										},
										{
											"begin": 3262,
											"end": 3280,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 3262,
											"end": 3280,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3262,
											"end": 3280,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3255,
											"end": 3317,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3333,
											"end": 3351,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 3333,
											"end": 3351,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3333,
											"end": 3351,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3326,
											"end": 3362,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3379,
											"end": 3398,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 3379,
											"end": 3398,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "tag",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 7067,
											"end": 7136,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7148,
											"end": 7160,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7162,
											"end": 7185,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7195,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7189,
											"end": 7208,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7209,
											"end": 7213,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DELEGATECALL",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "3F"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7189,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7147,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7147,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7147,
											"end": 7214,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7147,
											"end": 7214,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7231,
											"end": 7282,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7248,
											"end": 7255,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7257,
											"end": 7267,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7269,
											"end": 7281,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 7231,
											"end": 7247,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 7231,
											"end": 7282,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7231,
											"end": 7282,
											"name": "tag",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7231,
											"end": 7282,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7224,
											"end": 7282,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 6902,
											"end": 7289,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6902,
											"end": 7289,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7509,
											"end": 8201,
											"name": "tag",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 7509,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7655,
											"end": 7667,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7683,
											"end": 7690,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7713,
											"end": 7723,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7706,
											"end": 7723,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 7706,
											"end": 7723,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "tag",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 7679,
											"end": 8195,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7824,
											"end": 7841,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7824,
											"end": 7841,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7824,
											"end": 7845,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7820,
											"end": 8185,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 7820,
											"end": 8185,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8018,
											"end": 8028,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8012,
											"end": 8029,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8078,
											"end": 8093,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8065,
											"end": 8075,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8063,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8057,
											"end": 8076,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8050,
											"end": 8094,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7820,
											"end": 8185,
											"name": "tag",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 7820,
											"end": 8185,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8157,
											"end": 8169,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 8150,
											"end": 8170,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 640,
											"name": "tag",
											"source": 18,
											"value": "6"
										},
										{
											"begin": 14,
											"end": 640,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 111,
											"end": 117,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 125,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 172,
											"end": 174,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 160,
											"end": 169,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 151,
											"end": 158,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 147,
											"end": 170,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 143,
											"end": 175,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 140,
											"end": 192,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 140,
											"end": 192,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "58"
										},
										{
											"begin": 140,
											"end": 192,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 188,
											"end": 189,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 185,
											"end": 186,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 178,
											"end": 190,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 140,
											"end": 192,
											"name": "tag",
											"source": 18,
											"value": "58"
										},
										{
											"begin": 140,
											"end": 192,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 228,
											"end": 237,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 215,
											"end": 238,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 257,
											"end": 275,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 298,
											"end": 300,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 290,
											"end": 296,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 287,
											"end": 301,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 284,
											"end": 318,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 284,
											"end": 318,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "59"
										},
										{
											"begin": 284,
											"end": 318,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 314,
											"end": 315,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 312,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 304,
											"end": 316,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 284,
											"end": 318,
											"name": "tag",
											"source": 18,
											"value": "59"
										},
										{
											"begin": 284,
											"end": 318,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 352,
											"end": 358,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 341,
											"end": 350,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 337,
											"end": 359,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 327,
											"end": 359,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 327,
											"end": 359,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 397,
											"end": 404,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 390,
											"end": 394,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 386,
											"end": 388,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 382,
											"end": 395,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 378,
											"end": 405,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 368,
											"end": 423,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 368,
											"end": 423,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 419,
											"end": 420,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 416,
											"end": 417,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 409,
											"end": 421,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 368,
											"end": 423,
											"name": "tag",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 368,
											"end": 423,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 459,
											"end": 461,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 446,
											"end": 462,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 485,
											"end": 487,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 477,
											"end": 483,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 474,
											"end": 488,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 471,
											"end": 505,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 471,
											"end": 505,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "61"
										},
										{
											"begin": 471,
											"end": 505,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 501,
											"end": 502,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 498,
											"end": 499,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 491,
											"end": 503,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 471,
											"end": 505,
											"name": "tag",
											"source": 18,
											"value": "61"
										},
										{
											"begin": 471,
											"end": 505,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 554,
											"end": 561,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 549,
											"end": 551,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 539,
											"end": 545,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 536,
											"end": 537,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 532,
											"end": 546,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 528,
											"end": 530,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 524,
											"end": 547,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 520,
											"end": 552,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 517,
											"end": 562,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 514,
											"end": 579,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 514,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "62"
										},
										{
											"begin": 514,
											"end": 579,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 575,
											"end": 576,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 573,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 565,
											"end": 577,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 514,
											"end": 579,
											"name": "tag",
											"source": 18,
											"value": "62"
										},
										{
											"begin": 514,
											"end": 579,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 606,
											"end": 608,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 598,
											"end": 609,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 598,
											"end": 609,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 598,
											"end": 609,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 598,
											"end": 609,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 598,
											"end": 609,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 628,
											"end": 634,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 628,
											"end": 634,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 640,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 14,
											"end": 640,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 640,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 645,
											"end": 903,
											"name": "tag",
											"source": 18,
											"value": "54"
										},
										{
											"begin": 645,
											"end": 903,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 717,
											"end": 718,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 840,
											"name": "tag",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 727,
											"end": 840,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 741,
											"end": 747,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 738,
											"end": 739,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 735,
											"end": 748,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 727,
											"end": 840,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 727,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "66"
										},
										{
											"begin": 727,
											"end": 840,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 817,
											"end": 828,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 817,
											"end": 828,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 817,
											"end": 828,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 811,
											"end": 829,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 798,
											"end": 809,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 798,
											"end": 809,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 798,
											"end": 809,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 791,
											"end": 830,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 763,
											"end": 765,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 756,
											"end": 766,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 727,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 727,
											"end": 840,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 727,
											"end": 840,
											"name": "tag",
											"source": 18,
											"value": "66"
										},
										{
											"begin": 727,
											"end": 840,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 858,
											"end": 864,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 855,
											"end": 856,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 852,
											"end": 865,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 849,
											"end": 897,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 849,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "67"
										},
										{
											"begin": 849,
											"end": 897,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 893,
											"end": 894,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 884,
											"end": 890,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 879,
											"end": 882,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 875,
											"end": 891,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 868,
											"end": 895,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 849,
											"end": 897,
											"name": "tag",
											"source": 18,
											"value": "67"
										},
										{
											"begin": 849,
											"end": 897,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 849,
											"end": 897,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 645,
											"end": 903,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 645,
											"end": 903,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 645,
											"end": 903,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 645,
											"end": 903,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 908,
											"end": 1165,
											"name": "tag",
											"source": 18,
											"value": "55"
										},
										{
											"begin": 908,
											"end": 1165,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 949,
											"end": 952,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 987,
											"end": 992,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 981,
											"end": 993,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1014,
											"end": 1020,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1009,
											"end": 1012,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1002,
											"end": 1021,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "69"
										},
										{
											"begin": 1086,
											"end": 1092,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1079,
											"end": 1083,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1074,
											"end": 1077,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1070,
											"end": 1084,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1063,
											"end": 1067,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1056,
											"end": 1061,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1052,
											"end": 1068,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "54"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "tag",
											"source": 18,
											"value": "69"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1147,
											"end": 1149,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 1126,
											"end": 1141,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1122,
											"end": 1151,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1113,
											"end": 1152,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1113,
											"end": 1152,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1113,
											"end": 1152,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1113,
											"end": 1152,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1154,
											"end": 1158,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1109,
											"end": 1159,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1109,
											"end": 1159,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 908,
											"end": 1165,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 908,
											"end": 1165,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1170,
											"end": 1970,
											"name": "tag",
											"source": 18,
											"value": "9"
										},
										{
											"begin": 1170,
											"end": 1970,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1330,
											"end": 1334,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1359,
											"end": 1361,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1399,
											"end": 1401,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1388,
											"end": 1397,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1384,
											"end": 1402,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1429,
											"end": 1431,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1418,
											"end": 1427,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1411,
											"end": 1432,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1452,
											"end": 1458,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1487,
											"end": 1493,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1481,
											"end": 1494,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1518,
											"end": 1524,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1510,
											"end": 1516,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1503,
											"end": 1525,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1556,
											"end": 1558,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1545,
											"end": 1554,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1541,
											"end": 1559,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1534,
											"end": 1559,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1534,
											"end": 1559,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1618,
											"end": 1620,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1608,
											"end": 1614,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1605,
											"end": 1606,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 1601,
											"end": 1615,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1590,
											"end": 1599,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1586,
											"end": 1616,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1582,
											"end": 1621,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1568,
											"end": 1621,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1568,
											"end": 1621,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1656,
											"end": 1658,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1648,
											"end": 1654,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1644,
											"end": 1659,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1677,
											"end": 1678,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "tag",
											"source": 18,
											"value": "71"
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1701,
											"end": 1707,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1698,
											"end": 1699,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1695,
											"end": 1708,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "73"
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1794,
											"end": 1796,
											"name": "PUSH",
											"source": 18,
											"value": "3F"
										},
										{
											"begin": 1790,
											"end": 1797,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 1778,
											"end": 1787,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 1770,
											"end": 1776,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1766,
											"end": 1788,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1762,
											"end": 1798,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1757,
											"end": 1760,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1750,
											"end": 1799,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1822,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "74"
										},
										{
											"begin": 1854,
											"end": 1860,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1845,
											"end": 1851,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1839,
											"end": 1852,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1822,
											"end": 1861,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "55"
										},
										{
											"begin": 1822,
											"end": 1861,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1822,
											"end": 1861,
											"name": "tag",
											"source": 18,
											"value": "74"
										},
										{
											"begin": 1822,
											"end": 1861,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1812,
											"end": 1861,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1919,
											"end": 1931,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1919,
											"end": 1931,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1919,
											"end": 1931,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1919,
											"end": 1931,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1884,
											"end": 1899,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1884,
											"end": 1899,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1884,
											"end": 1899,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1884,
											"end": 1899,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1723,
											"end": 1724,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1716,
											"end": 1725,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "71"
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "tag",
											"source": 18,
											"value": "73"
										},
										{
											"begin": 1687,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1958,
											"end": 1964,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1958,
											"end": 1964,
											"name": "SWAP8",
											"source": 18
										},
										{
											"begin": 1170,
											"end": 1970,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1170,
											"end": 1970,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1975,
											"end": 2102,
											"name": "tag",
											"source": 18,
											"value": "13"
										},
										{
											"begin": 1975,
											"end": 2102,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2036,
											"end": 2046,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 2031,
											"end": 2034,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2027,
											"end": 2047,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2024,
											"end": 2025,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2017,
											"end": 2048,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2067,
											"end": 2071,
											"name": "PUSH",
											"source": 18,
											"value": "41"
										},
										{
											"begin": 2064,
											"end": 2065,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2057,
											"end": 2072,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2091,
											"end": 2095,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2088,
											"end": 2089,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2081,
											"end": 2096,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2107,
											"end": 2234,
											"name": "tag",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 2107,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2168,
											"end": 2178,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 2163,
											"end": 2166,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2159,
											"end": 2179,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2156,
											"end": 2157,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2149,
											"end": 2180,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2199,
											"end": 2203,
											"name": "PUSH",
											"source": 18,
											"value": "32"
										},
										{
											"begin": 2196,
											"end": 2197,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2189,
											"end": 2204,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2223,
											"end": 2227,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2220,
											"end": 2221,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2213,
											"end": 2228,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2239,
											"end": 2760,
											"name": "tag",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2239,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2316,
											"end": 2320,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2322,
											"end": 2328,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2382,
											"end": 2393,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2369,
											"end": 2394,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2476,
											"end": 2478,
											"name": "PUSH",
											"source": 18,
											"value": "1E"
										},
										{
											"begin": 2472,
											"end": 2479,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 2461,
											"end": 2469,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2445,
											"end": 2459,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 2441,
											"end": 2470,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2437,
											"end": 2480,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2417,
											"end": 2435,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2413,
											"end": 2481,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2403,
											"end": 2499,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 2403,
											"end": 2499,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2495,
											"end": 2496,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2492,
											"end": 2493,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2485,
											"end": 2497,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2403,
											"end": 2499,
											"name": "tag",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 2403,
											"end": 2499,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2522,
											"end": 2555,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2522,
											"end": 2555,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2574,
											"end": 2594,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2574,
											"end": 2594,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2574,
											"end": 2594,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2617,
											"end": 2635,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2606,
											"end": 2636,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2606,
											"end": 2636,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 2603,
											"end": 2653,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2603,
											"end": 2653,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "79"
										},
										{
											"begin": 2603,
											"end": 2653,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2649,
											"end": 2650,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2646,
											"end": 2647,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2639,
											"end": 2651,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2603,
											"end": 2653,
											"name": "tag",
											"source": 18,
											"value": "79"
										},
										{
											"begin": 2603,
											"end": 2653,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2682,
											"end": 2686,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2670,
											"end": 2687,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2670,
											"end": 2687,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2713,
											"end": 2727,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 2709,
											"end": 2736,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2709,
											"end": 2736,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2709,
											"end": 2736,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2699,
											"end": 2737,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2699,
											"end": 2737,
											"name": "SGT",
											"source": 18
										},
										{
											"begin": 2696,
											"end": 2754,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2696,
											"end": 2754,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2696,
											"end": 2754,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2750,
											"end": 2751,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2747,
											"end": 2748,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2740,
											"end": 2752,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2696,
											"end": 2754,
											"name": "tag",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 2696,
											"end": 2754,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2239,
											"end": 2760,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2239,
											"end": 2760,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2239,
											"end": 2760,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2239,
											"end": 2760,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2239,
											"end": 2760,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2239,
											"end": 2760,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2765,
											"end": 2997,
											"name": "tag",
											"source": 18,
											"value": "29"
										},
										{
											"begin": 2765,
											"end": 2997,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2804,
											"end": 2807,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2825,
											"end": 2842,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2825,
											"end": 2842,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2822,
											"end": 2962,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2822,
											"end": 2962,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "82"
										},
										{
											"begin": 2822,
											"end": 2962,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2884,
											"end": 2894,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 2879,
											"end": 2882,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2875,
											"end": 2895,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2872,
											"end": 2873,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2865,
											"end": 2896,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2919,
											"end": 2923,
											"name": "PUSH",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 2916,
											"end": 2917,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2909,
											"end": 2924,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2947,
											"end": 2951,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2944,
											"end": 2945,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2937,
											"end": 2952,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2822,
											"end": 2962,
											"name": "tag",
											"source": 18,
											"value": "82"
										},
										{
											"begin": 2822,
											"end": 2962,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2989,
											"end": 2990,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 2978,
											"end": 2991,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2978,
											"end": 2991,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2765,
											"end": 2997,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 3409,
											"end": 3683,
											"name": "tag",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 3409,
											"end": 3683,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3538,
											"end": 3541,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3576,
											"end": 3582,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3570,
											"end": 3583,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 3592,
											"end": 3645,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "85"
										},
										{
											"begin": 3638,
											"end": 3644,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3633,
											"end": 3636,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3626,
											"end": 3630,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3618,
											"end": 3624,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 3614,
											"end": 3631,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3592,
											"end": 3645,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "54"
										},
										{
											"begin": 3592,
											"end": 3645,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 3592,
											"end": 3645,
											"name": "tag",
											"source": 18,
											"value": "85"
										},
										{
											"begin": 3592,
											"end": 3645,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3661,
											"end": 3677,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3661,
											"end": 3677,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3661,
											"end": 3677,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3661,
											"end": 3677,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3661,
											"end": 3677,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3409,
											"end": 3683,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3409,
											"end": 3683,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 3688,
											"end": 3907,
											"name": "tag",
											"source": 18,
											"value": "53"
										},
										{
											"begin": 3688,
											"end": 3907,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3837,
											"end": 3839,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3835,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3819,
											"end": 3840,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3800,
											"end": 3804,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3857,
											"end": 3901,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 3897,
											"end": 3899,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3886,
											"end": 3895,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3882,
											"end": 3900,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3874,
											"end": 3880,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3857,
											"end": 3901,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "55"
										},
										{
											"begin": 3857,
											"end": 3901,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										}
									],
									".data": {
										"9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides a function to batch together multiple calls in a single external call. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"extension/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"extension/Multicall.sol\":{\"keccak256\":\"0x786f697de4ca3ea6538de8e7a491744f7dcf07607a8b8cdd55e18e6cf5065d1e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://b4f8b42f64cd0177ad3db597d68e608822f7616e6737e89bc98890a9300d67a7\",\"dweb:/ipfs/QmRQfw5TXvkEkKiUgnQw2HWLJmU7PyFhgUXQAAPtpcQ8JK\"]},\"extension/interface/IMulticall.sol\":{\"keccak256\":\"0xed60ae2fe1dc703fac2e749de0ab11816a408caca78544e9aa2de559a9b57dab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12979ce3edf286d313f2056c9995ce03c5fc36e6a74d0c8c1ddaaf4a2ff6a9d2\",\"dweb:/ipfs/QmevKW4ui2SbBNGyiZR71pMdCprZpgz8ECB3GPZ4SFt5Kq\"]},\"lib/TWAddress.sol\":{\"keccak256\":\"0x64bad93ff4e8ccc24a800b84a882a44f0d3f89a36f5ae7babf7eba3d400cded4\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://6a22a5002533f7261207c6f4a4ae0c7fd96725e457d4ef9f8d10f81e22d720e0\",\"dweb:/ipfs/QmU8HtjhZReUMnZwqouzNk8mWqAbXcrHnHKRFWpk25C6UG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes[])": {
								"notice": "Receives and executes a batch of function calls on this contract."
							}
						},
						"version": 1
					}
				}
			},
			"extension/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "prevOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"setOwner(address)": {
								"params": {
									"_newOwner": "The address to set as the new owner of the contract."
								}
							}
						},
						"stateVariables": {
							"_owner": {
								"details": "Owner of the contract (purpose: OpenSea compatibility)"
							}
						},
						"title": "Ownable",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}}},\"stateVariables\":{\"_owner\":{\"details\":\"Owner of the contract (purpose: OpenSea compatibility)\"}},\"title\":\"Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"}},\"notice\":\"Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses           information about who the contract's owner is.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"extension/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"extension/Ownable.sol\":{\"keccak256\":\"0x81af362c307b177241b6cba2f7ce247255c8808ab1beb4a20ef73137f6281370\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0c901d44bfae9c6dc0313172ed8697d2f8b0ec286da4259b422df657a5565fb7\",\"dweb:/ipfs/QmPKtKu5hszbGitqVu5MjGtRhzk1yP56iy38UM9h9X1prY\"]},\"extension/interface/IOwnable.sol\":{\"keccak256\":\"0x7940f02f9b82c4f56f1550edf0a6ff0756b122a474aaa1696744e4e93d122d51\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9405259f8619be8b2a1ebfccc3422f52649d1a9f1db613bdcedafcbf4bcadc55\",\"dweb:/ipfs/QmUsSgUAMitLkHaT1tiUUkpRijTETxAZDqm3i1WPmPoLcF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 374,
								"contract": "extension/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"owner()": {
								"notice": "Returns the owner of the contract."
							},
							"setOwner(address)": {
								"notice": "Lets an authorized wallet set a new owner for the contract."
							}
						},
						"notice": "Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses           information about who the contract's owner is.",
						"version": 1
					}
				}
			},
			"extension/interface/IContractMetadata.sol": {
				"IContractMetadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "string",
									"name": "prevURI",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "newURI",
									"type": "string"
								}
							],
							"name": "ContractURIUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "contractURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_uri",
									"type": "string"
								}
							],
							"name": "setContractURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"ContractURIUpdated(string,string)": {
								"details": "Emitted when the contract URI is updated."
							}
						},
						"kind": "dev",
						"methods": {
							"contractURI()": {
								"details": "Returns the metadata URI of the contract."
							},
							"setContractURI(string)": {
								"details": "Sets contract URI for the storefront-level metadata of the contract.       Only module admin can call this function."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"contractURI()": "e8a3d485",
							"setContractURI(string)": "938e3d7b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ContractURIUpdated(string,string)\":{\"details\":\"Emitted when the contract URI is updated.\"}},\"kind\":\"dev\",\"methods\":{\"contractURI()\":{\"details\":\"Returns the metadata URI of the contract.\"},\"setContractURI(string)\":{\"details\":\"Sets contract URI for the storefront-level metadata of the contract.       Only module admin can call this function.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI  for you contract.  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"extension/interface/IContractMetadata.sol\":\"IContractMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x1fcbe96e8ec5c383aa27706a09cef56c4f956cca1a16ec824ae5765cc2943dfd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://589882546f80bf827147e5ae6acc24b632ddf5fa0b2274e8cfc0329fec02fda6\",\"dweb:/ipfs/QmUJBcmJnHf4zPQKgDnBjWBAUzjaJNPTMKUkvNrKnF3gCR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI  for you contract.  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.",
						"version": 1
					}
				}
			},
			"extension/interface/IMulticall.sol": {
				"IMulticall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides a function to batch together multiple calls in a single external call. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "Receives and executes a batch of function calls on this contract."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides a function to batch together multiple calls in a single external call. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"extension/interface/IMulticall.sol\":\"IMulticall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"extension/interface/IMulticall.sol\":{\"keccak256\":\"0xed60ae2fe1dc703fac2e749de0ab11816a408caca78544e9aa2de559a9b57dab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12979ce3edf286d313f2056c9995ce03c5fc36e6a74d0c8c1ddaaf4a2ff6a9d2\",\"dweb:/ipfs/QmevKW4ui2SbBNGyiZR71pMdCprZpgz8ECB3GPZ4SFt5Kq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"extension/interface/IOwnable.sol": {
				"IOwnable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "prevOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"OwnerUpdated(address,address)": {
								"details": "Emitted when a new Owner is set."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the owner of the contract."
							},
							"setOwner(address)": {
								"details": "Lets a module admin set a new owner for the contract. The new owner must be a module admin."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OwnerUpdated(address,address)\":{\"details\":\"Emitted when a new Owner is set.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"setOwner(address)\":{\"details\":\"Lets a module admin set a new owner for the contract. The new owner must be a module admin.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses  information about who the contract's owner is.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"extension/interface/IOwnable.sol\":\"IOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"extension/interface/IOwnable.sol\":{\"keccak256\":\"0x7940f02f9b82c4f56f1550edf0a6ff0756b122a474aaa1696744e4e93d122d51\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://9405259f8619be8b2a1ebfccc3422f52649d1a9f1db613bdcedafcbf4bcadc55\",\"dweb:/ipfs/QmUsSgUAMitLkHaT1tiUUkpRijTETxAZDqm3i1WPmPoLcF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses  information about who the contract's owner is.",
						"version": 1
					}
				}
			},
			"lib/TWAddress.sol": {
				"TWAddress": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/TWAddress.sol\":134:8203  library TWAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/TWAddress.sol\":134:8203  library TWAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220120e40a89d41c748983578861910c33ed845ef21b3ba60730b10b88b577722c164736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220120e40a89d41c748983578861910c33ed845ef21b3ba60730b10b88b577722c164736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xE BLOCKHASH 0xA8 SWAP14 COINBASE 0xC7 BASEFEE SWAP9 CALLDATALOAD PUSH25 0x861910C33ED845EF21B3BA60730B10B88B577722C164736F6C PUSH4 0x4300080B STOP CALLER ",
							"sourceMap": "134:8069:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;134:8069:10;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220120e40a89d41c748983578861910c33ed845ef21b3ba60730b10b88b577722c164736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xE BLOCKHASH 0xA8 SWAP14 COINBASE 0xC7 BASEFEE SWAP9 CALLDATALOAD PUSH25 0x861910C33ED845EF21B3BA60730B10B88B577722C164736F6C PUSH4 0x4300080B STOP CALLER ",
							"sourceMap": "134:8069:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 134,
									"end": 8203,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220120e40a89d41c748983578861910c33ed845ef21b3ba60730b10b88b577722c164736f6c634300080b0033",
									".code": [
										{
											"begin": 134,
											"end": 8203,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 134,
											"end": 8203,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 134,
											"end": 8203,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 134,
											"end": 8203,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 8203,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 8203,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 134,
											"end": 8203,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 8203,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 134,
											"end": 8203,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/TWAddress.sol\":\"TWAddress\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/TWAddress.sol\":{\"keccak256\":\"0x64bad93ff4e8ccc24a800b84a882a44f0d3f89a36f5ae7babf7eba3d400cded4\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://6a22a5002533f7261207c6f4a4ae0c7fd96725e457d4ef9f8d10f81e22d720e0\",\"dweb:/ipfs/QmU8HtjhZReUMnZwqouzNk8mWqAbXcrHnHKRFWpk25C6UG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/TWStrings.sol": {
				"TWStrings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/TWStrings.sol\":101:1988  library TWStrings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/TWStrings.sol\":101:1988  library TWStrings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207ad089ef91e8704a8245467c553619c064bd4779ba4c77b7e8638384a20add8d64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ad089ef91e8704a8245467c553619c064bd4779ba4c77b7e8638384a20add8d64736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xD089EF91E8704A8245467C553619C064BD4779BA4C77B7E8638384 LOG2 EXP 0xDD DUP14 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "101:1887:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;101:1887:11;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ad089ef91e8704a8245467c553619c064bd4779ba4c77b7e8638384a20add8d64736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xD089EF91E8704A8245467C553619C064BD4779BA4C77B7E8638384 LOG2 EXP 0xDD DUP14 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "101:1887:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 101,
									"end": 1988,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207ad089ef91e8704a8245467c553619c064bd4779ba4c77b7e8638384a20add8d64736f6c634300080b0033",
									".code": [
										{
											"begin": 101,
											"end": 1988,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 101,
											"end": 1988,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 101,
											"end": 1988,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 101,
											"end": 1988,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 101,
											"end": 1988,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 101,
											"end": 1988,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 101,
											"end": 1988,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 101,
											"end": 1988,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 101,
											"end": 1988,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/TWStrings.sol\":\"TWStrings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/TWStrings.sol\":{\"keccak256\":\"0x397c71618c46cacdd241e5ce269e8084b49e4372e7170d4e8873a6b530da305d\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://f2fa573cf225c7e9c3a8b352c8a4bcb650ca22d15bd05335c301a3cac3599a81\",\"dweb:/ipfs/QmUCNUdwzLXq2DA1gKYjFJgjqosC8HqnXMd5udJ2GbKUfa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-presets/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":1434:12657  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2009:2122  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2075:2088  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2075:2080  _name */\n  0x03\n  swap1\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2075:2088  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2098:2115  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2098:2105  _symbol */\n  0x04\n  swap1\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2098:2115  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2009:2122  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":1434:12657  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  jump(tag_23)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:141   */\ntag_21:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_22:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_26\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_26:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_28\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_28\n  tag_21\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_30\n  tag_21\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_31:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_32:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_32)\ntag_34:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_35:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1598   */\ntag_3:\n    /* \"#utility.yul\":1135:1141   */\n  0x00\n    /* \"#utility.yul\":1143:1149   */\n  dup1\n    /* \"#utility.yul\":1196:1198   */\n  0x40\n    /* \"#utility.yul\":1184:1193   */\n  dup4\n    /* \"#utility.yul\":1175:1182   */\n  dup6\n    /* \"#utility.yul\":1171:1194   */\n  sub\n    /* \"#utility.yul\":1167:1199   */\n  slt\n    /* \"#utility.yul\":1164:1216   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1212:1213   */\n  0x00\n    /* \"#utility.yul\":1209:1210   */\n  dup1\n    /* \"#utility.yul\":1202:1214   */\n  revert\n    /* \"#utility.yul\":1164:1216   */\ntag_37:\n    /* \"#utility.yul\":1239:1255   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1304:1318   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1301:1335   */\n  iszero\n  tag_38\n  jumpi\n    /* \"#utility.yul\":1331:1332   */\n  0x00\n    /* \"#utility.yul\":1328:1329   */\n  dup1\n    /* \"#utility.yul\":1321:1333   */\n  revert\n    /* \"#utility.yul\":1301:1335   */\ntag_38:\n    /* \"#utility.yul\":1354:1415   */\n  tag_39\n    /* \"#utility.yul\":1407:1414   */\n  dup7\n    /* \"#utility.yul\":1398:1404   */\n  dup4\n    /* \"#utility.yul\":1387:1396   */\n  dup8\n    /* \"#utility.yul\":1383:1405   */\n  add\n    /* \"#utility.yul\":1354:1415   */\n  tag_22\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1344:1415   */\n  swap4\n  pop\n    /* \"#utility.yul\":1461:1463   */\n  0x20\n    /* \"#utility.yul\":1450:1459   */\n  dup6\n    /* \"#utility.yul\":1446:1464   */\n  add\n    /* \"#utility.yul\":1440:1465   */\n  mload\n    /* \"#utility.yul\":1424:1465   */\n  swap2\n  pop\n    /* \"#utility.yul\":1490:1492   */\n  dup1\n    /* \"#utility.yul\":1480:1488   */\n  dup3\n    /* \"#utility.yul\":1477:1493   */\n  gt\n    /* \"#utility.yul\":1474:1510   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1506:1507   */\n  0x00\n    /* \"#utility.yul\":1503:1504   */\n  dup1\n    /* \"#utility.yul\":1496:1508   */\n  revert\n    /* \"#utility.yul\":1474:1510   */\ntag_40:\n  pop\n    /* \"#utility.yul\":1529:1592   */\n  tag_41\n    /* \"#utility.yul\":1584:1591   */\n  dup6\n    /* \"#utility.yul\":1573:1581   */\n  dup3\n    /* \"#utility.yul\":1562:1571   */\n  dup7\n    /* \"#utility.yul\":1558:1582   */\n  add\n    /* \"#utility.yul\":1529:1592   */\n  tag_22\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1519:1592   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1598   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1603:1983   */\ntag_11:\n    /* \"#utility.yul\":1682:1683   */\n  0x01\n    /* \"#utility.yul\":1678:1690   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1725:1737   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1746:1807   */\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1800:1804   */\n  0x7f\n    /* \"#utility.yul\":1792:1798   */\n  dup3\n    /* \"#utility.yul\":1788:1805   */\n  and\n    /* \"#utility.yul\":1778:1805   */\n  swap2\n  pop\n    /* \"#utility.yul\":1746:1807   */\ntag_43:\n    /* \"#utility.yul\":1853:1855   */\n  0x20\n    /* \"#utility.yul\":1845:1851   */\n  dup3\n    /* \"#utility.yul\":1842:1856   */\n  lt\n    /* \"#utility.yul\":1822:1840   */\n  dup2\n    /* \"#utility.yul\":1819:1857   */\n  eq\n    /* \"#utility.yul\":1816:1977   */\n  iszero\n  tag_44\n  jumpi\n    /* \"#utility.yul\":1899:1909   */\n  0x4e487b71\n    /* \"#utility.yul\":1894:1897   */\n  0xe0\n    /* \"#utility.yul\":1890:1910   */\n  shl\n    /* \"#utility.yul\":1887:1888   */\n  0x00\n    /* \"#utility.yul\":1880:1911   */\n  mstore\n    /* \"#utility.yul\":1934:1938   */\n  0x22\n    /* \"#utility.yul\":1931:1932   */\n  0x04\n    /* \"#utility.yul\":1924:1939   */\n  mstore\n    /* \"#utility.yul\":1962:1966   */\n  0x24\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1967   */\n  revert\n    /* \"#utility.yul\":1816:1977   */\ntag_44:\n  pop\n    /* \"#utility.yul\":1603:1983   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_23:\n    /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":1434:12657  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":1434:12657  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2187:2285  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4464:4661  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4464:4661  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3275:3381  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3362:3374  _totalSupply */\n      sload(0x02)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3275:3381  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3275:3381  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5223:5509  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3124:3215  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3206:3208  18 */\n      0x12\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3124:3215  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5904:6140  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3439:3564  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3557  _balances[account] */\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3513:3520  uint256 */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3539:3557  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3439:3564  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2398:2500  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6627:7056  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3760:3949  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4007:4156  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4096:4103  uint256 */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4133  _allowances */\n      0x01\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4149  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4007:4156  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2187:2285  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2241:2254  string memory */\n      0x60\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2273:2278  _name */\n      0x03\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2266:2278  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2187:2285  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4464:4661  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4547:4551  bool */\n      0x00\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4601:4633  _approve(owner, spender, amount) */\n      tag_73\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4617:4624  spender */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4626:4632  amount */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4601:4609  _approve */\n      tag_74\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4601:4633  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4650:4654  true */\n      0x01\n      swap4\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4464:4661  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5223:5509  function transferFrom(... */\n    tag_32:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5350:5354  bool */\n      0x00\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5406:5444  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5422:5426  from */\n      dup6\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5437:5443  amount */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5406:5421  _spendAllowance */\n      tag_79\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5406:5444  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5454:5481  _transfer(from, to, amount) */\n      tag_80\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5464:5468  from */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5470:5472  to */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5474:5480  amount */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5454:5463  _transfer */\n      tag_81\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5454:5481  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5498:5502  true */\n      0x01\n      swap5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5223:5509  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5904:6140  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5992:5996  bool */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6089  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6082  _allowances */\n      0x01\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6089  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6098  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":5992:5996  bool */\n      swap1\n      swap2\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6046:6112  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      tag_73\n      swap1\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      dup3\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6098  _allowances[owner][spender] */\n      dup7\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6111  _allowances[owner][spender] + addedValue */\n      tag_86\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6101:6111  addedValue */\n      dup8\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6071:6111  _allowances[owner][spender] + addedValue */\n      tag_87\n      jump\t// in\n    tag_86:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6046:6054  _approve */\n      tag_74\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6046:6112  _approve(owner, spender, _allowances[owner][spender] + addedValue) */\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2398:2500  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2454:2467  string memory */\n      0x60\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2486:2493  _symbol */\n      0x04\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":2479:2493  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6627:7056  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6720:6724  bool */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6801:6819  _allowances[owner] */\n      dup2\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6801:6812  _allowances */\n      0x01\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6801:6819  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6801:6828  _allowances[owner][spender] */\n      dup8\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6720:6724  bool */\n      swap1\n      swap2\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6846:6881  currentAllowance >= subtractedValue */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6838:6923  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3222:3224   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6838:6923  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3204:3225   */\n      mstore\n        /* \"#utility.yul\":3261:3263   */\n      0x25\n        /* \"#utility.yul\":3241:3259   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3234:3264   */\n      mstore\n        /* \"#utility.yul\":3300:3334   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3280:3298   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3273:3335   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3351:3369   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3344:3379   */\n      mstore\n        /* \"#utility.yul\":3396:3415   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6838:6923  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_98:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6957:7017  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6966:6971  owner */\n      dup3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6973:6980  spender */\n      dup7\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7001:7016  subtractedValue */\n      dup7\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6982:6998  currentAllowance */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6982:7016  currentAllowance - subtractedValue */\n      sub\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6957:6965  _approve */\n      tag_74\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":6957:7017  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3760:3949  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3839:3843  bool */\n      0x00\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3893:3921  _transfer(owner, to, amount) */\n      tag_73\n        /* \"openzeppelin-presets/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3910:3912  to */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3914:3920  amount */\n      dup6\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3893:3902  _transfer */\n      tag_81\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":3893:3921  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10154:10524  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10285:10304  owner != address(0) */\n      dup4\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10277:10345  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_107\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3628:3630   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10277:10345  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3610:3631   */\n      mstore\n        /* \"#utility.yul\":3667:3669   */\n      0x24\n        /* \"#utility.yul\":3647:3665   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3640:3670   */\n      mstore\n        /* \"#utility.yul\":3706:3740   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3686:3704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3679:3741   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3757:3775   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3750:3784   */\n      mstore\n        /* \"#utility.yul\":3801:3820   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10277:10345  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_98\n        /* \"#utility.yul\":3426:3826   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10277:10345  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_107:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10363:10384  spender != address(0) */\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10355:10423  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_110\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4033:4035   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10355:10423  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4015:4036   */\n      mstore\n        /* \"#utility.yul\":4072:4074   */\n      0x22\n        /* \"#utility.yul\":4052:4070   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4045:4075   */\n      mstore\n        /* \"#utility.yul\":4111:4145   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4091:4109   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4084:4146   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4162:4180   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4155:4187   */\n      mstore\n        /* \"#utility.yul\":4204:4223   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10355:10423  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_98\n        /* \"#utility.yul\":3831:4229   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10355:10423  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_110:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10452  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10445  _allowances */\n      0x01\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10452  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10461  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10434:10470  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10485:10517  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10485:10517  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10485:10517  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10154:10524  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10801:11242  function _spendAllowance(... */\n    tag_79:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10931:10955  uint256 currentAllowance */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4133  _allowances */\n      0x01\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4140  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":4122:4149  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10997:11034  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10993:11236  if (currentAllowance != type(uint256).max) {... */\n      tag_120\n      jumpi\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11078:11084  amount */\n      dup2\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11058:11074  currentAllowance */\n      dup2\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11058:11084  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11050:11118  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4436:4438   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11050:11118  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4418:4439   */\n      mstore\n        /* \"#utility.yul\":4475:4477   */\n      0x1d\n        /* \"#utility.yul\":4455:4473   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4448:4478   */\n      mstore\n        /* \"#utility.yul\":4514:4545   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4494:4512   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4487:4546   */\n      mstore\n        /* \"#utility.yul\":4563:4581   */\n      0x64\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11050:11118  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_98\n        /* \"#utility.yul\":4234:4587   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11050:11118  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_117:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11160:11211  _approve(owner, spender, currentAllowance - amount) */\n      tag_120\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11169:11174  owner */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11176:11183  spender */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11204:11210  amount */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11185:11201  currentAllowance */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11185:11210  currentAllowance - amount */\n      sub\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11160:11168  _approve */\n      tag_74\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11160:11211  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_120:\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10921:11242  {... */\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":10801:11242  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7519:8170  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7645:7663  from != address(0) */\n      dup4\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7637:7705  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_122\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4794:4796   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7637:7705  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4776:4797   */\n      mstore\n        /* \"#utility.yul\":4833:4835   */\n      0x25\n        /* \"#utility.yul\":4813:4831   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4806:4836   */\n      mstore\n        /* \"#utility.yul\":4872:4906   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4852:4870   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4845:4907   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4923:4941   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4916:4951   */\n      mstore\n        /* \"#utility.yul\":4968:4987   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7637:7705  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_98\n        /* \"#utility.yul\":4592:4993   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7637:7705  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7723:7739  to != address(0) */\n      dup3\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7715:7779  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5200:5202   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7715:7779  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5182:5203   */\n      mstore\n        /* \"#utility.yul\":5239:5241   */\n      0x23\n        /* \"#utility.yul\":5219:5237   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5212:5242   */\n      mstore\n        /* \"#utility.yul\":5278:5312   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5258:5276   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5251:5313   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5329:5347   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5322:5355   */\n      mstore\n        /* \"#utility.yul\":5372:5391   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7715:7779  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_98\n        /* \"#utility.yul\":4998:5397   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7715:7779  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_125:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7861:7876  _balances[from] */\n      dup4\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7839:7858  uint256 fromBalance */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7861:7876  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7894:7915  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7886:7958  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5604:5606   */\n      0x20\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7886:7958  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5586:5607   */\n      mstore\n        /* \"#utility.yul\":5643:5645   */\n      0x26\n        /* \"#utility.yul\":5623:5641   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5616:5646   */\n      mstore\n        /* \"#utility.yul\":5682:5716   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5662:5680   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5655:5717   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5733:5751   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5726:5762   */\n      mstore\n        /* \"#utility.yul\":5779:5798   */\n      0x84\n      add\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7886:7958  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_98\n        /* \"#utility.yul\":5402:5804   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7886:7958  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8007  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8001  _balances */\n      0x00\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8007  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8010:8030  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8030  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8050:8063  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8050:8073  _balances[to] += amount */\n      dup1\n      sload\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8024:8030  amount */\n      dup5\n      swap3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":7992:8001  _balances */\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8050:8073  _balances[to] += amount */\n      tag_133\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8024:8030  amount */\n      dup5\n      swap1\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8050:8073  _balances[to] += amount */\n      tag_87\n      jump\t// in\n    tag_133:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8104:8106  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8089:8115  Transfer(from, to, amount) */\n      and\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8098:8102  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8089:8115  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8108:8114  amount */\n      dup5\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8089:8115  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_134\n      swap2\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8089:8115  Transfer(from, to, amount) */\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":8126:8163  _afterTokenTransfer(from, to, amount) */\n      tag_120\n        /* \"openzeppelin-presets/token/ERC20/ERC20.sol\":11826:11947  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:611   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_142:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_144\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_142)\n    tag_144:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_145:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_139:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_147\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_147:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_21:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_149:\n        /* \"#utility.yul\":962:991   */\n      tag_150\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_139\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_31:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_154:\n        /* \"#utility.yul\":1612:1641   */\n      tag_155\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_139\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_156\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_139\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_44:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_159\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_159:\n        /* \"#utility.yul\":2100:2129   */\n      tag_160\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_139\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_60:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_162:\n        /* \"#utility.yul\":2308:2337   */\n      tag_163\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_139\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_164\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_139\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_65:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_166\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_166:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      eq\n        /* \"#utility.yul\":2618:2779   */\n      iszero\n      tag_167\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_167:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:3015   */\n    tag_87:\n        /* \"#utility.yul\":2830:2833   */\n      0x00\n        /* \"#utility.yul\":2861:2862   */\n      dup3\n        /* \"#utility.yul\":2857:2863   */\n      not\n        /* \"#utility.yul\":2854:2855   */\n      dup3\n        /* \"#utility.yul\":2851:2864   */\n      gt\n        /* \"#utility.yul\":2848:2984   */\n      iszero\n      tag_169\n      jumpi\n        /* \"#utility.yul\":2906:2916   */\n      0x4e487b71\n        /* \"#utility.yul\":2901:2904   */\n      0xe0\n        /* \"#utility.yul\":2897:2917   */\n      shl\n        /* \"#utility.yul\":2894:2895   */\n      0x00\n        /* \"#utility.yul\":2887:2918   */\n      mstore\n        /* \"#utility.yul\":2941:2945   */\n      0x11\n        /* \"#utility.yul\":2938:2939   */\n      0x04\n        /* \"#utility.yul\":2931:2946   */\n      mstore\n        /* \"#utility.yul\":2969:2973   */\n      0x24\n        /* \"#utility.yul\":2966:2967   */\n      0x00\n        /* \"#utility.yul\":2959:2974   */\n      revert\n        /* \"#utility.yul\":2848:2984   */\n    tag_169:\n      pop\n        /* \"#utility.yul\":3000:3009   */\n      add\n      swap1\n        /* \"#utility.yul\":2790:3015   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212206d9d176be68800ad12ffa37a7a5a216d47cda75a5768a91f3c5cd46bbfcc1bdb64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1050": {
									"entryPoint": null,
									"id": 1050,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 292,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 475,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"extract_byte_array_length": {
									"entryPoint": 581,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 270,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1985:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:18",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:18"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:18"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:18"
															},
															"nodeType": "YulIf",
															"src": "220:55:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:18",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:18"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:18"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:18"
															},
															"nodeType": "YulIf",
															"src": "353:36:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:18"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:18"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:18",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:18"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:18",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:18"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:18"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:18"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:18",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:18"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:18"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:18"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:18"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:18"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:18"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:18"
															},
															"nodeType": "YulIf",
															"src": "536:72:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:18",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:18",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:18"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:18"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:18"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:18"
															},
															"nodeType": "YulIf",
															"src": "698:53:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:18"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:18"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:18"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:18"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:18"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:18"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:18",
																"statements": []
															},
															"src": "779:133:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:18"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:18"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:18"
															},
															"nodeType": "YulIf",
															"src": "921:80:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:18",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:18"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:18",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:18",
														"type": ""
													}
												],
												"src": "146:885:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1154:444:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1200:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1209:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1212:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1202:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1202:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1202:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1175:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1184:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1171:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1171:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1196:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:32:18"
															},
															"nodeType": "YulIf",
															"src": "1164:52:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1225:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1245:9:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1239:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1239:16:18"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1229:6:18",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1264:28:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1282:2:18",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1286:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1278:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1278:10:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1290:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1274:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1274:18:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1268:2:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1319:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1328:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1331:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1321:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1321:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1321:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1307:6:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1315:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1304:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1304:14:18"
															},
															"nodeType": "YulIf",
															"src": "1301:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1344:71:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1387:9:18"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1398:6:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1383:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1383:22:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1407:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1354:28:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:61:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1344:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1424:41:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1450:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1461:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1446:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1446:18:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1440:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:25:18"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1428:8:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1494:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1503:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1506:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1496:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1496:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1496:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1480:8:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1490:2:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1477:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1477:16:18"
															},
															"nodeType": "YulIf",
															"src": "1474:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1519:73:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1562:9:18"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1573:8:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1558:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1558:24:18"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1584:7:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1529:28:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:63:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1112:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1123:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1135:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1143:6:18",
														"type": ""
													}
												],
												"src": "1036:562:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1658:325:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1668:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1682:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1685:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1678:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1678:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1668:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1699:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1729:4:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1735:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1725:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1725:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1703:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1776:31:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1778:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1792:6:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1800:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1788:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1788:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1756:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1749:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1749:26:18"
															},
															"nodeType": "YulIf",
															"src": "1746:61:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1866:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1887:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1894:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1899:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1890:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1890:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1880:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1880:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1880:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1931:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1934:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1924:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1924:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1959:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1962:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1952:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1952:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1952:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1822:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1845:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1853:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1842:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1842:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1819:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:38:18"
															},
															"nodeType": "YulIf",
															"src": "1816:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1638:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1647:6:18",
														"type": ""
													}
												],
												"src": "1603:380:18"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b6038038062000b608339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000282565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b602082108114156200027c57634e487b7160e01b600052602260045260246000fd5b50919050565b6108ce80620002926000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070b565b60405180910390f35b6100df6100da36600461077c565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a6565b610270565b604051601281526020016100c3565b6100df61013136600461077c565b610294565b6100f36101443660046107e2565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461077c565b6102e2565b6100df61018836600461077c565b610379565b6100f361019b366004610804565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d590610837565b80601f016020809104026020016040519081016040528092919081815260200182805461020190610837565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610387565b5060019392505050565b60003361027e8582856104ab565b61028985858561053d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce908790610872565b610387565b6060600480546101d590610837565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561036c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102898286868403610387565b60003361026681858561053d565b6001600160a01b0383166103e95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610363565b6001600160a01b03821661044a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610363565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610537578181101561052a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610363565b6105378484848403610387565b50505050565b6001600160a01b0383166105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610363565b6001600160a01b0382166106035760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610363565b6001600160a01b0383166000908152602081905260409020548181101561067b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610363565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b2908490610872565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fe91815260200190565b60405180910390a3610537565b600060208083528351808285015260005b818110156107385785810183015185820160400152820161071c565b8181111561074a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077757600080fd5b919050565b6000806040838503121561078f57600080fd5b61079883610760565b946020939093013593505050565b6000806000606084860312156107bb57600080fd5b6107c484610760565b92506107d260208501610760565b9150604084013590509250925092565b6000602082840312156107f457600080fd5b6107fd82610760565b9392505050565b6000806040838503121561081757600080fd5b61082083610760565b915061082e60208401610760565b90509250929050565b600181811c9082168061084b57607f821691505b6020821081141561086c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561089357634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206d9d176be68800ad12ffa37a7a5a216d47cda75a5768a91f3c5cd46bbfcc1bdb64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB60 CODESIZE SUB DUP1 PUSH3 0xB60 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DB JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x282 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x245 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x153 JUMPI PUSH3 0x153 PUSH3 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x17E JUMPI PUSH3 0x17E PUSH3 0x10E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1BF JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A0 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D1 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x215 DUP7 DUP4 DUP8 ADD PUSH3 0x124 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23B DUP6 DUP3 DUP7 ADD PUSH3 0x124 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x27C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8CE DUP1 PUSH3 0x292 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27E DUP6 DUP3 DUP6 PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x289 DUP6 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x266 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2CE SWAP1 DUP8 SWAP1 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x387 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x289 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x537 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x363 JUMP JUMPDEST PUSH2 0x537 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B2 SWAP1 DUP5 SWAP1 PUSH2 0x872 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x537 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x738 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x71C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C4 DUP5 PUSH2 0x760 JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 PUSH1 0x20 DUP6 ADD PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FD DUP3 PUSH2 0x760 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x820 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH2 0x82E PUSH1 0x20 DUP5 ADD PUSH2 0x760 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x84B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x86C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x893 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x9D176BE68800AD12FFA37A7A5A21 PUSH14 0x47CDA75A5768A91F3C5CD46BBFCC SHL 0xDB PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "1434:11223:12:-:0;;;2009:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2075:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2098:17:12;;;;:7;;:17;;;;;:::i;:::-;;2009:113;;1434:11223;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1434:11223:12;;;-1:-1:-1;1434:11223:12;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:18;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:18;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:18;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:18:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:18;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;1434:11223:12;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_1592": {
									"entryPoint": null,
									"id": 1592,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1527": {
									"entryPoint": 903,
									"id": 1527,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1581": {
									"entryPoint": null,
									"id": 1581,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_1847": {
									"entryPoint": null,
									"id": 1847,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1570": {
									"entryPoint": 1195,
									"id": 1570,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_1354": {
									"entryPoint": 1341,
									"id": 1354,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_1147": {
									"entryPoint": null,
									"id": 1147,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1172": {
									"entryPoint": 600,
									"id": 1172,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_1104": {
									"entryPoint": null,
									"id": 1104,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1080": {
									"entryPoint": null,
									"id": 1080,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1277": {
									"entryPoint": 738,
									"id": 1277,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_1235": {
									"entryPoint": 660,
									"id": 1235,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_1060": {
									"entryPoint": 454,
									"id": 1060,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_1070": {
									"entryPoint": 723,
									"id": 1070,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_1090": {
									"entryPoint": null,
									"id": 1090,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1205": {
									"entryPoint": 624,
									"id": 1205,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_1129": {
									"entryPoint": 889,
									"id": 1129,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1888,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2018,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2052,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1958,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1916,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1803,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2162,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2103,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5806:18",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:18",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:18",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:18"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:18"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:18"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:18",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:18"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:18"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:18",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:18"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:18"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:18"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:18"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:18"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:18"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:18",
																"statements": []
															},
															"src": "294:140:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:18"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:18"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:18"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:18",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:18"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:18"
															},
															"nodeType": "YulIf",
															"src": "443:91:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:18",
														"type": ""
													}
												],
												"src": "14:597:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:18"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:18"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:18"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:18",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:18",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:18"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:18"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:18"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:18"
															},
															"nodeType": "YulIf",
															"src": "713:70:18"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:18",
														"type": ""
													}
												],
												"src": "616:173:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:18"
															},
															"nodeType": "YulIf",
															"src": "891:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:18",
														"type": ""
													}
												],
												"src": "794:254:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:18"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:18",
														"type": ""
													}
												],
												"src": "1053:187:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:18"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:18",
														"type": ""
													}
												],
												"src": "1245:177:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:18"
															},
															"nodeType": "YulIf",
															"src": "1541:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:18",
														"type": ""
													}
												],
												"src": "1427:328:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:18",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:18",
														"type": ""
													}
												],
												"src": "1760:184:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:18"
															},
															"nodeType": "YulIf",
															"src": "2029:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:18",
														"type": ""
													}
												],
												"src": "1949:186:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:18"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:18"
															},
															"nodeType": "YulIf",
															"src": "2237:52:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:18"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:18",
														"type": ""
													}
												],
												"src": "2140:260:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:18",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:18"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:18",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:18"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:18"
															},
															"nodeType": "YulIf",
															"src": "2548:61:18"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:18"
															},
															"nodeType": "YulIf",
															"src": "2618:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:18",
														"type": ""
													}
												],
												"src": "2405:380:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2838:177:18",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2873:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2894:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2901:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2906:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2897:3:18"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2897:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2887:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:31:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2938:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2941:4:18",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2931:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2931:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2931:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2966:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2969:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2959:6:18"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2959:15:18"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2959:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2854:1:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2861:1:18"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2857:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2857:6:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2851:2:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "2851:13:18"
															},
															"nodeType": "YulIf",
															"src": "2848:136:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2993:16:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3004:1:18"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3007:1:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3000:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3000:9:18"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2993:3:18"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2821:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2824:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2830:3:18",
														"type": ""
													}
												],
												"src": "2790:225:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3194:227:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3211:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3222:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3204:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3204:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3204:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3245:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3256:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3241:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3241:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3261:2:18",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3234:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3234:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3234:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3284:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3295:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:18:18"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3300:34:18",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3355:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3366:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3351:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3351:18:18"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3371:7:18",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3344:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3344:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3388:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3400:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3411:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3396:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3396:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3388:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3171:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3185:4:18",
														"type": ""
													}
												],
												"src": "3020:401:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3600:226:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3617:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3628:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3610:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3610:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3667:2:18",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3640:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3640:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3640:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3690:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3701:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3686:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3686:18:18"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3706:34:18",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3679:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3679:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3679:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3761:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3772:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3757:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3757:18:18"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3777:6:18",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3750:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:34:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3750:34:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3805:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3816:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3801:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3577:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3591:4:18",
														"type": ""
													}
												],
												"src": "3426:400:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4005:224:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4022:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4033:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4015:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4015:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4015:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4056:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4067:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4052:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4052:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4072:2:18",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4045:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4045:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4095:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4106:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4091:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4091:18:18"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4111:34:18",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4084:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4084:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4084:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4166:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4177:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4162:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4162:18:18"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4182:4:18",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4155:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4155:32:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4155:32:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4196:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4208:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4219:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4204:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4204:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4196:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3982:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3996:4:18",
														"type": ""
													}
												],
												"src": "3831:398:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4408:179:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4425:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4436:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4418:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4418:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4459:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4470:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4455:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4455:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4475:2:18",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4448:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4448:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4448:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4498:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4509:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4494:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4494:18:18"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4514:31:18",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4487:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4487:59:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4487:59:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4555:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4567:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4578:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4563:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4563:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4555:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4385:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4399:4:18",
														"type": ""
													}
												],
												"src": "4234:353:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4766:227:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4783:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4794:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4776:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4776:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4776:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4817:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4828:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4813:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4813:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4833:2:18",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4806:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4806:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4806:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4856:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4867:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4852:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4852:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4872:34:18",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4845:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4845:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4845:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4927:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4938:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4923:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4923:18:18"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4943:7:18",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4916:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:35:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4916:35:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4960:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4972:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4983:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4968:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "4968:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4960:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4743:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4757:4:18",
														"type": ""
													}
												],
												"src": "4592:401:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5172:225:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5189:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5200:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5182:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5182:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5223:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5234:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5219:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5239:2:18",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5212:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5212:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5278:34:18",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5251:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5251:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5333:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5344:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5329:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5329:18:18"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5349:5:18",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5322:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5322:33:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5322:33:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5364:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5376:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5387:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5372:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5364:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5149:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5163:4:18",
														"type": ""
													}
												],
												"src": "4998:399:18"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5576:228:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5593:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5604:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5586:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5586:21:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5586:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5627:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5638:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5623:18:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5643:2:18",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5616:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5616:30:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5616:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5666:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5677:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5662:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5662:18:18"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5682:34:18",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5655:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5655:62:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5655:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:18"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:18"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:18:18"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5753:8:18",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:36:18"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:36:18"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5771:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5783:9:18"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5779:3:18"
																},
																"nodeType": "YulFunctionCall",
																"src": "5779:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5771:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5553:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5567:4:18",
														"type": ""
													}
												],
												"src": "5402:402:18"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070b565b60405180910390f35b6100df6100da36600461077c565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a6565b610270565b604051601281526020016100c3565b6100df61013136600461077c565b610294565b6100f36101443660046107e2565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461077c565b6102e2565b6100df61018836600461077c565b610379565b6100f361019b366004610804565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d590610837565b80601f016020809104026020016040519081016040528092919081815260200182805461020190610837565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610387565b5060019392505050565b60003361027e8582856104ab565b61028985858561053d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce908790610872565b610387565b6060600480546101d590610837565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561036c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102898286868403610387565b60003361026681858561053d565b6001600160a01b0383166103e95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610363565b6001600160a01b03821661044a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610363565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610537578181101561052a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610363565b6105378484848403610387565b50505050565b6001600160a01b0383166105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610363565b6001600160a01b0382166106035760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610363565b6001600160a01b0383166000908152602081905260409020548181101561067b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610363565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b2908490610872565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fe91815260200190565b60405180910390a3610537565b600060208083528351808285015260005b818110156107385785810183015185820160400152820161071c565b8181111561074a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077757600080fd5b919050565b6000806040838503121561078f57600080fd5b61079883610760565b946020939093013593505050565b6000806000606084860312156107bb57600080fd5b6107c484610760565b92506107d260208501610760565b9150604084013590509250925092565b6000602082840312156107f457600080fd5b6107fd82610760565b9392505050565b6000806040838503121561081757600080fd5b61082083610760565b915061082e60208401610760565b90509250929050565b600181811c9082168061084b57607f821691505b6020821081141561086c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561089357634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206d9d176be68800ad12ffa37a7a5a216d47cda75a5768a91f3c5cd46bbfcc1bdb64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27E DUP6 DUP3 DUP6 PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x289 DUP6 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x266 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2CE SWAP1 DUP8 SWAP1 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x387 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x289 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x537 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x363 JUMP JUMPDEST PUSH2 0x537 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B2 SWAP1 DUP5 SWAP1 PUSH2 0x872 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x537 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x738 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x71C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C4 DUP5 PUSH2 0x760 JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 PUSH1 0x20 DUP6 ADD PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FD DUP3 PUSH2 0x760 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x820 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH2 0x82E PUSH1 0x20 DUP5 ADD PUSH2 0x760 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x84B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x86C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x893 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x9D176BE68800AD12FFA37A7A5A21 PUSH14 0x47CDA75A5768A91F3C5CD46BBFCC SHL 0xDB PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "1434:11223:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2187:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4464:197;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:18;;1211:22;1193:41;;1181:2;1166:18;4464:197:12;1053:187:18;3275:106:12;3362:12;;3275:106;;;1391:25:18;;;1379:2;1364:18;3275:106:12;1245:177:18;5223:286:12;;;;;;:::i;:::-;;:::i;3124:91::-;;;3206:2;1902:36:18;;1890:2;1875:18;3124:91:12;1760:184:18;5904:236:12;;;;;;:::i;:::-;;:::i;3439:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3539:18:12;3513:7;3539:18;;;;;;;;;;;;3439:125;2398:102;;;:::i;6627:429::-;;;;;;:::i;:::-;;:::i;3760:189::-;;;;;;:::i;:::-;;:::i;4007:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4122:18:12;;;4096:7;4122:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4007:149;2187:98;2241:13;2273:5;2266:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2187:98;:::o;4464:197::-;4547:4;719:10:14;4601:32:12;719:10:14;4617:7:12;4626:6;4601:8;:32::i;:::-;-1:-1:-1;4650:4:12;;4464:197;-1:-1:-1;;;4464:197:12:o;5223:286::-;5350:4;719:10:14;5406:38:12;5422:4;719:10:14;5437:6:12;5406:15;:38::i;:::-;5454:27;5464:4;5470:2;5474:6;5454:9;:27::i;:::-;-1:-1:-1;5498:4:12;;5223:286;-1:-1:-1;;;;5223:286:12:o;5904:236::-;719:10:14;5992:4:12;6071:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6071:27:12;;;;;;;;;;5992:4;;719:10:14;6046:66:12;;719:10:14;;6071:27:12;;:40;;6101:10;;6071:40;:::i;:::-;6046:8;:66::i;2398:102::-;2454:13;2486:7;2479:14;;;;;:::i;6627:429::-;719:10:14;6720:4:12;6801:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6801:27:12;;;;;;;;;;6720:4;;719:10:14;6846:35:12;;;;6838:85;;;;-1:-1:-1;;;6838:85:12;;3222:2:18;6838:85:12;;;3204:21:18;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:18;;;3344:35;3396:19;;6838:85:12;;;;;;;;;6957:60;6966:5;6973:7;7001:15;6982:16;:34;6957:8;:60::i;3760:189::-;3839:4;719:10:14;3893:28:12;719:10:14;3910:2:12;3914:6;3893:9;:28::i;10154:370::-;-1:-1:-1;;;;;10285:19:12;;10277:68;;;;-1:-1:-1;;;10277:68:12;;3628:2:18;10277:68:12;;;3610:21:18;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:18;;;3750:34;3801:19;;10277:68:12;3426:400:18;10277:68:12;-1:-1:-1;;;;;10363:21:12;;10355:68;;;;-1:-1:-1;;;10355:68:12;;4033:2:18;10355:68:12;;;4015:21:18;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:18;;;4155:32;4204:19;;10355:68:12;3831:398:18;10355:68:12;-1:-1:-1;;;;;10434:18:12;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10485:32;;1391:25:18;;;10485:32:12;;1364:18:18;10485:32:12;;;;;;;10154:370;;;:::o;10801:441::-;-1:-1:-1;;;;;4122:18:12;;;10931:24;4122:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10997:37:12;;10993:243;;11078:6;11058:16;:26;;11050:68;;;;-1:-1:-1;;;11050:68:12;;4436:2:18;11050:68:12;;;4418:21:18;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;11050:68:12;4234:353:18;11050:68:12;11160:51;11169:5;11176:7;11204:6;11185:16;:25;11160:8;:51::i;:::-;10921:321;10801:441;;;:::o;7519:651::-;-1:-1:-1;;;;;7645:18:12;;7637:68;;;;-1:-1:-1;;;7637:68:12;;4794:2:18;7637:68:12;;;4776:21:18;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:18;;;4916:35;4968:19;;7637:68:12;4592:401:18;7637:68:12;-1:-1:-1;;;;;7723:16:12;;7715:64;;;;-1:-1:-1;;;7715:64:12;;5200:2:18;7715:64:12;;;5182:21:18;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:18;;;5322:33;5372:19;;7715:64:12;4998:399:18;7715:64:12;-1:-1:-1;;;;;7861:15:12;;7839:19;7861:15;;;;;;;;;;;7894:21;;;;7886:72;;;;-1:-1:-1;;;7886:72:12;;5604:2:18;7886:72:12;;;5586:21:18;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:18;;;5726:36;5779:19;;7886:72:12;5402:402:18;7886:72:12;-1:-1:-1;;;;;7992:15:12;;;:9;:15;;;;;;;;;;;8010:20;;;7992:38;;8050:13;;;;;;;;:23;;8024:6;;7992:9;8050:23;;8024:6;;8050:23;:::i;:::-;;;;;;;;8104:2;-1:-1:-1;;;;;8089:26:12;8098:4;-1:-1:-1;;;;;8089:26:12;;8108:6;8089:26;;;;1391:25:18;;1379:2;1364:18;;1245:177;8089:26:12;;;;;;;;8126:37;11826:121;14:597:18;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:18;574:15;-1:-1:-1;;570:29:18;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:18:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:18;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:18:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:18:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:18;;2790:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "450800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24624",
								"balanceOf(address)": "2562",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "26966",
								"increaseAllowance(address,uint256)": "26945",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51270",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "CODESIZE",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "tag",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2080,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 2075,
									"end": 2080,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "tag",
									"source": 12,
									"value": "6"
								},
								{
									"begin": 2075,
									"end": 2088,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2105,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 2098,
									"end": 2105,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "tag",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2098,
									"end": 2115,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2009,
									"end": 2122,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "23"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "7"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "10"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "10"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "KECCAK256",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "13"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "16"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "13"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "FF"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "16"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "16"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "15"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "16"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "15"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "16"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "18"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "tag",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "17"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 18,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "28"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 18,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 18,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "30"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 18,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 18
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 18,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 18,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 18,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 18
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "tag",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1135,
									"end": 1141,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1143,
									"end": 1149,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1196,
									"end": 1198,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1184,
									"end": 1193,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1175,
									"end": 1182,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1171,
									"end": 1194,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 1167,
									"end": 1199,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "37"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1212,
									"end": 1213,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1209,
									"end": 1210,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1202,
									"end": 1214,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "tag",
									"source": 18,
									"value": "37"
								},
								{
									"begin": 1164,
									"end": 1216,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1239,
									"end": 1255,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1318,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "38"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1331,
									"end": 1332,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1329,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1321,
									"end": 1333,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "tag",
									"source": 18,
									"value": "38"
								},
								{
									"begin": 1301,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "39"
								},
								{
									"begin": 1407,
									"end": 1414,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1398,
									"end": 1404,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1387,
									"end": 1396,
									"name": "DUP8",
									"source": 18
								},
								{
									"begin": 1383,
									"end": 1405,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "tag",
									"source": 18,
									"value": "39"
								},
								{
									"begin": 1354,
									"end": 1415,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 1344,
									"end": 1415,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1461,
									"end": 1463,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1450,
									"end": 1459,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1446,
									"end": 1464,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1440,
									"end": 1465,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1424,
									"end": 1465,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1490,
									"end": 1492,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1480,
									"end": 1488,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1477,
									"end": 1493,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1506,
									"end": 1507,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1503,
									"end": 1504,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1496,
									"end": 1508,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "tag",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1474,
									"end": 1510,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 1584,
									"end": 1591,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1573,
									"end": 1581,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1562,
									"end": 1571,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1558,
									"end": 1582,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMP",
									"source": 18,
									"value": "[in]"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "tag",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 1529,
									"end": 1592,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1519,
									"end": 1592,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1036,
									"end": 1598,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 18,
									"value": "11"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1682,
									"end": 1683,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 1678,
									"end": 1690,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 1725,
									"end": 1737,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "43"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1800,
									"end": 1804,
									"name": "PUSH",
									"source": 18,
									"value": "7F"
								},
								{
									"begin": 1792,
									"end": 1798,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1788,
									"end": 1805,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1778,
									"end": 1805,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "tag",
									"source": 18,
									"value": "43"
								},
								{
									"begin": 1746,
									"end": 1807,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1853,
									"end": 1855,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1845,
									"end": 1851,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1842,
									"end": 1856,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 1822,
									"end": 1840,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1819,
									"end": 1857,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1899,
									"end": 1909,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 1894,
									"end": 1897,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 1890,
									"end": 1910,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 1887,
									"end": 1888,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1880,
									"end": 1911,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1934,
									"end": 1938,
									"name": "PUSH",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 1931,
									"end": 1932,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 1924,
									"end": 1939,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1962,
									"end": 1966,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1967,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "tag",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1816,
									"end": 1977,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMP",
									"source": 18,
									"value": "[out]"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "tag",
									"source": 18,
									"value": "23"
								},
								{
									"begin": 1603,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1434,
									"end": 12657,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206d9d176be68800ad12ffa37a7a5a216d47cda75a5768a91f3c5cd46bbfcc1bdb64736f6c634300080b0033",
									".code": [
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "39509351"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "39509351"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "95D89B41"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "A457C2D7"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "A9059CBB"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "DD62ED3E"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "tag",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "6FDDE03"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "18160DDD"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "313CE567"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1434,
											"end": 12657,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "tag",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3362,
											"end": 3374,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 3362,
											"end": 3374,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "tag",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3275,
											"end": 3381,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "tag",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3206,
											"end": 3208,
											"name": "PUSH",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3124,
											"end": 3215,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "tag",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3513,
											"end": 3520,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3439,
											"end": 3564,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "tag",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "tag",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "tag",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "tag",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "tag",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4096,
											"end": 4103,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4133,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4007,
											"end": 4156,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2241,
											"end": 2254,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2273,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "68"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "69"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "69"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "tag",
											"source": 12,
											"value": "67"
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2266,
											"end": 2278,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2187,
											"end": 2285,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "tag",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4547,
											"end": 4551,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4601,
											"end": 4633,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4617,
											"end": 4624,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4626,
											"end": 4632,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4601,
											"end": 4609,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 4601,
											"end": 4633,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4601,
											"end": 4633,
											"name": "tag",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 4601,
											"end": 4633,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4650,
											"end": 4654,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4650,
											"end": 4654,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4464,
											"end": 4661,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "tag",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5350,
											"end": 5354,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 5406,
											"end": 5444,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "78"
										},
										{
											"begin": 5422,
											"end": 5426,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5437,
											"end": 5443,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5406,
											"end": 5421,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "79"
										},
										{
											"begin": 5406,
											"end": 5444,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5406,
											"end": 5444,
											"name": "tag",
											"source": 12,
											"value": "78"
										},
										{
											"begin": 5406,
											"end": 5444,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5454,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 5464,
											"end": 5468,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5470,
											"end": 5472,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5474,
											"end": 5480,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5454,
											"end": 5463,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 5454,
											"end": 5481,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5454,
											"end": 5481,
											"name": "tag",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 5454,
											"end": 5481,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5498,
											"end": 5502,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 5498,
											"end": 5502,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5223,
											"end": 5509,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "tag",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5904,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 5992,
											"end": 5996,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6082,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6089,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5992,
											"end": 5996,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5992,
											"end": 5996,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6046,
											"end": 6112,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 6046,
											"end": 6112,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6098,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6101,
											"end": 6111,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6101,
											"end": 6111,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "tag",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 6071,
											"end": 6111,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6046,
											"end": 6054,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 6046,
											"end": 6112,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "tag",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 2398,
											"end": 2500,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2454,
											"end": 2467,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2486,
											"end": 2493,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2479,
											"end": 2493,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "tag",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 6627,
											"end": 7056,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 6720,
											"end": 6724,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6812,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6819,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 6801,
											"end": 6828,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6720,
											"end": 6724,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6720,
											"end": 6724,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6846,
											"end": 6881,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6846,
											"end": 6881,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6846,
											"end": 6881,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6846,
											"end": 6881,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3222,
											"end": 3224,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3204,
											"end": 3225,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3261,
											"end": 3263,
											"name": "PUSH",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3234,
											"end": 3264,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3300,
											"end": 3334,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3344,
											"end": 3379,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "tag",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "tag",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 6838,
											"end": 6923,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6957,
											"end": 7017,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 6966,
											"end": 6971,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6973,
											"end": 6980,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7001,
											"end": 7016,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6982,
											"end": 6998,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6982,
											"end": 7016,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6957,
											"end": 6965,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 6957,
											"end": 7017,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 3760,
											"end": 3949,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3839,
											"end": 3843,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 3893,
											"end": 3921,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3910,
											"end": 3912,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3914,
											"end": 3920,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3893,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 3893,
											"end": 3921,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "tag",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10285,
											"end": 10304,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10285,
											"end": 10304,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "107"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3628,
											"end": 3630,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3610,
											"end": 3631,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3667,
											"end": 3669,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3640,
											"end": 3670,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3706,
											"end": 3740,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3679,
											"end": 3741,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3750,
											"end": 3784,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 3426,
											"end": 3826,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "tag",
											"source": 12,
											"value": "107"
										},
										{
											"begin": 10277,
											"end": 10345,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10363,
											"end": 10384,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10363,
											"end": 10384,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4033,
											"end": 4035,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4015,
											"end": 4036,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4072,
											"end": 4074,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4045,
											"end": 4075,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4111,
											"end": 4145,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4084,
											"end": 4146,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4155,
											"end": 4187,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 3831,
											"end": 4229,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "tag",
											"source": 12,
											"value": "110"
										},
										{
											"begin": 10355,
											"end": 10423,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10445,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10461,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10470,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10470,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10434,
											"end": 10470,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "PUSH",
											"source": 12,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10485,
											"end": 10517,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10154,
											"end": 10524,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "tag",
											"source": 12,
											"value": "79"
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10931,
											"end": 10955,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4133,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4140,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 4122,
											"end": 4149,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10997,
											"end": 11034,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10997,
											"end": 11034,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 10993,
											"end": 11236,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 10993,
											"end": 11236,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11078,
											"end": 11084,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11058,
											"end": 11074,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11058,
											"end": 11084,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 11058,
											"end": 11084,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4436,
											"end": 4438,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4418,
											"end": 4439,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4475,
											"end": 4477,
											"name": "PUSH",
											"source": 18,
											"value": "1D"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4448,
											"end": 4478,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4514,
											"end": 4545,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4487,
											"end": 4546,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 4234,
											"end": 4587,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "tag",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 11050,
											"end": 11118,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11211,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 11169,
											"end": 11174,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11176,
											"end": 11183,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11204,
											"end": 11210,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11185,
											"end": 11201,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11185,
											"end": 11210,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 11160,
											"end": 11168,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 11160,
											"end": 11211,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11160,
											"end": 11211,
											"name": "tag",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 11160,
											"end": 11211,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10921,
											"end": 11242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10801,
											"end": 11242,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7519,
											"end": 8170,
											"name": "tag",
											"source": 12,
											"value": "81"
										},
										{
											"begin": 7519,
											"end": 8170,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7645,
											"end": 7663,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7645,
											"end": 7663,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4794,
											"end": 4796,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4776,
											"end": 4797,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4833,
											"end": 4835,
											"name": "PUSH",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4806,
											"end": 4836,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4872,
											"end": 4906,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4845,
											"end": 4907,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4916,
											"end": 4951,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 4592,
											"end": 4993,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "tag",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 7637,
											"end": 7705,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7723,
											"end": 7739,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7723,
											"end": 7739,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5200,
											"end": 5202,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5182,
											"end": 5203,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 18,
											"value": "23"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5212,
											"end": 5242,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5278,
											"end": 5312,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5251,
											"end": 5313,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5322,
											"end": 5355,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 4998,
											"end": 5397,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "tag",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 7715,
											"end": 7779,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7839,
											"end": 7858,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 7861,
											"end": 7876,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 7915,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 7915,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 7915,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 7915,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5604,
											"end": 5606,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5586,
											"end": 5607,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5643,
											"end": 5645,
											"name": "PUSH",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5616,
											"end": 5646,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5682,
											"end": 5716,
											"name": "PUSH",
											"source": 18,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5655,
											"end": 5717,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 5402,
											"end": 5804,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "tag",
											"source": 12,
											"value": "130"
										},
										{
											"begin": 7886,
											"end": 7958,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8001,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8007,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8010,
											"end": 8030,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8010,
											"end": 8030,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8010,
											"end": 8030,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8030,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8030,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8063,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7992,
											"end": 8001,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "tag",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8104,
											"end": 8106,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8098,
											"end": 8102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "PUSH",
											"source": 12,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8108,
											"end": 8114,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "134"
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "tag",
											"source": 12,
											"value": "134"
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8115,
											"name": "LOG3",
											"source": 12
										},
										{
											"begin": 8126,
											"end": 8163,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 11826,
											"end": 11947,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 18,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "142"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 18,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 18,
											"value": "145"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "147"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 18,
											"value": "147"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "149"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 18,
											"value": "149"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "155"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 18,
											"value": "155"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "156"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 18,
											"value": "156"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "159"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 18,
											"value": "159"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "160"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 18,
											"value": "160"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "162"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 18,
											"value": "162"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "163"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 18,
											"value": "163"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "164"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 18,
											"value": "164"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 18,
											"value": "65"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 18,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 18,
											"value": "166"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "167"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 18,
											"value": "167"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "tag",
											"source": 18,
											"value": "87"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2862,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2857,
											"end": 2863,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 2854,
											"end": 2855,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2851,
											"end": 2864,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "169"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2906,
											"end": 2916,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 2901,
											"end": 2904,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2897,
											"end": 2917,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2894,
											"end": 2895,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2918,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2941,
											"end": 2945,
											"name": "PUSH",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 2938,
											"end": 2939,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 2946,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2969,
											"end": 2973,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 2966,
											"end": 2967,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2959,
											"end": 2974,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "tag",
											"source": 18,
											"value": "169"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-presets/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"eip/interface/IERC20.sol\":{\"keccak256\":\"0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592\",\"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA\"]},\"eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]},\"openzeppelin-presets/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x0429da8e9a940fceb58b83ea0425489dccf4f0c2178625dac6864c889c96f43f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1519284bd9276de5bb35f3fea2068e718518e179091ca494652b0fddfa1ea940\",\"dweb:/ipfs/QmTbZkyEFbgTLA8ehLgs29JLGaqrGdUNJQxagN8dFiiSma\"]},\"openzeppelin-presets/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1021,
								"contract": "openzeppelin-presets/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1027,
								"contract": "openzeppelin-presets/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1029,
								"contract": "openzeppelin-presets/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1031,
								"contract": "openzeppelin-presets/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 1033,
								"contract": "openzeppelin-presets/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "See {IERC20Permit-nonces}."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "See {IERC20Permit-permit}."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"eip/interface/IERC20.sol\":{\"keccak256\":\"0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592\",\"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA\"]},\"eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]},\"eip/interface/IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"lib/TWStrings.sol\":{\"keccak256\":\"0x397c71618c46cacdd241e5ce269e8084b49e4372e7170d4e8873a6b530da305d\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://f2fa573cf225c7e9c3a8b352c8a4bcb650ca22d15bd05335c301a3cac3599a81\",\"dweb:/ipfs/QmUCNUdwzLXq2DA1gKYjFJgjqosC8HqnXMd5udJ2GbKUfa\"]},\"openzeppelin-presets/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x0429da8e9a940fceb58b83ea0425489dccf4f0c2178625dac6864c889c96f43f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1519284bd9276de5bb35f3fea2068e718518e179091ca494652b0fddfa1ea940\",\"dweb:/ipfs/QmTbZkyEFbgTLA8ehLgs29JLGaqrGdUNJQxagN8dFiiSma\"]},\"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x409682c602fff6428b40be9c454a3dca04e3c891a9dec03ad923da083b336312\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://692a8d672cf6a5c87d4ff10520e7f440496fa3896fe4b3f0bd15a5af6155e032\",\"dweb:/ipfs/QmXnzi7Y3rP8wfRy71j5BsRPZAAmbQ2SMGcQdEdt4N7fYT\"]},\"openzeppelin-presets/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"openzeppelin-presets/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"openzeppelin-presets/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xe7c8a90c658962ae2d706fb5a4e522404b11a06347d36186e0d64a26d8f58d2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6b4d213258d6693acd3b6131f723e01bf2629c48520103986c5ec039f144f8\",\"dweb:/ipfs/QmQvzsASAkfs4BwPSKE4Quu3dxzseHNBehNntLyGfdwJuN\"]},\"openzeppelin-presets/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1021,
								"contract": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1027,
								"contract": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1029,
								"contract": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1031,
								"contract": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 1033,
								"contract": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 1614,
								"contract": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_struct(Counter)1863_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)1863_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Counters.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)1863_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)1863_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 1862,
										"contract": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-presets/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-presets/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-presets/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-presets/utils/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"openzeppelin-presets/utils/Counters.sol\":424:1395  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"openzeppelin-presets/utils/Counters.sol\":424:1395  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122086b3f489e3559785a65760e09d07ff1bd5ca3ada6e80cc0f1736ae54c8b47cd464736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122086b3f489e3559785a65760e09d07ff1bd5ca3ada6e80cc0f1736ae54c8b47cd464736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 0xB3 DELEGATECALL DUP10 0xE3 SSTORE SWAP8 DUP6 0xA6 JUMPI PUSH1 0xE0 SWAP14 SMOD SELFDESTRUCT SHL 0xD5 0xCA GASPRICE 0xDA PUSH15 0x80CC0F1736AE54C8B47CD464736F6C PUSH4 0x4300080B STOP CALLER ",
							"sourceMap": "424:971:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:15;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122086b3f489e3559785a65760e09d07ff1bd5ca3ada6e80cc0f1736ae54c8b47cd464736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 0xB3 DELEGATECALL DUP10 0xE3 SSTORE SWAP8 DUP6 0xA6 JUMPI PUSH1 0xE0 SWAP14 SMOD SELFDESTRUCT SHL 0xD5 0xCA GASPRICE 0xDA PUSH15 0x80CC0F1736AE54C8B47CD464736F6C PUSH4 0x4300080B STOP CALLER ",
							"sourceMap": "424:971:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite",
								"reset(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122086b3f489e3559785a65760e09d07ff1bd5ca3ada6e80cc0f1736ae54c8b47cd464736f6c634300080b0033",
									".code": [
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-presets/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-presets/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-presets/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":381:9280  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"openzeppelin-presets/utils/cryptography/ECDSA.sol\":381:9280  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208d4e0d2585ee3c2a67084789716f60e4eadff699adbcbf44b8042729f6b77f3f64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208d4e0d2585ee3c2a67084789716f60e4eadff699adbcbf44b8042729f6b77f3f64736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0x4E 0xD 0x25 DUP6 0xEE EXTCODECOPY 0x2A PUSH8 0x84789716F60E4EA 0xDF 0xF6 SWAP10 0xAD 0xBC 0xBF DIFFICULTY 0xB8 DIV 0x27 0x29 0xF6 0xB7 PUSH32 0x3F64736F6C634300080B00330000000000000000000000000000000000000000 ",
							"sourceMap": "381:8899:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;381:8899:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208d4e0d2585ee3c2a67084789716f60e4eadff699adbcbf44b8042729f6b77f3f64736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0x4E 0xD 0x25 DUP6 0xEE EXTCODECOPY 0x2A PUSH8 0x84789716F60E4EA 0xDF 0xF6 SWAP10 0xAD 0xBC 0xBF DIFFICULTY 0xB8 DIV 0x27 0x29 0xF6 0xB7 PUSH32 0x3F64736F6C634300080B00330000000000000000000000000000000000000000 ",
							"sourceMap": "381:8899:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 381,
									"end": 9280,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208d4e0d2585ee3c2a67084789716f60e4eadff699adbcbf44b8042729f6b77f3f64736f6c634300080b0033",
									".code": [
										{
											"begin": 381,
											"end": 9280,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 381,
											"end": 9280,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 381,
											"end": 9280,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 381,
											"end": 9280,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 381,
											"end": 9280,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 381,
											"end": 9280,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 381,
											"end": 9280,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 9280,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 381,
											"end": 9280,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-presets/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/TWStrings.sol\":{\"keccak256\":\"0x397c71618c46cacdd241e5ce269e8084b49e4372e7170d4e8873a6b530da305d\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://f2fa573cf225c7e9c3a8b352c8a4bcb650ca22d15bd05335c301a3cac3599a81\",\"dweb:/ipfs/QmUCNUdwzLXq2DA1gKYjFJgjqosC8HqnXMd5udJ2GbKUfa\"]},\"openzeppelin-presets/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xe7c8a90c658962ae2d706fb5a4e522404b11a06347d36186e0d64a26d8f58d2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6b4d213258d6693acd3b6131f723e01bf2629c48520103986c5ec039f144f8\",\"dweb:/ipfs/QmQvzsASAkfs4BwPSKE4Quu3dxzseHNBehNntLyGfdwJuN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-presets/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [],
					"devdoc": {
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-presets/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/TWStrings.sol\":{\"keccak256\":\"0x397c71618c46cacdd241e5ce269e8084b49e4372e7170d4e8873a6b530da305d\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://f2fa573cf225c7e9c3a8b352c8a4bcb650ca22d15bd05335c301a3cac3599a81\",\"dweb:/ipfs/QmUCNUdwzLXq2DA1gKYjFJgjqosC8HqnXMd5udJ2GbKUfa\"]},\"openzeppelin-presets/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xe7c8a90c658962ae2d706fb5a4e522404b11a06347d36186e0d64a26d8f58d2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6b4d213258d6693acd3b6131f723e01bf2629c48520103986c5ec039f144f8\",\"dweb:/ipfs/QmQvzsASAkfs4BwPSKE4Quu3dxzseHNBehNntLyGfdwJuN\"]},\"openzeppelin-presets/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"base/ERC20Base.sol": {
				"ast": {
					"absolutePath": "base/ERC20Base.sol",
					"exportedSymbols": {
						"Context": [
							1857
						],
						"ContractMetadata": [
							306
						],
						"Counters": [
							1931
						],
						"ECDSA": [
							2297
						],
						"EIP712": [
							2451
						],
						"ERC20": [
							1593
						],
						"ERC20Base": [
							123
						],
						"ERC20Permit": [
							1835
						],
						"IContractMetadata": [
							470
						],
						"IERC20": [
							193
						],
						"IERC20Metadata": [
							212
						],
						"IERC20Permit": [
							248
						],
						"IMulticall": [
							484
						],
						"IOwnable": [
							507
						],
						"Multicall": [
							365
						],
						"Ownable": [
							447
						],
						"TWAddress": [
							802
						],
						"TWStrings": [
							1005
						]
					},
					"id": 124,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:0"
						},
						{
							"absolutePath": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol",
							"file": "../openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 1836,
							"src": "66:72:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "extension/ContractMetadata.sol",
							"file": "../extension/ContractMetadata.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 307,
							"src": "140:43:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "extension/Multicall.sol",
							"file": "../extension/Multicall.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 366,
							"src": "184:36:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "extension/Ownable.sol",
							"file": "../extension/Ownable.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 448,
							"src": "221:34:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "ContractMetadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 306,
										"src": "915:16:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "915:16:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "Multicall",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 365,
										"src": "933:9:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "933:9:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 447,
										"src": "944:7:0"
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "944:7:0"
								},
								{
									"baseName": {
										"id": 13,
										"name": "ERC20Permit",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1835,
										"src": "953:11:0"
									},
									"id": 14,
									"nodeType": "InheritanceSpecifier",
									"src": "953:11:0"
								}
							],
							"canonicalName": "ERC20Base",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "257:634:0",
								"text": "  The `ERC20Base` smart contract implements the ERC20 standard.\n  It includes the following additions to standard ERC20 logic:\n      - Ability to mint & burn tokens via the provided `mint` & `burn` functions.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by\n                             presenting a message signed by the account."
							},
							"fullyImplemented": true,
							"id": 123,
							"linearizedBaseContracts": [
								123,
								1835,
								248,
								1593,
								212,
								193,
								1857,
								447,
								507,
								365,
								484,
								306,
								470
							],
							"name": "ERC20Base",
							"nameLocation": "902:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1234:40:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 26,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1256:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 27,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1256:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 25,
														"name": "_setupOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "1244:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 28,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1244:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 29,
												"nodeType": "ExpressionStatement",
												"src": "1244:23:0"
											}
										]
									},
									"id": 31,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 21,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 16,
													"src": "1218:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"id": 22,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 18,
													"src": "1225:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												}
											],
											"id": 23,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 20,
												"name": "ERC20Permit",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1835,
												"src": "1206:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1206:27:0"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "_name",
												"nameLocation": "1176:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "1162:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 15,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1162:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "_symbol",
												"nameLocation": "1197:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "1183:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 17,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1183:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:44:0"
									},
									"returnParameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1234:0:0"
									},
									"scope": 123,
									"src": "1150:124:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1862:148:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 40,
																"name": "_canMint",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 108,
																"src": "1880:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1880:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1892:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
																"typeString": "literal_string \"Not authorized to mint.\""
															},
															"value": "Not authorized to mint."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
																"typeString": "literal_string \"Not authorized to mint.\""
															}
														],
														"id": 39,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1872:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 43,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1872:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 44,
												"nodeType": "ExpressionStatement",
												"src": "1872:46:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 48,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 46,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 36,
																"src": "1936:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 47,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1947:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1936:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d696e74696e67207a65726f20746f6b656e732e",
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1950:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7acedc89dd3658da26d0488f7e55737f51bdbd8424532db0708cd962cbb1712b",
																"typeString": "literal_string \"Minting zero tokens.\""
															},
															"value": "Minting zero tokens."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7acedc89dd3658da26d0488f7e55737f51bdbd8424532db0708cd962cbb1712b",
																"typeString": "literal_string \"Minting zero tokens.\""
															}
														],
														"id": 45,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1928:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1928:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 51,
												"nodeType": "ExpressionStatement",
												"src": "1928:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 53,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 34,
															"src": "1990:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 54,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 36,
															"src": "1995:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 52,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1410,
														"src": "1984:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 55,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1984:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 56,
												"nodeType": "ExpressionStatement",
												"src": "1984:19:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1461:335:0",
										"text": "  @notice          Lets an authorized address mint tokens to a recipient.\n  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.\n  @param _to       The recipient of the tokens to mint.\n  @param _amount   Quantity of tokens to mint."
									},
									"functionSelector": "449a52f8",
									"id": 58,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mintTo",
									"nameLocation": "1810:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "1825:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "1817:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 33,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1817:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1838:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "1830:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 35,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1816:30:0"
									},
									"returnParameters": {
										"id": 38,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1862:0:0"
									},
									"scope": 123,
									"src": "1801:209:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 80,
										"nodeType": "Block",
										"src": "2281:116:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 66,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2309:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 67,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2309:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 65,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1104,
																	"src": "2299:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2299:21:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 69,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 61,
																"src": "2324:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2299:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f7420656e6f7567682062616c616e6365",
															"id": 71,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2333:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
																"typeString": "literal_string \"not enough balance\""
															},
															"value": "not enough balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
																"typeString": "literal_string \"not enough balance\""
															}
														],
														"id": 64,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2291:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 72,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2291:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 73,
												"nodeType": "ExpressionStatement",
												"src": "2291:63:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 75,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2370:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 76,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2370:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 77,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 61,
															"src": "2382:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 74,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1482,
														"src": "2364:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2364:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 79,
												"nodeType": "ExpressionStatement",
												"src": "2364:26:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "2016:212:0",
										"text": "  @notice          Lets an owner a given amount of their tokens.\n  @dev             Caller should own the `_amount` of tokens.\n  @param _amount   The number of tokens to burn."
									},
									"functionSelector": "42966c68",
									"id": 81,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "2242:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2255:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "2247:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 60,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2247:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2246:17:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2281:0:0"
									},
									"scope": 123,
									"src": "2233:164:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										305
									],
									"body": {
										"id": 94,
										"nodeType": "Block",
										"src": "2766:45:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 88,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2783:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 89,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2783:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 90,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 399,
															"src": "2797:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 91,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2797:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2783:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 87,
												"id": 93,
												"nodeType": "Return",
												"src": "2776:28:0"
											}
										]
									},
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "2600:85:0",
										"text": "@dev Returns whether contract metadata can be set in the given execution context."
									},
									"id": 95,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_canSetContractURI",
									"nameLocation": "2699:18:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 84,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2742:8:0"
									},
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2717:2:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "2760:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 85,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2760:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2759:6:0"
									},
									"scope": 123,
									"src": "2690:121:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 107,
										"nodeType": "Block",
										"src": "2956:45:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 101,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2973:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 102,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2973:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 103,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 399,
															"src": "2987:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 104,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2987:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2973:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 100,
												"id": 106,
												"nodeType": "Return",
												"src": "2966:28:0"
											}
										]
									},
									"documentation": {
										"id": 96,
										"nodeType": "StructuredDocumentation",
										"src": "2817:77:0",
										"text": "@dev Returns whether tokens can be minted in the given execution context."
									},
									"id": 108,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_canMint",
									"nameLocation": "2908:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2916:2:0"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 108,
												"src": "2950:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 98,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2950:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2949:6:0"
									},
									"scope": 123,
									"src": "2899:102:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										446
									],
									"body": {
										"id": 121,
										"nodeType": "Block",
										"src": "3155:45:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 115,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3172:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3172:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 117,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 399,
															"src": "3186:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 118,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3186:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3172:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 114,
												"id": 120,
												"nodeType": "Return",
												"src": "3165:28:0"
											}
										]
									},
									"documentation": {
										"id": 109,
										"nodeType": "StructuredDocumentation",
										"src": "3007:73:0",
										"text": "@dev Returns whether owner can be set in the given execution context."
									},
									"id": 122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_canSetOwner",
									"nameLocation": "3094:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 111,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3131:8:0"
									},
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3106:2:0"
									},
									"returnParameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "3149:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 112,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3149:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3148:6:0"
									},
									"scope": 123,
									"src": "3085:115:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 124,
							"src": "893:2309:0",
							"usedErrors": []
						}
					],
					"src": "39:3164:0"
				},
				"id": 0
			},
			"eip/interface/IERC20.sol": {
				"ast": {
					"absolutePath": "eip/interface/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							193
						]
					},
					"id": 194,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 125,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 126,
								"nodeType": "StructuredDocumentation",
								"src": "64:88:1",
								"text": " @title ERC20 interface\n @dev see https://github.com/ethereum/EIPs/issues/20"
							},
							"fullyImplemented": false,
							"id": 193,
							"linearizedBaseContracts": [
								193
							],
							"name": "IERC20",
							"nameLocation": "163:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "18160ddd",
									"id": 131,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "185:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "196:2:1"
									},
									"returnParameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "222:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "222:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "221:9:1"
									},
									"scope": 193,
									"src": "176:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "70a08231",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "246:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "who",
												"nameLocation": "264:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "256:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "256:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "255:13:1"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "292:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 135,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "292:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "291:9:1"
									},
									"scope": 193,
									"src": "237:64:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "dd62ed3e",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "316:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "334:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "326:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "326:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "349:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "341:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "341:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "325:32:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "381:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "381:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "380:9:1"
									},
									"scope": 193,
									"src": "307:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a9059cbb",
									"id": 156,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "405:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "422:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "414:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "434:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "426:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:27:1"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "459:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 153,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "459:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "458:6:1"
									},
									"scope": 193,
									"src": "396:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "095ea7b3",
									"id": 165,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "480:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "496:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "488:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "488:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "505:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 159,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "487:32:1"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "538:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 162,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "538:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "537:6:1"
									},
									"scope": 193,
									"src": "471:73:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "23b872dd",
									"id": 176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "559:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "589:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "581:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "581:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "611:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "603:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "631:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "623:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "623:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:71:1"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "661:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 173,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "661:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:6:1"
									},
									"scope": 193,
									"src": "550:117:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"id": 184,
									"name": "Transfer",
									"nameLocation": "679:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "704:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "688:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "688:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "726:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "710:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "710:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "738:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "730:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "687:57:1"
									},
									"src": "673:72:1"
								},
								{
									"anonymous": false,
									"id": 192,
									"name": "Approval",
									"nameLocation": "757:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "782:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "766:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "766:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "805:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "789:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "789:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "822:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "814:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "814:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "765:63:1"
									},
									"src": "751:78:1"
								}
							],
							"scope": 194,
							"src": "153:678:1",
							"usedErrors": []
						}
					],
					"src": "39:793:1"
				},
				"id": 1
			},
			"eip/interface/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "eip/interface/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20Metadata": [
							212
						]
					},
					"id": 213,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 195,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 196,
								"nodeType": "StructuredDocumentation",
								"src": "64:96:2",
								"text": " @title ERC20Metadata interface\n @dev see https://github.com/ethereum/EIPs/issues/20"
							},
							"fullyImplemented": false,
							"id": 212,
							"linearizedBaseContracts": [
								212
							],
							"name": "IERC20Metadata",
							"nameLocation": "171:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "06fdde03",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "201:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "205:2:2"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "231:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 198,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "231:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "230:15:2"
									},
									"scope": 212,
									"src": "192:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "95d89b41",
									"id": 206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "261:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "267:2:2"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "293:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 203,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "293:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "292:15:2"
									},
									"scope": 212,
									"src": "252:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "313ce567",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "323:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "331:2:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "357:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 208,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "357:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "356:7:2"
									},
									"scope": 212,
									"src": "314:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 213,
							"src": "161:205:2",
							"usedErrors": []
						}
					],
					"src": "39:328:2"
				},
				"id": 2
			},
			"eip/interface/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "eip/interface/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							248
						]
					},
					"id": 249,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 214,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 215,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 248,
							"linearizedBaseContracts": [
								248
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:3",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 233,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1471:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1494:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1519:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1542:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1568:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 225,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1585:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 227,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "1604:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 229,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:3"
									},
									"returnParameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:3"
									},
									"scope": 248,
									"src": "1446:183:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 234,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 241,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1950:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:3"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1988:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:3"
									},
									"scope": 248,
									"src": "1934:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 247,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:3"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "2240:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 244,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:3"
									},
									"scope": 248,
									"src": "2189:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 249,
							"src": "620:1631:3",
							"usedErrors": []
						}
					],
					"src": "114:2138:3"
				},
				"id": 3
			},
			"extension/ContractMetadata.sol": {
				"ast": {
					"absolutePath": "extension/ContractMetadata.sol",
					"exportedSymbols": {
						"ContractMetadata": [
							306
						],
						"IContractMetadata": [
							470
						]
					},
					"id": 307,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 250,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:4"
						},
						{
							"absolutePath": "extension/interface/IContractMetadata.sol",
							"file": "./interface/IContractMetadata.sol",
							"id": 251,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 307,
							"sourceUnit": 471,
							"src": "66:43:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 253,
										"name": "IContractMetadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 470,
										"src": "470:17:4"
									},
									"id": 254,
									"nodeType": "InheritanceSpecifier",
									"src": "470:17:4"
								}
							],
							"canonicalName": "ContractMetadata",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 252,
								"nodeType": "StructuredDocumentation",
								"src": "111:319:4",
								"text": "  @title   Contract Metadata\n  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\n           for you contract.\n           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea."
							},
							"fullyImplemented": false,
							"id": 306,
							"linearizedBaseContracts": [
								306,
								470
							],
							"name": "ContractMetadata",
							"nameLocation": "450:16:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										456
									],
									"constant": false,
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "494:46:4",
										"text": "@notice Returns the contract metadata URI."
									},
									"functionSelector": "e8a3d485",
									"id": 258,
									"mutability": "mutable",
									"name": "contractURI",
									"nameLocation": "568:11:4",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 257,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "559:8:4"
									},
									"scope": 306,
									"src": "545:34:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 256,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "545:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "public"
								},
								{
									"baseFunctions": [
										462
									],
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "1045:126:4",
										"statements": [
											{
												"condition": {
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1059:21:4",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 265,
															"name": "_canSetContractURI",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "1060:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1060:20:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 273,
												"nodeType": "IfStatement",
												"src": "1055:76:4",
												"trueBody": {
													"id": 272,
													"nodeType": "Block",
													"src": "1082:49:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "4e6f7420617574686f72697a6564",
																		"id": 269,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1103:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
																			"typeString": "literal_string \"Not authorized\""
																		},
																		"value": "Not authorized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
																			"typeString": "literal_string \"Not authorized\""
																		}
																	],
																	"id": 268,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "1096:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1096:24:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 271,
															"nodeType": "ExpressionStatement",
															"src": "1096:24:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 275,
															"name": "_uri",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1159:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 274,
														"name": "_setupContractURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 299,
														"src": "1141:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1141:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "1141:23:4"
											}
										]
									},
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "586:392:4",
										"text": "  @notice         Lets a contract admin set the URI for contract-level metadata.\n  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\n                  See {_canSetContractURI}.\n                  Emits {ContractURIUpdated Event}.\n  @param _uri     keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
									},
									"functionSelector": "938e3d7b",
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setContractURI",
									"nameLocation": "992:14:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 263,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1036:8:4"
									},
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "_uri",
												"nameLocation": "1021:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1007:18:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 260,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1007:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1006:20:4"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1045:0:4"
									},
									"scope": 306,
									"src": "983:188:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "1309:129:4",
										"statements": [
											{
												"assignments": [
													286
												],
												"declarations": [
													{
														"constant": false,
														"id": 286,
														"mutability": "mutable",
														"name": "prevURI",
														"nameLocation": "1333:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 298,
														"src": "1319:21:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 285,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1319:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 288,
												"initialValue": {
													"id": 287,
													"name": "contractURI",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 258,
													"src": "1343:11:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1319:35:4"
											},
											{
												"expression": {
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 289,
														"name": "contractURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 258,
														"src": "1364:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 290,
														"name": "_uri",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 282,
														"src": "1378:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1364:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 292,
												"nodeType": "ExpressionStatement",
												"src": "1364:18:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 294,
															"name": "prevURI",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "1417:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 295,
															"name": "_uri",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 282,
															"src": "1426:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 293,
														"name": "ContractURIUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 469,
														"src": "1398:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1398:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 297,
												"nodeType": "EmitStatement",
												"src": "1393:38:4"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "1177:71:4",
										"text": "@dev Lets a contract admin set the URI for contract-level metadata."
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupContractURI",
									"nameLocation": "1262:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "_uri",
												"nameLocation": "1294:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "1280:18:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 281,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1280:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1279:20:4"
									},
									"returnParameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1309:0:4"
									},
									"scope": 306,
									"src": "1253:185:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 300,
										"nodeType": "StructuredDocumentation",
										"src": "1444:85:4",
										"text": "@dev Returns whether contract metadata can be set in the given execution context."
									},
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_canSetContractURI",
									"nameLocation": "1543:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1561:2:4"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1595:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 302,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1595:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1594:6:4"
									},
									"scope": 306,
									"src": "1534:67:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 307,
							"src": "432:1171:4",
							"usedErrors": []
						}
					],
					"src": "39:1565:4"
				},
				"id": 4
			},
			"extension/Multicall.sol": {
				"ast": {
					"absolutePath": "extension/Multicall.sol",
					"exportedSymbols": {
						"IMulticall": [
							484
						],
						"Multicall": [
							365
						],
						"TWAddress": [
							802
						]
					},
					"id": 366,
					"license": "Apache 2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 308,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:5"
						},
						{
							"absolutePath": "lib/TWAddress.sol",
							"file": "../lib/TWAddress.sol",
							"id": 309,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 366,
							"sourceUnit": 803,
							"src": "66:30:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "extension/interface/IMulticall.sol",
							"file": "./interface/IMulticall.sol",
							"id": 310,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 366,
							"sourceUnit": 485,
							"src": "97:36:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 312,
										"name": "IMulticall",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 484,
										"src": "283:10:5"
									},
									"id": 313,
									"nodeType": "InheritanceSpecifier",
									"src": "283:10:5"
								}
							],
							"canonicalName": "Multicall",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 311,
								"nodeType": "StructuredDocumentation",
								"src": "135:125:5",
								"text": " @dev Provides a function to batch together multiple calls in a single external call.\n _Available since v4.1._"
							},
							"fullyImplemented": true,
							"id": 365,
							"linearizedBaseContracts": [
								365,
								484
							],
							"name": "Multicall",
							"nameLocation": "270:9:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										483
									],
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "779:218:5",
										"statements": [
											{
												"expression": {
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 324,
														"name": "results",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 322,
														"src": "789:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
															"typeString": "bytes memory[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 328,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 317,
																	"src": "811:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																		"typeString": "bytes calldata[] calldata"
																	}
																},
																"id": 329,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "811:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "799:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (bytes memory[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 325,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "803:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																},
																"id": 326,
																"nodeType": "ArrayTypeName",
																"src": "803:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
																	"typeString": "bytes[]"
																}
															}
														},
														"id": 330,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "799:24:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
															"typeString": "bytes memory[] memory"
														}
													},
													"src": "789:34:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
														"typeString": "bytes memory[] memory"
													}
												},
												"id": 332,
												"nodeType": "ExpressionStatement",
												"src": "789:34:5"
											},
											{
												"body": {
													"id": 359,
													"nodeType": "Block",
													"src": "875:92:5",
													"statements": [
														{
															"expression": {
																"id": 357,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 344,
																		"name": "results",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 322,
																		"src": "889:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																			"typeString": "bytes memory[] memory"
																		}
																	},
																	"id": 346,
																	"indexExpression": {
																		"id": 345,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 334,
																		"src": "897:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "889:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 351,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "941:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Multicall_$365",
																						"typeString": "contract Multicall"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Multicall_$365",
																						"typeString": "contract Multicall"
																					}
																				],
																				"id": 350,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "933:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 349,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "933:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "933:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 353,
																				"name": "data",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 317,
																				"src": "948:4:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																					"typeString": "bytes calldata[] calldata"
																				}
																			},
																			"id": 355,
																			"indexExpression": {
																				"id": 354,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 334,
																				"src": "953:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "948:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_calldata_ptr",
																				"typeString": "bytes calldata"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_bytes_calldata_ptr",
																				"typeString": "bytes calldata"
																			}
																		],
																		"expression": {
																			"id": 347,
																			"name": "TWAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 802,
																			"src": "902:9:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TWAddress_$802_$",
																				"typeString": "type(library TWAddress)"
																			}
																		},
																		"id": 348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "functionDelegateCall",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 735,
																		"src": "902:30:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (address,bytes memory) returns (bytes memory)"
																		}
																	},
																	"id": 356,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "902:54:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"src": "889:67:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 358,
															"nodeType": "ExpressionStatement",
															"src": "889:67:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 337,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 334,
														"src": "853:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 338,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 317,
															"src": "857:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																"typeString": "bytes calldata[] calldata"
															}
														},
														"id": 339,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "857:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "853:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 360,
												"initializationExpression": {
													"assignments": [
														334
													],
													"declarations": [
														{
															"constant": false,
															"id": 334,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "846:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 360,
															"src": "838:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 333,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "838:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 336,
													"initialValue": {
														"hexValue": "30",
														"id": 335,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "850:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "838:13:5"
												},
												"loopExpression": {
													"expression": {
														"id": 342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "870:3:5",
														"subExpression": {
															"id": 341,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 334,
															"src": "870:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 343,
													"nodeType": "ExpressionStatement",
													"src": "870:3:5"
												},
												"nodeType": "ForStatement",
												"src": "833:134:5"
											},
											{
												"expression": {
													"id": 361,
													"name": "results",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 322,
													"src": "983:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
														"typeString": "bytes memory[] memory"
													}
												},
												"functionReturnParameters": 323,
												"id": 362,
												"nodeType": "Return",
												"src": "976:14:5"
											}
										]
									},
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "300:373:5",
										"text": "  @notice Receives and executes a batch of function calls on this contract.\n  @dev Receives and executes a batch of function calls on this contract.\n  @param data The bytes data that makes up the batch of function calls to execute.\n  @return results The bytes data that makes up the result of the batch of function calls executed."
									},
									"functionSelector": "ac9650d8",
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nameLocation": "687:9:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 319,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "737:8:5"
									},
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "714:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "697:21:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 315,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "697:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 316,
													"nodeType": "ArrayTypeName",
													"src": "697:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "696:23:5"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "results",
												"nameLocation": "770:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "755:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 320,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "755:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 321,
													"nodeType": "ArrayTypeName",
													"src": "755:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "754:24:5"
									},
									"scope": 365,
									"src": "678:319:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 366,
							"src": "261:738:5",
							"usedErrors": []
						}
					],
					"src": "39:961:5"
				},
				"id": 5
			},
			"extension/Ownable.sol": {
				"ast": {
					"absolutePath": "extension/Ownable.sol",
					"exportedSymbols": {
						"IOwnable": [
							507
						],
						"Ownable": [
							447
						]
					},
					"id": 448,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 367,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:6"
						},
						{
							"absolutePath": "extension/interface/IOwnable.sol",
							"file": "./interface/IOwnable.sol",
							"id": 368,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 448,
							"sourceUnit": 508,
							"src": "66:34:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 370,
										"name": "IOwnable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 507,
										"src": "494:8:6"
									},
									"id": 371,
									"nodeType": "InheritanceSpecifier",
									"src": "494:8:6"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 369,
								"nodeType": "StructuredDocumentation",
								"src": "102:361:6",
								"text": "  @title   Ownable\n  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n           information about who the contract's owner is."
							},
							"fullyImplemented": false,
							"id": 447,
							"linearizedBaseContracts": [
								447,
								507
							],
							"name": "Ownable",
							"nameLocation": "483:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "509:63:6",
										"text": "@dev Owner of the contract (purpose: OpenSea compatibility)"
									},
									"id": 374,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "593:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 447,
									"src": "577:22:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 373,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "577:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 388,
										"nodeType": "Block",
										"src": "676:102:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 377,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "690:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 378,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "690:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 379,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 374,
														"src": "704:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "690:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 386,
												"nodeType": "IfStatement",
												"src": "686:75:6",
												"trueBody": {
													"id": 385,
													"nodeType": "Block",
													"src": "712:49:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "4e6f7420617574686f72697a6564",
																		"id": 382,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "733:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
																			"typeString": "literal_string \"Not authorized\""
																		},
																		"value": "Not authorized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
																			"typeString": "literal_string \"Not authorized\""
																		}
																	],
																	"id": 381,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "726:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 383,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "726:24:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 384,
															"nodeType": "ExpressionStatement",
															"src": "726:24:6"
														}
													]
												}
											},
											{
												"id": 387,
												"nodeType": "PlaceholderStatement",
												"src": "770:1:6"
											}
										]
									},
									"documentation": {
										"id": 375,
										"nodeType": "StructuredDocumentation",
										"src": "606:44:6",
										"text": "@dev Reverts if caller is not the owner."
									},
									"id": 389,
									"name": "onlyOwner",
									"nameLocation": "664:9:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "673:2:6"
									},
									"src": "655:123:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										493
									],
									"body": {
										"id": 398,
										"nodeType": "Block",
										"src": "907:30:6",
										"statements": [
											{
												"expression": {
													"id": 396,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 374,
													"src": "924:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 395,
												"id": 397,
												"nodeType": "Return",
												"src": "917:13:6"
											}
										]
									},
									"documentation": {
										"id": 390,
										"nodeType": "StructuredDocumentation",
										"src": "784:62:6",
										"text": "  @notice Returns the owner of the contract."
									},
									"functionSelector": "8da5cb5b",
									"id": 399,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "860:5:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 392,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "880:8:6"
									},
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:2:6"
									},
									"returnParameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "898:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "898:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "897:9:6"
									},
									"scope": 447,
									"src": "851:86:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										499
									],
									"body": {
										"id": 419,
										"nodeType": "Block",
										"src": "1168:118:6",
										"statements": [
											{
												"condition": {
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1182:15:6",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 406,
															"name": "_canSetOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "1183:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1183:14:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 414,
												"nodeType": "IfStatement",
												"src": "1178:70:6",
												"trueBody": {
													"id": 413,
													"nodeType": "Block",
													"src": "1199:49:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "4e6f7420617574686f72697a6564",
																		"id": 410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1220:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
																			"typeString": "literal_string \"Not authorized\""
																		},
																		"value": "Not authorized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
																			"typeString": "literal_string \"Not authorized\""
																		}
																	],
																	"id": 409,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "1213:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1213:24:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 412,
															"nodeType": "ExpressionStatement",
															"src": "1213:24:6"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 416,
															"name": "_newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 402,
															"src": "1269:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 415,
														"name": "_setupOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "1257:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1257:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 418,
												"nodeType": "ExpressionStatement",
												"src": "1257:22:6"
											}
										]
									},
									"documentation": {
										"id": 400,
										"nodeType": "StructuredDocumentation",
										"src": "943:165:6",
										"text": "  @notice Lets an authorized wallet set a new owner for the contract.\n  @param _newOwner The address to set as the new owner of the contract."
									},
									"functionSelector": "13af4035",
									"id": 420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nameLocation": "1122:8:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 404,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1159:8:6"
									},
									"parameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "_newOwner",
												"nameLocation": "1139:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "1131:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 401,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1131:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1130:19:6"
									},
									"returnParameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1168:0:6"
									},
									"scope": 447,
									"src": "1113:173:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 439,
										"nodeType": "Block",
										"src": "1450:123:6",
										"statements": [
											{
												"assignments": [
													427
												],
												"declarations": [
													{
														"constant": false,
														"id": 427,
														"mutability": "mutable",
														"name": "_prevOwner",
														"nameLocation": "1468:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 439,
														"src": "1460:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 426,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1460:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 429,
												"initialValue": {
													"id": 428,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 374,
													"src": "1481:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1460:27:6"
											},
											{
												"expression": {
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 430,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 374,
														"src": "1497:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 431,
														"name": "_newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 423,
														"src": "1506:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1497:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 433,
												"nodeType": "ExpressionStatement",
												"src": "1497:18:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 435,
															"name": "_prevOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "1544:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 436,
															"name": "_newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "1556:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 434,
														"name": "OwnerUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1531:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:35:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 438,
												"nodeType": "EmitStatement",
												"src": "1526:40:6"
											}
										]
									},
									"documentation": {
										"id": 421,
										"nodeType": "StructuredDocumentation",
										"src": "1292:104:6",
										"text": "@dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin."
									},
									"id": 440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupOwner",
									"nameLocation": "1410:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "_newOwner",
												"nameLocation": "1430:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "1422:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 422,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1422:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1421:19:6"
									},
									"returnParameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1450:0:6"
									},
									"scope": 447,
									"src": "1401:172:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 441,
										"nodeType": "StructuredDocumentation",
										"src": "1579:73:6",
										"text": "@dev Returns whether owner can be set in the given execution context."
									},
									"id": 446,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_canSetOwner",
									"nameLocation": "1666:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1678:2:6"
									},
									"returnParameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "1712:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 443,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1712:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1711:6:6"
									},
									"scope": 447,
									"src": "1657:61:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 448,
							"src": "465:1255:6",
							"usedErrors": []
						}
					],
					"src": "39:1682:6"
				},
				"id": 6
			},
			"extension/interface/IContractMetadata.sol": {
				"ast": {
					"absolutePath": "extension/interface/IContractMetadata.sol",
					"exportedSymbols": {
						"IContractMetadata": [
							470
						]
					},
					"id": 471,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 449,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IContractMetadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 450,
								"nodeType": "StructuredDocumentation",
								"src": "66:264:7",
								"text": "  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\n  for you contract.\n  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea."
							},
							"fullyImplemented": false,
							"id": 470,
							"linearizedBaseContracts": [
								470
							],
							"name": "IContractMetadata",
							"nameLocation": "342:17:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "366:50:7",
										"text": "@dev Returns the metadata URI of the contract."
									},
									"functionSelector": "e8a3d485",
									"id": 456,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "contractURI",
									"nameLocation": "430:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "441:2:7"
									},
									"returnParameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "467:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 453,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "467:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "466:15:7"
									},
									"scope": 470,
									"src": "421:61:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 457,
										"nodeType": "StructuredDocumentation",
										"src": "488:148:7",
										"text": "  @dev Sets contract URI for the storefront-level metadata of the contract.\n       Only module admin can call this function."
									},
									"functionSelector": "938e3d7b",
									"id": 462,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setContractURI",
									"nameLocation": "650:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "_uri",
												"nameLocation": "681:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "665:20:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 458,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "665:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "664:22:7"
									},
									"returnParameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "695:0:7"
									},
									"scope": 470,
									"src": "641:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 463,
										"nodeType": "StructuredDocumentation",
										"src": "702:50:7",
										"text": "@dev Emitted when the contract URI is updated."
									},
									"id": 469,
									"name": "ContractURIUpdated",
									"nameLocation": "763:18:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"indexed": false,
												"mutability": "mutable",
												"name": "prevURI",
												"nameLocation": "789:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "782:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 464,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "782:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 467,
												"indexed": false,
												"mutability": "mutable",
												"name": "newURI",
												"nameLocation": "805:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "798:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 466,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "798:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "781:31:7"
									},
									"src": "757:56:7"
								}
							],
							"scope": 471,
							"src": "332:483:7",
							"usedErrors": []
						}
					],
					"src": "39:777:7"
				},
				"id": 7
			},
			"extension/interface/IMulticall.sol": {
				"ast": {
					"absolutePath": "extension/interface/IMulticall.sol",
					"exportedSymbols": {
						"IMulticall": [
							484
						]
					},
					"id": 485,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 472,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IMulticall",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 473,
								"nodeType": "StructuredDocumentation",
								"src": "59:125:8",
								"text": " @dev Provides a function to batch together multiple calls in a single external call.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 484,
							"linearizedBaseContracts": [
								484
							],
							"name": "IMulticall",
							"nameLocation": "195:10:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "212:89:8",
										"text": " @dev Receives and executes a batch of function calls on this contract."
									},
									"functionSelector": "ac9650d8",
									"id": 483,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nameLocation": "315:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "342:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "325:21:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 475,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "325:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 476,
													"nodeType": "ArrayTypeName",
													"src": "325:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:23:8"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "results",
												"nameLocation": "381:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "366:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 479,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "366:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 480,
													"nodeType": "ArrayTypeName",
													"src": "366:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "365:24:8"
									},
									"scope": 484,
									"src": "306:84:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 485,
							"src": "185:207:8",
							"usedErrors": []
						}
					],
					"src": "32:361:8"
				},
				"id": 8
			},
			"extension/interface/IOwnable.sol": {
				"ast": {
					"absolutePath": "extension/interface/IOwnable.sol",
					"exportedSymbols": {
						"IOwnable": [
							507
						]
					},
					"id": 508,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 486,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IOwnable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 487,
								"nodeType": "StructuredDocumentation",
								"src": "66:313:9",
								"text": "  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\n  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\n  information about who the contract's owner is."
							},
							"fullyImplemented": false,
							"id": 507,
							"linearizedBaseContracts": [
								507
							],
							"name": "IOwnable",
							"nameLocation": "391:8:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 488,
										"nodeType": "StructuredDocumentation",
										"src": "406:43:9",
										"text": "@dev Returns the owner of the contract."
									},
									"functionSelector": "8da5cb5b",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "463:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "468:2:9"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "494:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 490,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "494:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "493:9:9"
									},
									"scope": 507,
									"src": "454:49:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "509:100:9",
										"text": "@dev Lets a module admin set a new owner for the contract. The new owner must be a module admin."
									},
									"functionSelector": "13af4035",
									"id": 499,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nameLocation": "623:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "_newOwner",
												"nameLocation": "640:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 499,
												"src": "632:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "631:19:9"
									},
									"returnParameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:0:9"
									},
									"scope": 507,
									"src": "614:46:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 500,
										"nodeType": "StructuredDocumentation",
										"src": "666:41:9",
										"text": "@dev Emitted when a new Owner is set."
									},
									"id": 506,
									"name": "OwnerUpdated",
									"nameLocation": "718:12:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 502,
												"indexed": true,
												"mutability": "mutable",
												"name": "prevOwner",
												"nameLocation": "747:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "731:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "731:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 504,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "774:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "758:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 503,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "758:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "730:53:9"
									},
									"src": "712:72:9"
								}
							],
							"scope": 508,
							"src": "381:405:9",
							"usedErrors": []
						}
					],
					"src": "39:748:9"
				},
				"id": 9
			},
			"lib/TWAddress.sol": {
				"ast": {
					"absolutePath": "lib/TWAddress.sol",
					"exportedSymbols": {
						"TWAddress": [
							802
						]
					},
					"id": 803,
					"license": "Apache 2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 509,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TWAddress",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 510,
								"nodeType": "StructuredDocumentation",
								"src": "66:67:10",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 802,
							"linearizedBaseContracts": [
								802
							],
							"name": "TWAddress",
							"nameLocation": "142:9:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 524,
										"nodeType": "Block",
										"src": "1183:254:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 518,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 513,
																"src": "1407:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1407:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 520,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1407:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1429:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1407:23:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 517,
												"id": 523,
												"nodeType": "Return",
												"src": "1400:30:10"
											}
										]
									},
									"documentation": {
										"id": 511,
										"nodeType": "StructuredDocumentation",
										"src": "158:954:10",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1126:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1145:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "1137:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 512,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1137:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1136:17:10"
									},
									"returnParameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "1177:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 515,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1177:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1176:6:10"
									},
									"scope": 802,
									"src": "1117:320:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "2427:243:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 536,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2453:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_TWAddress_$802",
																				"typeString": "library TWAddress"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_TWAddress_$802",
																				"typeString": "library TWAddress"
																			}
																		],
																		"id": 535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2445:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 534,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2445:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 537,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2445:13:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 538,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2445:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 539,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 530,
																"src": "2470:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2445:31:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:31:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 533,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2437:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2437:73:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 543,
												"nodeType": "ExpressionStatement",
												"src": "2437:73:10"
											},
											{
												"assignments": [
													545,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 545,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2527:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 558,
														"src": "2522:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 544,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2522:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 552,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 550,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2572:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 546,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 528,
																"src": "2540:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 547,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2540:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 549,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 548,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 530,
																"src": "2563:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2540:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2540:35:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2521:54:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 554,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 545,
															"src": "2593:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2602:60:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 553,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2585:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2585:78:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 557,
												"nodeType": "ExpressionStatement",
												"src": "2585:78:10"
											}
										]
									},
									"documentation": {
										"id": 526,
										"nodeType": "StructuredDocumentation",
										"src": "1443:908:10",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2365:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2391:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "2375:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2375:15:10",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2410:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "2402:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2402:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:43:10"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2427:0:10"
									},
									"scope": 802,
									"src": "2356:314:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 575,
										"nodeType": "Block",
										"src": "3501:84:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 570,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 562,
															"src": "3531:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 571,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "3539:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3545:32:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 569,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															576,
															596
														],
														"referencedDeclaration": 596,
														"src": "3518:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3518:60:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 568,
												"id": 574,
												"nodeType": "Return",
												"src": "3511:67:10"
											}
										]
									},
									"documentation": {
										"id": 560,
										"nodeType": "StructuredDocumentation",
										"src": "2676:731:10",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 576,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3421:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3442:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "3434:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 561,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3434:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3463:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "3450:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 563,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3450:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3433:35:10"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "3487:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 566,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3487:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3486:14:10"
									},
									"scope": 802,
									"src": "3412:173:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 595,
										"nodeType": "Block",
										"src": "3954:76:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 589,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "3993:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 590,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 581,
															"src": "4001:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 591,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4007:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 592,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 583,
															"src": "4010:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 588,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															616,
															666
														],
														"referencedDeclaration": 666,
														"src": "3971:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 593,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3971:52:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 587,
												"id": 594,
												"nodeType": "Return",
												"src": "3964:59:10"
											}
										]
									},
									"documentation": {
										"id": 577,
										"nodeType": "StructuredDocumentation",
										"src": "3591:211:10",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 596,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3816:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3846:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "3838:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3838:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3875:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "3862:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 580,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3862:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3903:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "3889:26:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 582,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3889:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3828:93:10"
									},
									"returnParameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "3940:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 585,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3940:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3939:14:10"
									},
									"scope": 802,
									"src": "3807:223:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 615,
										"nodeType": "Block",
										"src": "4535:111:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 609,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 599,
															"src": "4574:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 610,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "4582:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 611,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "4588:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 612,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4595:43:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 608,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															616,
															666
														],
														"referencedDeclaration": 666,
														"src": "4552:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4552:87:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 607,
												"id": 614,
												"nodeType": "Return",
												"src": "4545:94:10"
											}
										]
									},
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "4036:351:10",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4401:21:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4440:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "4432:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4432:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4469:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "4456:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 600,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4456:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4491:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "4483:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 602,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4483:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4422:80:10"
									},
									"returnParameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "4521:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 605,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4521:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4520:14:10"
									},
									"scope": 802,
									"src": "4392:254:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 665,
										"nodeType": "Block",
										"src": "5073:322:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 633,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5099:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_TWAddress_$802",
																				"typeString": "library TWAddress"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_TWAddress_$802",
																				"typeString": "library TWAddress"
																			}
																		],
																		"id": 632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5091:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 631,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5091:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 634,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5091:13:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 635,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5091:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 636,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "5116:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5091:30:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5123:40:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 630,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5083:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5083:81:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "5083:81:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 643,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 619,
																	"src": "5193:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 642,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 525,
																"src": "5182:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 644,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5182:18:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 645,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5202:31:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 641,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5174:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5174:60:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 647,
												"nodeType": "ExpressionStatement",
												"src": "5174:60:10"
											},
											{
												"assignments": [
													649,
													651
												],
												"declarations": [
													{
														"constant": false,
														"id": 649,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5251:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 665,
														"src": "5246:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 648,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5246:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 651,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5273:10:10",
														"nodeType": "VariableDeclaration",
														"scope": 665,
														"src": "5260:23:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 650,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5260:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 658,
												"initialValue": {
													"arguments": [
														{
															"id": 656,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 621,
															"src": "5315:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 652,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 619,
																"src": "5287:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5287:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 655,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 654,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "5307:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5287:27:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5287:33:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5245:75:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 660,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 649,
															"src": "5354:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 661,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "5363:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 662,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "5375:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 659,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "5337:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5337:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 629,
												"id": 664,
												"nodeType": "Return",
												"src": "5330:58:10"
											}
										]
									},
									"documentation": {
										"id": 617,
										"nodeType": "StructuredDocumentation",
										"src": "4652:237:10",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4903:21:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4942:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "4934:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 618,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4934:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4971:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "4958:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 620,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4958:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4993:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "4985:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 622,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4985:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5022:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "5008:26:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 624,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5008:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4924:116:10"
									},
									"returnParameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "5059:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 627,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5059:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5058:14:10"
									},
									"scope": 802,
									"src": "4894:501:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 682,
										"nodeType": "Block",
										"src": "5672:97:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 677,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "5708:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 678,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 671,
															"src": "5716:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5722:39:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 676,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															683,
															718
														],
														"referencedDeclaration": 718,
														"src": "5689:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5689:73:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 675,
												"id": 681,
												"nodeType": "Return",
												"src": "5682:80:10"
											}
										]
									},
									"documentation": {
										"id": 667,
										"nodeType": "StructuredDocumentation",
										"src": "5401:166:10",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5581:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5608:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "5600:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5600:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5629:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "5616:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 670,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5616:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5599:35:10"
									},
									"returnParameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "5658:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 673,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5658:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5657:14:10"
									},
									"scope": 802,
									"src": "5572:197:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 717,
										"nodeType": "Block",
										"src": "6111:228:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 697,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 686,
																	"src": "6140:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 696,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 525,
																"src": "6129:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 698,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6129:18:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 699,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6149:38:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 695,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6121:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6121:67:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 701,
												"nodeType": "ExpressionStatement",
												"src": "6121:67:10"
											},
											{
												"assignments": [
													703,
													705
												],
												"declarations": [
													{
														"constant": false,
														"id": 703,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6205:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 717,
														"src": "6200:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 702,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6200:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 705,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6227:10:10",
														"nodeType": "VariableDeclaration",
														"scope": 717,
														"src": "6214:23:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 704,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6214:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 710,
												"initialValue": {
													"arguments": [
														{
															"id": 708,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 688,
															"src": "6259:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 706,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "6241:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 707,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6241:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6241:23:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6199:65:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 712,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 703,
															"src": "6298:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 713,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 705,
															"src": "6307:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 714,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 690,
															"src": "6319:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 711,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "6281:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6281:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 694,
												"id": 716,
												"nodeType": "Return",
												"src": "6274:58:10"
											}
										]
									},
									"documentation": {
										"id": 684,
										"nodeType": "StructuredDocumentation",
										"src": "5775:173:10",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 718,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5962:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5998:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "5990:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5990:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6027:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "6014:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 687,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6014:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6055:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "6041:26:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 689,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6041:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5980:93:10"
									},
									"returnParameters": {
										"id": 694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "6097:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 692,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6097:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6096:14:10"
									},
									"scope": 802,
									"src": "5953:386:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "6615:101:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 729,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 721,
															"src": "6653:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 730,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 723,
															"src": "6661:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 731,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6667:41:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 728,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															735,
															770
														],
														"referencedDeclaration": 770,
														"src": "6632:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6632:77:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 727,
												"id": 733,
												"nodeType": "Return",
												"src": "6625:84:10"
											}
										]
									},
									"documentation": {
										"id": 719,
										"nodeType": "StructuredDocumentation",
										"src": "6345:168:10",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6527:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6556:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "6548:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 720,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6548:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6577:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "6564:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 722,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6564:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6547:35:10"
									},
									"returnParameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "6601:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 725,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6601:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6600:14:10"
									},
									"scope": 802,
									"src": "6518:198:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 769,
										"nodeType": "Block",
										"src": "7057:232:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 749,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 738,
																	"src": "7086:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 748,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 525,
																"src": "7075:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7075:18:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 751,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7095:40:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 747,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7067:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7067:69:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 753,
												"nodeType": "ExpressionStatement",
												"src": "7067:69:10"
											},
											{
												"assignments": [
													755,
													757
												],
												"declarations": [
													{
														"constant": false,
														"id": 755,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7153:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 769,
														"src": "7148:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 754,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7148:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 757,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7175:10:10",
														"nodeType": "VariableDeclaration",
														"scope": 769,
														"src": "7162:23:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 756,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7162:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 762,
												"initialValue": {
													"arguments": [
														{
															"id": 760,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 740,
															"src": "7209:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 758,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "7189:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 759,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7189:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7189:25:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7147:67:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 764,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "7248:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 765,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 757,
															"src": "7257:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 766,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "7269:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 763,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "7231:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7231:51:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 746,
												"id": 768,
												"nodeType": "Return",
												"src": "7224:58:10"
											}
										]
									},
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "6722:175:10",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6911:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6949:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "6941:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 737,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6941:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6978:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "6965:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 739,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6965:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7006:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "6992:26:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 741,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6992:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6931:93:10"
									},
									"returnParameters": {
										"id": 746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "7043:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 744,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7043:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7042:14:10"
									},
									"scope": 802,
									"src": "6902:387:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 800,
										"nodeType": "Block",
										"src": "7669:532:10",
										"statements": [
											{
												"condition": {
													"id": 782,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 773,
													"src": "7683:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 798,
													"nodeType": "Block",
													"src": "7740:455:10",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 786,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 775,
																		"src": "7824:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 787,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7824:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 788,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7844:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7824:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 796,
																"nodeType": "Block",
																"src": "8132:53:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 793,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 777,
																					"src": "8157:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 792,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8150:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 794,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8150:20:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 795,
																		"nodeType": "ExpressionStatement",
																		"src": "8150:20:10"
																	}
																]
															},
															"id": 797,
															"nodeType": "IfStatement",
															"src": "7820:365:10",
															"trueBody": {
																"id": 791,
																"nodeType": "Block",
																"src": "7847:279:10",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7967:145:10",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7989:40:10",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8018:10:10"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8012:5:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8012:17:10"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7993:15:10",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8061:2:10",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8065:10:10"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8057:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8057:19:10"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8078:15:10"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8050:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8050:44:10"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8050:44:10"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 775,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8018:10:10",
																				"valueSize": 1
																			},
																			{
																				"declaration": 775,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8065:10:10",
																				"valueSize": 1
																			}
																		],
																		"id": 790,
																		"nodeType": "InlineAssembly",
																		"src": "7958:154:10"
																	}
																]
															}
														}
													]
												},
												"id": 799,
												"nodeType": "IfStatement",
												"src": "7679:516:10",
												"trueBody": {
													"id": 785,
													"nodeType": "Block",
													"src": "7692:42:10",
													"statements": [
														{
															"expression": {
																"id": 783,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 775,
																"src": "7713:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 781,
															"id": 784,
															"nodeType": "Return",
															"src": "7706:17:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 771,
										"nodeType": "StructuredDocumentation",
										"src": "7295:209:10",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 801,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7518:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7549:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "7544:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 772,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7544:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7579:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "7566:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 774,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7566:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7613:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "7599:26:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 776,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7599:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7534:97:10"
									},
									"returnParameters": {
										"id": 781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 801,
												"src": "7655:12:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 779,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7655:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7654:14:10"
									},
									"scope": 802,
									"src": "7509:692:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 803,
							"src": "134:8069:10",
							"usedErrors": []
						}
					],
					"src": "39:8165:10"
				},
				"id": 10
			},
			"lib/TWStrings.sol": {
				"ast": {
					"absolutePath": "lib/TWStrings.sol",
					"exportedSymbols": {
						"TWStrings": [
							1005
						]
					},
					"id": 1006,
					"license": "Apache 2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 804,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TWStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 805,
								"nodeType": "StructuredDocumentation",
								"src": "66:34:11",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1005,
							"linearizedBaseContracts": [
								1005
							],
							"name": "TWStrings",
							"nameLocation": "109:9:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 808,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "150:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 1005,
									"src": "125:58:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 806,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "125:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 807,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "165:18:11",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 886,
										"nodeType": "Block",
										"src": "356:632:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 816,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "558:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 817,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "567:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "558:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 822,
												"nodeType": "IfStatement",
												"src": "554:51:11",
												"trueBody": {
													"id": 821,
													"nodeType": "Block",
													"src": "570:35:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 819,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "591:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 815,
															"id": 820,
															"nodeType": "Return",
															"src": "584:10:11"
														}
													]
												}
											},
											{
												"assignments": [
													824
												],
												"declarations": [
													{
														"constant": false,
														"id": 824,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "622:4:11",
														"nodeType": "VariableDeclaration",
														"scope": 886,
														"src": "614:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 823,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "614:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 826,
												"initialValue": {
													"id": 825,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 811,
													"src": "629:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "614:20:11"
											},
											{
												"assignments": [
													828
												],
												"declarations": [
													{
														"constant": false,
														"id": 828,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "652:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 886,
														"src": "644:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 827,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "644:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 829,
												"nodeType": "VariableDeclarationStatement",
												"src": "644:14:11"
											},
											{
												"body": {
													"id": 840,
													"nodeType": "Block",
													"src": "686:57:11",
													"statements": [
														{
															"expression": {
																"id": 834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "700:8:11",
																"subExpression": {
																	"id": 833,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 828,
																	"src": "700:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 835,
															"nodeType": "ExpressionStatement",
															"src": "700:8:11"
														},
														{
															"expression": {
																"id": 838,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 836,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 824,
																	"src": "722:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 837,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "730:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "722:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 839,
															"nodeType": "ExpressionStatement",
															"src": "722:10:11"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 830,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 824,
														"src": "675:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 831,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "683:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "675:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 841,
												"nodeType": "WhileStatement",
												"src": "668:75:11"
											},
											{
												"assignments": [
													843
												],
												"declarations": [
													{
														"constant": false,
														"id": 843,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "765:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 886,
														"src": "752:19:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 842,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "752:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 848,
												"initialValue": {
													"arguments": [
														{
															"id": 846,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "784:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 845,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "774:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 844,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "778:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "774:17:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "752:39:11"
											},
											{
												"body": {
													"id": 879,
													"nodeType": "Block",
													"src": "820:131:11",
													"statements": [
														{
															"expression": {
																"id": 854,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 852,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 828,
																	"src": "834:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 853,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "844:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "834:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 855,
															"nodeType": "ExpressionStatement",
															"src": "834:11:11"
														},
														{
															"expression": {
																"id": 873,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 856,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 843,
																		"src": "859:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 858,
																	"indexExpression": {
																		"id": 857,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 828,
																		"src": "866:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "859:14:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 870,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 863,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "889:2:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 868,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 866,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 811,
																									"src": "902:5:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 867,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "910:2:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "902:10:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 865,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "894:7:11",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 864,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "894:7:11",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 869,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "894:19:11",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "889:24:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 862,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "883:5:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 861,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "883:5:11",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 871,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "883:31:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 860,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "876:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 859,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "876:6:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 872,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "876:39:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "859:56:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 874,
															"nodeType": "ExpressionStatement",
															"src": "859:56:11"
														},
														{
															"expression": {
																"id": 877,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 875,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 811,
																	"src": "929:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 876,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "938:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "929:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 878,
															"nodeType": "ExpressionStatement",
															"src": "929:11:11"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 849,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "808:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 850,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "817:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "808:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 880,
												"nodeType": "WhileStatement",
												"src": "801:150:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 883,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "974:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 882,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "967:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 881,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "967:6:11",
															"typeDescriptions": {}
														}
													},
													"id": 884,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "967:14:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 815,
												"id": 885,
												"nodeType": "Return",
												"src": "960:21:11"
											}
										]
									},
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "190:90:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 887,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "294:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "311:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 887,
												"src": "303:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "303:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "302:15:11"
									},
									"returnParameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 887,
												"src": "341:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 813,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "341:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "340:15:11"
									},
									"scope": 1005,
									"src": "285:703:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 927,
										"nodeType": "Block",
										"src": "1167:255:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 895,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 890,
														"src": "1181:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 896,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1190:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1181:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 901,
												"nodeType": "IfStatement",
												"src": "1177:54:11",
												"trueBody": {
													"id": 900,
													"nodeType": "Block",
													"src": "1193:38:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 898,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 894,
															"id": 899,
															"nodeType": "Return",
															"src": "1207:13:11"
														}
													]
												}
											},
											{
												"assignments": [
													903
												],
												"declarations": [
													{
														"constant": false,
														"id": 903,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1248:4:11",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "1240:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 902,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1240:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 905,
												"initialValue": {
													"id": 904,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 890,
													"src": "1255:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1240:20:11"
											},
											{
												"assignments": [
													907
												],
												"declarations": [
													{
														"constant": false,
														"id": 907,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1278:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 927,
														"src": "1270:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 906,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1270:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 909,
												"initialValue": {
													"hexValue": "30",
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1287:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1270:18:11"
											},
											{
												"body": {
													"id": 920,
													"nodeType": "Block",
													"src": "1316:57:11",
													"statements": [
														{
															"expression": {
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1330:8:11",
																"subExpression": {
																	"id": 913,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 907,
																	"src": "1330:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 915,
															"nodeType": "ExpressionStatement",
															"src": "1330:8:11"
														},
														{
															"expression": {
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 916,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 903,
																	"src": "1352:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1361:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1352:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 919,
															"nodeType": "ExpressionStatement",
															"src": "1352:10:11"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 910,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "1305:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 911,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1313:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1305:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 921,
												"nodeType": "WhileStatement",
												"src": "1298:75:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 923,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 890,
															"src": "1401:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 924,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 907,
															"src": "1408:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 922,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															928,
															1004
														],
														"referencedDeclaration": 1004,
														"src": "1389:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 925,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1389:26:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 894,
												"id": 926,
												"nodeType": "Return",
												"src": "1382:33:11"
											}
										]
									},
									"documentation": {
										"id": 888,
										"nodeType": "StructuredDocumentation",
										"src": "994:94:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1102:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1122:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1114:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1114:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1113:15:11"
									},
									"returnParameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1152:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 892,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1152:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1151:15:11"
									},
									"scope": 1005,
									"src": "1093:329:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1003,
										"nodeType": "Block",
										"src": "1635:351:11",
										"statements": [
											{
												"assignments": [
													939
												],
												"declarations": [
													{
														"constant": false,
														"id": 939,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1658:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1003,
														"src": "1645:19:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 938,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1645:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 948,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 944,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 942,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1677:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 943,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "1681:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1677:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 945,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1690:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1677:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 941,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1667:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 940,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1671:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 947,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1667:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1645:47:11"
											},
											{
												"expression": {
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 949,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 939,
															"src": "1702:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 951,
														"indexExpression": {
															"hexValue": "30",
															"id": 950,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1709:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1702:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 952,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1714:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1702:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 954,
												"nodeType": "ExpressionStatement",
												"src": "1702:15:11"
											},
											{
												"expression": {
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 955,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 939,
															"src": "1727:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 957,
														"indexExpression": {
															"hexValue": "31",
															"id": 956,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1734:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1727:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 958,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1739:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1727:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 960,
												"nodeType": "ExpressionStatement",
												"src": "1727:15:11"
											},
											{
												"body": {
													"id": 989,
													"nodeType": "Block",
													"src": "1797:87:11",
													"statements": [
														{
															"expression": {
																"id": 983,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 975,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 939,
																		"src": "1811:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 977,
																	"indexExpression": {
																		"id": 976,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 962,
																		"src": "1818:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1811:9:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 978,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 808,
																		"src": "1823:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 982,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 981,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 979,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 931,
																			"src": "1836:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 980,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1844:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1836:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1823:25:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1811:37:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 984,
															"nodeType": "ExpressionStatement",
															"src": "1811:37:11"
														},
														{
															"expression": {
																"id": 987,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 985,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 931,
																	"src": "1862:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 986,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1872:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1862:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 988,
															"nodeType": "ExpressionStatement",
															"src": "1862:11:11"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 969,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 962,
														"src": "1785:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 970,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1789:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1785:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 990,
												"initializationExpression": {
													"assignments": [
														962
													],
													"declarations": [
														{
															"constant": false,
															"id": 962,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1765:1:11",
															"nodeType": "VariableDeclaration",
															"scope": 990,
															"src": "1757:9:11",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 961,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1757:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 968,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 967,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 965,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 963,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1769:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 964,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "1773:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1769:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 966,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1782:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1769:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1757:26:11"
												},
												"loopExpression": {
													"expression": {
														"id": 973,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1792:3:11",
														"subExpression": {
															"id": 972,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 962,
															"src": "1794:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 974,
													"nodeType": "ExpressionStatement",
													"src": "1792:3:11"
												},
												"nodeType": "ForStatement",
												"src": "1752:132:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 992,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 931,
																"src": "1901:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 993,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1910:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1901:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 995,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1913:34:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 991,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1893:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1893:55:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 997,
												"nodeType": "ExpressionStatement",
												"src": "1893:55:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1000,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 939,
															"src": "1972:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 999,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1965:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 998,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1965:6:11",
															"typeDescriptions": {}
														}
													},
													"id": 1001,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1965:14:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 937,
												"id": 1002,
												"nodeType": "Return",
												"src": "1958:21:11"
											}
										]
									},
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "1428:112:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1004,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1554:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1574:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "1566:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1589:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "1581:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:31:11"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "1620:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 935,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1620:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1619:15:11"
									},
									"scope": 1005,
									"src": "1545:441:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1006,
							"src": "101:1887:11",
							"usedErrors": []
						}
					],
					"src": "39:1950:11"
				},
				"id": 11
			},
			"openzeppelin-presets/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "openzeppelin-presets/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1857
						],
						"ERC20": [
							1593
						],
						"IERC20": [
							193
						],
						"IERC20Metadata": [
							212
						]
					},
					"id": 1594,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1007,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:12"
						},
						{
							"absolutePath": "eip/interface/IERC20.sol",
							"file": "../../../eip/interface/IERC20.sol",
							"id": 1008,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1594,
							"sourceUnit": 194,
							"src": "130:43:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "eip/interface/IERC20Metadata.sol",
							"file": "../../../eip/interface/IERC20Metadata.sol",
							"id": 1009,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1594,
							"sourceUnit": 213,
							"src": "174:51:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-presets/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 1010,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1594,
							"sourceUnit": 1858,
							"src": "226:33:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1012,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1857,
										"src": "1452:7:12"
									},
									"id": 1013,
									"nodeType": "InheritanceSpecifier",
									"src": "1452:7:12"
								},
								{
									"baseName": {
										"id": 1014,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 193,
										"src": "1461:6:12"
									},
									"id": 1015,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:6:12"
								},
								{
									"baseName": {
										"id": 1016,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 212,
										"src": "1469:14:12"
									},
									"id": 1017,
									"nodeType": "InheritanceSpecifier",
									"src": "1469:14:12"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1011,
								"nodeType": "StructuredDocumentation",
								"src": "261:1172:12",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 1593,
							"linearizedBaseContracts": [
								1593,
								212,
								193,
								1857
							],
							"name": "ERC20",
							"nameLocation": "1443:5:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1021,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1526:9:12",
									"nodeType": "VariableDeclaration",
									"scope": 1593,
									"src": "1490:45:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1020,
										"keyType": {
											"id": 1018,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1498:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1490:27:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1019,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1509:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1027,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1598:11:12",
									"nodeType": "VariableDeclaration",
									"scope": 1593,
									"src": "1542:67:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 1026,
										"keyType": {
											"id": 1022,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1550:7:12",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1542:47:12",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 1025,
											"keyType": {
												"id": 1023,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1569:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1561:27:12",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 1024,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1580:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1029,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1632:12:12",
									"nodeType": "VariableDeclaration",
									"scope": 1593,
									"src": "1616:28:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1028,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1616:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1031,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1666:5:12",
									"nodeType": "VariableDeclaration",
									"scope": 1593,
									"src": "1651:20:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1030,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1651:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1033,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1692:7:12",
									"nodeType": "VariableDeclaration",
									"scope": 1593,
									"src": "1677:22:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1032,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1677:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1049,
										"nodeType": "Block",
										"src": "2065:57:12",
										"statements": [
											{
												"expression": {
													"id": 1043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1041,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1031,
														"src": "2075:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1042,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1036,
														"src": "2083:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2075:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1044,
												"nodeType": "ExpressionStatement",
												"src": "2075:13:12"
											},
											{
												"expression": {
													"id": 1047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1045,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1033,
														"src": "2098:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1046,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1038,
														"src": "2108:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2098:17:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1048,
												"nodeType": "ExpressionStatement",
												"src": "2098:17:12"
											}
										]
									},
									"documentation": {
										"id": 1034,
										"nodeType": "StructuredDocumentation",
										"src": "1706:298:12",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 1050,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2035:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "2021:19:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1035,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2021:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2056:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "2042:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1037,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2042:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2020:44:12"
									},
									"returnParameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2065:0:12"
									},
									"scope": 1593,
									"src": "2009:113:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										201
									],
									"body": {
										"id": 1059,
										"nodeType": "Block",
										"src": "2256:29:12",
										"statements": [
											{
												"expression": {
													"id": 1057,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1031,
													"src": "2273:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1056,
												"id": 1058,
												"nodeType": "Return",
												"src": "2266:12:12"
											}
										]
									},
									"documentation": {
										"id": 1051,
										"nodeType": "StructuredDocumentation",
										"src": "2128:54:12",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1060,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2196:4:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1053,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2223:8:12"
									},
									"parameters": {
										"id": 1052,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:2:12"
									},
									"returnParameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "2241:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1054,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2241:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2240:15:12"
									},
									"scope": 1593,
									"src": "2187:98:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										206
									],
									"body": {
										"id": 1069,
										"nodeType": "Block",
										"src": "2469:31:12",
										"statements": [
											{
												"expression": {
													"id": 1067,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1033,
													"src": "2486:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1066,
												"id": 1068,
												"nodeType": "Return",
												"src": "2479:14:12"
											}
										]
									},
									"documentation": {
										"id": 1061,
										"nodeType": "StructuredDocumentation",
										"src": "2291:102:12",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1070,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2407:6:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1063,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2436:8:12"
									},
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2413:2:12"
									},
									"returnParameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1070,
												"src": "2454:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1064,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2454:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2453:15:12"
									},
									"scope": 1593,
									"src": "2398:102:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										211
									],
									"body": {
										"id": 1079,
										"nodeType": "Block",
										"src": "3189:26:12",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 1077,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3206:2:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 1076,
												"id": 1078,
												"nodeType": "Return",
												"src": "3199:9:12"
											}
										]
									},
									"documentation": {
										"id": 1071,
										"nodeType": "StructuredDocumentation",
										"src": "2506:613:12",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 1080,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3133:8:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1073,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3164:8:12"
									},
									"parameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3141:2:12"
									},
									"returnParameters": {
										"id": 1076,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "3182:5:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1074,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3182:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3181:7:12"
									},
									"scope": 1593,
									"src": "3124:91:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										131
									],
									"body": {
										"id": 1089,
										"nodeType": "Block",
										"src": "3345:36:12",
										"statements": [
											{
												"expression": {
													"id": 1087,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1029,
													"src": "3362:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1086,
												"id": 1088,
												"nodeType": "Return",
												"src": "3355:19:12"
											}
										]
									},
									"documentation": {
										"id": 1081,
										"nodeType": "StructuredDocumentation",
										"src": "3221:49:12",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1090,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3284:11:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1083,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3318:8:12"
									},
									"parameters": {
										"id": 1082,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3295:2:12"
									},
									"returnParameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "3336:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3336:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3335:9:12"
									},
									"scope": 1593,
									"src": "3275:106:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										138
									],
									"body": {
										"id": 1103,
										"nodeType": "Block",
										"src": "3522:42:12",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1099,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1021,
														"src": "3539:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1101,
													"indexExpression": {
														"id": 1100,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "3549:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3539:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1098,
												"id": 1102,
												"nodeType": "Return",
												"src": "3532:25:12"
											}
										]
									},
									"documentation": {
										"id": 1091,
										"nodeType": "StructuredDocumentation",
										"src": "3387:47:12",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3448:9:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1095,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3495:8:12"
									},
									"parameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3466:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "3458:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1092,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3458:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3457:17:12"
									},
									"returnParameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1104,
												"src": "3513:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1096,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3513:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3512:9:12"
									},
									"scope": 1593,
									"src": "3439:125:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										156
									],
									"body": {
										"id": 1128,
										"nodeType": "Block",
										"src": "3845:104:12",
										"statements": [
											{
												"assignments": [
													1116
												],
												"declarations": [
													{
														"constant": false,
														"id": 1116,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3863:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1128,
														"src": "3855:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1115,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3855:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1119,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1117,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1847,
														"src": "3871:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3871:12:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3855:28:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1121,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1116,
															"src": "3903:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1122,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1107,
															"src": "3910:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1123,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1109,
															"src": "3914:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1120,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1354,
														"src": "3893:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3893:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1125,
												"nodeType": "ExpressionStatement",
												"src": "3893:28:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3938:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1114,
												"id": 1127,
												"nodeType": "Return",
												"src": "3931:11:12"
											}
										]
									},
									"documentation": {
										"id": 1105,
										"nodeType": "StructuredDocumentation",
										"src": "3570:185:12",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 1129,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3769:8:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1111,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3821:8:12"
									},
									"parameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3786:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "3778:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3798:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "3790:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3790:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3777:28:12"
									},
									"returnParameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "3839:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1112,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3839:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3838:6:12"
									},
									"scope": 1593,
									"src": "3760:189:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										147
									],
									"body": {
										"id": 1146,
										"nodeType": "Block",
										"src": "4105:51:12",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1140,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1027,
															"src": "4122:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1142,
														"indexExpression": {
															"id": 1141,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1132,
															"src": "4134:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4122:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1144,
													"indexExpression": {
														"id": 1143,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1134,
														"src": "4141:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4122:27:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1139,
												"id": 1145,
												"nodeType": "Return",
												"src": "4115:34:12"
											}
										]
									},
									"documentation": {
										"id": 1130,
										"nodeType": "StructuredDocumentation",
										"src": "3955:47:12",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 1147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4016:9:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1136,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4078:8:12"
									},
									"parameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4034:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "4026:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4026:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4049:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "4041:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4041:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4025:32:12"
									},
									"returnParameters": {
										"id": 1139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "4096:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4096:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4095:9:12"
									},
									"scope": 1593,
									"src": "4007:149:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										165
									],
									"body": {
										"id": 1171,
										"nodeType": "Block",
										"src": "4553:108:12",
										"statements": [
											{
												"assignments": [
													1159
												],
												"declarations": [
													{
														"constant": false,
														"id": 1159,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4571:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1171,
														"src": "4563:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1158,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4563:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1162,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1160,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1847,
														"src": "4579:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4579:12:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4563:28:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1164,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1159,
															"src": "4610:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1165,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1150,
															"src": "4617:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1166,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1152,
															"src": "4626:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1163,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1527,
														"src": "4601:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4601:32:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1168,
												"nodeType": "ExpressionStatement",
												"src": "4601:32:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1169,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4650:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1157,
												"id": 1170,
												"nodeType": "Return",
												"src": "4643:11:12"
											}
										]
									},
									"documentation": {
										"id": 1148,
										"nodeType": "StructuredDocumentation",
										"src": "4162:297:12",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 1172,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4473:7:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1154,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4529:8:12"
									},
									"parameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4489:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "4481:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4481:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1152,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4506:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "4498:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4480:33:12"
									},
									"returnParameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "4547:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1155,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4547:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4546:6:12"
									},
									"scope": 1593,
									"src": "4464:197:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										176
									],
									"body": {
										"id": 1204,
										"nodeType": "Block",
										"src": "5356:153:12",
										"statements": [
											{
												"assignments": [
													1186
												],
												"declarations": [
													{
														"constant": false,
														"id": 1186,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5374:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 1204,
														"src": "5366:15:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1185,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5366:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1189,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1187,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1847,
														"src": "5384:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5384:12:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5366:30:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1191,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1175,
															"src": "5422:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1192,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1186,
															"src": "5428:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1193,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1179,
															"src": "5437:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1190,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1570,
														"src": "5406:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5406:38:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1195,
												"nodeType": "ExpressionStatement",
												"src": "5406:38:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1197,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1175,
															"src": "5464:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1198,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1177,
															"src": "5470:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1199,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1179,
															"src": "5474:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1196,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1354,
														"src": "5454:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5454:27:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1201,
												"nodeType": "ExpressionStatement",
												"src": "5454:27:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5498:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1184,
												"id": 1203,
												"nodeType": "Return",
												"src": "5491:11:12"
											}
										]
									},
									"documentation": {
										"id": 1173,
										"nodeType": "StructuredDocumentation",
										"src": "4667:551:12",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 1205,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5232:12:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1181,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5332:8:12"
									},
									"parameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5262:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "5254:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5254:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5284:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "5276:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5276:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5304:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "5296:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5296:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5244:72:12"
									},
									"returnParameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "5350:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1182,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5350:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5349:6:12"
									},
									"scope": 1593,
									"src": "5223:286:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1234,
										"nodeType": "Block",
										"src": "5998:142:12",
										"statements": [
											{
												"assignments": [
													1216
												],
												"declarations": [
													{
														"constant": false,
														"id": 1216,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6016:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1234,
														"src": "6008:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1215,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6008:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1219,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1217,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1847,
														"src": "6024:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6024:12:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6008:28:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1221,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1216,
															"src": "6055:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1222,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1208,
															"src": "6062:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 1223,
																		"name": "_allowances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1027,
																		"src": "6071:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(address => uint256))"
																		}
																	},
																	"id": 1225,
																	"indexExpression": {
																		"id": 1224,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1216,
																		"src": "6083:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6071:18:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1227,
																"indexExpression": {
																	"id": 1226,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1208,
																	"src": "6090:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6071:27:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1228,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "6101:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6071:40:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1220,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1527,
														"src": "6046:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6046:66:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1231,
												"nodeType": "ExpressionStatement",
												"src": "6046:66:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1232,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6129:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1214,
												"id": 1233,
												"nodeType": "Return",
												"src": "6122:11:12"
											}
										]
									},
									"documentation": {
										"id": 1206,
										"nodeType": "StructuredDocumentation",
										"src": "5515:384:12",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1235,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5913:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5939:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1235,
												"src": "5931:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5931:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1210,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5956:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 1235,
												"src": "5948:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5948:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5930:37:12"
									},
									"returnParameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1235,
												"src": "5992:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1212,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5992:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:6:12"
									},
									"scope": 1593,
									"src": "5904:236:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1276,
										"nodeType": "Block",
										"src": "6726:330:12",
										"statements": [
											{
												"assignments": [
													1246
												],
												"declarations": [
													{
														"constant": false,
														"id": 1246,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6744:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1276,
														"src": "6736:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1245,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6736:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1249,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1247,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1847,
														"src": "6752:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6752:12:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6736:28:12"
											},
											{
												"assignments": [
													1251
												],
												"declarations": [
													{
														"constant": false,
														"id": 1251,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6782:16:12",
														"nodeType": "VariableDeclaration",
														"scope": 1276,
														"src": "6774:24:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1250,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6774:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1257,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1252,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1027,
															"src": "6801:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1254,
														"indexExpression": {
															"id": 1253,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "6813:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6801:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1256,
													"indexExpression": {
														"id": 1255,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1238,
														"src": "6820:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6801:27:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6774:54:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1261,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1259,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1251,
																"src": "6846:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1260,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1240,
																"src": "6866:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6846:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 1262,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6883:39:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 1258,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6838:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6838:85:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1264,
												"nodeType": "ExpressionStatement",
												"src": "6838:85:12"
											},
											{
												"id": 1273,
												"nodeType": "UncheckedBlock",
												"src": "6933:95:12",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1266,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1246,
																	"src": "6966:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1267,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1238,
																	"src": "6973:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1270,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1268,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1251,
																		"src": "6982:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1269,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1240,
																		"src": "7001:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6982:34:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1265,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1527,
																"src": "6957:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 1271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6957:60:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1272,
														"nodeType": "ExpressionStatement",
														"src": "6957:60:12"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1274,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7045:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1244,
												"id": 1275,
												"nodeType": "Return",
												"src": "7038:11:12"
											}
										]
									},
									"documentation": {
										"id": 1236,
										"nodeType": "StructuredDocumentation",
										"src": "6146:476:12",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1277,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6636:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6662:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "6654:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1237,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6654:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6679:15:12",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "6671:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6671:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6653:42:12"
									},
									"returnParameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "6720:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1242,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6720:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6719:6:12"
									},
									"scope": 1593,
									"src": "6627:429:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1353,
										"nodeType": "Block",
										"src": "7627:543:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1293,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1288,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1280,
																"src": "7645:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1291,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7661:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1290,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7653:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1289,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7653:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1292,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7653:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7645:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1294,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7665:39:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1287,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7637:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7637:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1296,
												"nodeType": "ExpressionStatement",
												"src": "7637:68:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1298,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1282,
																"src": "7723:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1301,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7737:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7729:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1299,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7729:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1302,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7729:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7723:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1304,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7741:37:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1297,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7715:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7715:64:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1306,
												"nodeType": "ExpressionStatement",
												"src": "7715:64:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1308,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1280,
															"src": "7811:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1309,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "7817:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1310,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "7821:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1307,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1581,
														"src": "7790:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7790:38:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1312,
												"nodeType": "ExpressionStatement",
												"src": "7790:38:12"
											},
											{
												"assignments": [
													1314
												],
												"declarations": [
													{
														"constant": false,
														"id": 1314,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7847:11:12",
														"nodeType": "VariableDeclaration",
														"scope": 1353,
														"src": "7839:19:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1313,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7839:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1318,
												"initialValue": {
													"baseExpression": {
														"id": 1315,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1021,
														"src": "7861:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1317,
													"indexExpression": {
														"id": 1316,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1280,
														"src": "7871:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7861:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7839:37:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1320,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1314,
																"src": "7894:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1321,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1284,
																"src": "7909:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7894:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 1323,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7917:40:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 1319,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7886:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7886:72:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1325,
												"nodeType": "ExpressionStatement",
												"src": "7886:72:12"
											},
											{
												"id": 1334,
												"nodeType": "UncheckedBlock",
												"src": "7968:73:12",
												"statements": [
													{
														"expression": {
															"id": 1332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1326,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1021,
																	"src": "7992:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1328,
																"indexExpression": {
																	"id": 1327,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1280,
																	"src": "8002:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7992:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1331,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1329,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1314,
																	"src": "8010:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1330,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1284,
																	"src": "8024:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8010:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7992:38:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1333,
														"nodeType": "ExpressionStatement",
														"src": "7992:38:12"
													}
												]
											},
											{
												"expression": {
													"id": 1339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1335,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1021,
															"src": "8050:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1337,
														"indexExpression": {
															"id": 1336,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "8060:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8050:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1338,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1284,
														"src": "8067:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8050:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1340,
												"nodeType": "ExpressionStatement",
												"src": "8050:23:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1342,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1280,
															"src": "8098:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1343,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "8104:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1344,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "8108:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1341,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 184,
														"src": "8089:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8089:26:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1346,
												"nodeType": "EmitStatement",
												"src": "8084:31:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1348,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1280,
															"src": "8146:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1349,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "8152:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1350,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "8156:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1347,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1592,
														"src": "8126:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8126:37:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1352,
												"nodeType": "ExpressionStatement",
												"src": "8126:37:12"
											}
										]
									},
									"documentation": {
										"id": 1278,
										"nodeType": "StructuredDocumentation",
										"src": "7062:452:12",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 1354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7528:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7555:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "7547:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1279,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7547:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7577:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "7569:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7569:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7597:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1354,
												"src": "7589:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7589:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7537:72:12"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7627:0:12"
									},
									"scope": 1593,
									"src": "7519:651:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1409,
										"nodeType": "Block",
										"src": "8511:324:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1368,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1363,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1357,
																"src": "8529:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1366,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8548:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8540:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1364,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8540:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8540:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8529:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 1369,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8552:33:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 1362,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8521:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8521:65:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1371,
												"nodeType": "ExpressionStatement",
												"src": "8521:65:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8626:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1374,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8618:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1373,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8618:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1376,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8618:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1377,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "8630:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1378,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "8639:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1372,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1581,
														"src": "8597:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8597:49:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1380,
												"nodeType": "ExpressionStatement",
												"src": "8597:49:12"
											},
											{
												"expression": {
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1381,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1029,
														"src": "8657:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1382,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1359,
														"src": "8673:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8657:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1384,
												"nodeType": "ExpressionStatement",
												"src": "8657:22:12"
											},
											{
												"expression": {
													"id": 1389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1385,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1021,
															"src": "8689:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1387,
														"indexExpression": {
															"id": 1386,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "8699:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8689:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1388,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1359,
														"src": "8711:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8689:28:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1390,
												"nodeType": "ExpressionStatement",
												"src": "8689:28:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1394,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8749:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1393,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8741:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1392,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8741:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1395,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8741:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1396,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "8753:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1397,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "8762:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1391,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 184,
														"src": "8732:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8732:37:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1399,
												"nodeType": "EmitStatement",
												"src": "8727:42:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8808:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1402,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8800:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1401,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8800:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1404,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8800:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1405,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "8812:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1406,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "8821:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1400,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1592,
														"src": "8780:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8780:48:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1408,
												"nodeType": "ExpressionStatement",
												"src": "8780:48:12"
											}
										]
									},
									"documentation": {
										"id": 1355,
										"nodeType": "StructuredDocumentation",
										"src": "8176:265:12",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 1410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8455:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8469:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "8461:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8461:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8486:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "8478:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8478:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:33:12"
									},
									"returnParameters": {
										"id": 1361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8511:0:12"
									},
									"scope": 1593,
									"src": "8446:389:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1481,
										"nodeType": "Block",
										"src": "9220:511:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1424,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1419,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1413,
																"src": "9238:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9257:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1421,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9249:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1420,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9249:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9249:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9238:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 1425,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9261:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 1418,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9230:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9230:67:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1427,
												"nodeType": "ExpressionStatement",
												"src": "9230:67:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1429,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1413,
															"src": "9329:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1432,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9346:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1431,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9338:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1430,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9338:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1433,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9338:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1434,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1415,
															"src": "9350:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1428,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1581,
														"src": "9308:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9308:49:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1436,
												"nodeType": "ExpressionStatement",
												"src": "9308:49:12"
											},
											{
												"assignments": [
													1438
												],
												"declarations": [
													{
														"constant": false,
														"id": 1438,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9376:14:12",
														"nodeType": "VariableDeclaration",
														"scope": 1481,
														"src": "9368:22:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1437,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9368:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1442,
												"initialValue": {
													"baseExpression": {
														"id": 1439,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1021,
														"src": "9393:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1441,
													"indexExpression": {
														"id": 1440,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1413,
														"src": "9403:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9393:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9368:43:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1446,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1444,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1438,
																"src": "9429:14:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1445,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1415,
																"src": "9447:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9429:24:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 1447,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9455:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 1443,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9421:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9421:71:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1449,
												"nodeType": "ExpressionStatement",
												"src": "9421:71:12"
											},
											{
												"id": 1458,
												"nodeType": "UncheckedBlock",
												"src": "9502:79:12",
												"statements": [
													{
														"expression": {
															"id": 1456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1450,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1021,
																	"src": "9526:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1452,
																"indexExpression": {
																	"id": 1451,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1413,
																	"src": "9536:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9526:18:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1455,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1453,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1438,
																	"src": "9547:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1454,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1415,
																	"src": "9564:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9547:23:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9526:44:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1457,
														"nodeType": "ExpressionStatement",
														"src": "9526:44:12"
													}
												]
											},
											{
												"expression": {
													"id": 1461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1459,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1029,
														"src": "9590:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1460,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1415,
														"src": "9606:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9590:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1462,
												"nodeType": "ExpressionStatement",
												"src": "9590:22:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1464,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1413,
															"src": "9637:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1467,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9654:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1466,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9646:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1465,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9646:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9646:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1469,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1415,
															"src": "9658:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1463,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 184,
														"src": "9628:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9628:37:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1471,
												"nodeType": "EmitStatement",
												"src": "9623:42:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1473,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1413,
															"src": "9696:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9713:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1475,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9705:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1474,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9705:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1477,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9705:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1478,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1415,
															"src": "9717:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1472,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1592,
														"src": "9676:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9676:48:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1480,
												"nodeType": "ExpressionStatement",
												"src": "9676:48:12"
											}
										]
									},
									"documentation": {
										"id": 1411,
										"nodeType": "StructuredDocumentation",
										"src": "8841:309:12",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 1482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9164:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9178:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1482,
												"src": "9170:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9170:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1415,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9195:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1482,
												"src": "9187:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9187:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9169:33:12"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9220:0:12"
									},
									"scope": 1593,
									"src": "9155:576:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1526,
										"nodeType": "Block",
										"src": "10267:257:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1498,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1493,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1485,
																"src": "10285:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1496,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10302:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10294:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1494,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10294:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1497,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10294:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10285:19:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 1499,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10306:38:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10277:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10277:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1501,
												"nodeType": "ExpressionStatement",
												"src": "10277:68:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1503,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1487,
																"src": "10363:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1506,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10382:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10374:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1504,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10374:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1507,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10374:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10363:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 1509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10386:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 1502,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10355:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10355:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1511,
												"nodeType": "ExpressionStatement",
												"src": "10355:68:12"
											},
											{
												"expression": {
													"id": 1518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1512,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1027,
																"src": "10434:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1515,
															"indexExpression": {
																"id": 1513,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1485,
																"src": "10446:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10434:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1516,
														"indexExpression": {
															"id": 1514,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1487,
															"src": "10453:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10434:27:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1517,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1489,
														"src": "10464:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10434:36:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1519,
												"nodeType": "ExpressionStatement",
												"src": "10434:36:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1521,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1485,
															"src": "10494:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1522,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1487,
															"src": "10501:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1523,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1489,
															"src": "10510:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1520,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 192,
														"src": "10485:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10485:32:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1525,
												"nodeType": "EmitStatement",
												"src": "10480:37:12"
											}
										]
									},
									"documentation": {
										"id": 1483,
										"nodeType": "StructuredDocumentation",
										"src": "9737:412:12",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 1527,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10163:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10189:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1527,
												"src": "10181:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10181:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1487,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10212:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1527,
												"src": "10204:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10204:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1489,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10237:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1527,
												"src": "10229:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10229:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10171:78:12"
									},
									"returnParameters": {
										"id": 1491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10267:0:12"
									},
									"scope": 1593,
									"src": "10154:370:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1569,
										"nodeType": "Block",
										"src": "10921:321:12",
										"statements": [
											{
												"assignments": [
													1538
												],
												"declarations": [
													{
														"constant": false,
														"id": 1538,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10939:16:12",
														"nodeType": "VariableDeclaration",
														"scope": 1569,
														"src": "10931:24:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1537,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10931:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1543,
												"initialValue": {
													"arguments": [
														{
															"id": 1540,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1530,
															"src": "10968:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1541,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1532,
															"src": "10975:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1539,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1147,
														"src": "10958:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10958:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10931:52:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1544,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1538,
														"src": "10997:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1547,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11022:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1546,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11022:7:12",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1545,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11017:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1548,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11017:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1549,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11017:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10997:37:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1568,
												"nodeType": "IfStatement",
												"src": "10993:243:12",
												"trueBody": {
													"id": 1567,
													"nodeType": "Block",
													"src": "11036:200:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1552,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1538,
																			"src": "11058:16:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 1553,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1534,
																			"src": "11078:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11058:26:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 1555,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11086:31:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 1551,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11050:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1556,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11050:68:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1557,
															"nodeType": "ExpressionStatement",
															"src": "11050:68:12"
														},
														{
															"id": 1566,
															"nodeType": "UncheckedBlock",
															"src": "11132:94:12",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1559,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1530,
																				"src": "11169:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1560,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1532,
																				"src": "11176:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1563,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1561,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1538,
																					"src": "11185:16:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1562,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1534,
																					"src": "11204:6:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11185:25:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1558,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1527,
																			"src": "11160:8:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 1564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11160:51:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1565,
																	"nodeType": "ExpressionStatement",
																	"src": "11160:51:12"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1528,
										"nodeType": "StructuredDocumentation",
										"src": "10530:266:12",
										"text": " @dev Spend `amount` form the allowance of `owner` toward `spender`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 1570,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10810:15:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10843:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1570,
												"src": "10835:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10835:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10866:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1570,
												"src": "10858:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10858:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10891:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1570,
												"src": "10883:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1533,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10883:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10825:78:12"
									},
									"returnParameters": {
										"id": 1536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10921:0:12"
									},
									"scope": 1593,
									"src": "10801:441:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1580,
										"nodeType": "Block",
										"src": "11945:2:12",
										"statements": []
									},
									"documentation": {
										"id": 1571,
										"nodeType": "StructuredDocumentation",
										"src": "11248:573:12",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1581,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "11835:20:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1573,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "11873:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1581,
												"src": "11865:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11865:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11895:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1581,
												"src": "11887:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11887:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11915:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1581,
												"src": "11907:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1576,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11907:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11855:72:12"
									},
									"returnParameters": {
										"id": 1579,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11945:0:12"
									},
									"scope": 1593,
									"src": "11826:121:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1591,
										"nodeType": "Block",
										"src": "12653:2:12",
										"statements": []
									},
									"documentation": {
										"id": 1582,
										"nodeType": "StructuredDocumentation",
										"src": "11953:577:12",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1592,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12544:19:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1584,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12581:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1592,
												"src": "12573:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1583,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12573:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1586,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12603:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1592,
												"src": "12595:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12595:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12623:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1592,
												"src": "12615:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1587,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12615:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12563:72:12"
									},
									"returnParameters": {
										"id": 1590,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12653:0:12"
									},
									"scope": 1593,
									"src": "12535:120:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1594,
							"src": "1434:11223:12",
							"usedErrors": []
						}
					],
					"src": "105:12553:12"
				},
				"id": 12
			},
			"openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"Context": [
							1857
						],
						"Counters": [
							1931
						],
						"ECDSA": [
							2297
						],
						"EIP712": [
							2451
						],
						"ERC20": [
							1593
						],
						"ERC20Permit": [
							1835
						],
						"IERC20": [
							193
						],
						"IERC20Metadata": [
							212
						],
						"IERC20Permit": [
							248
						],
						"TWStrings": [
							1005
						]
					},
					"id": 1836,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1595,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:13"
						},
						{
							"absolutePath": "eip/interface/IERC20Permit.sol",
							"file": "../../../../eip/interface/IERC20Permit.sol",
							"id": 1596,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1836,
							"sourceUnit": 249,
							"src": "138:52:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-presets/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 1597,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1836,
							"sourceUnit": 1594,
							"src": "191:22:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-presets/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 1598,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1836,
							"sourceUnit": 2452,
							"src": "214:48:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-presets/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 1599,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1836,
							"sourceUnit": 2298,
							"src": "263:47:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-presets/utils/Counters.sol",
							"file": "../../../utils/Counters.sol",
							"id": 1600,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1836,
							"sourceUnit": 1932,
							"src": "311:37:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1602,
										"name": "ERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1593,
										"src": "901:5:13"
									},
									"id": 1603,
									"nodeType": "InheritanceSpecifier",
									"src": "901:5:13"
								},
								{
									"baseName": {
										"id": 1604,
										"name": "IERC20Permit",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 248,
										"src": "908:12:13"
									},
									"id": 1605,
									"nodeType": "InheritanceSpecifier",
									"src": "908:12:13"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1601,
								"nodeType": "StructuredDocumentation",
								"src": "350:517:13",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._"
							},
							"fullyImplemented": true,
							"id": 1835,
							"linearizedBaseContracts": [
								1835,
								248,
								1593,
								212,
								193,
								1857
							],
							"name": "ERC20Permit",
							"nameLocation": "886:11:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1609,
									"libraryName": {
										"id": 1606,
										"name": "Counters",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1931,
										"src": "933:8:13"
									},
									"nodeType": "UsingForDirective",
									"src": "927:36:13",
									"typeName": {
										"id": 1608,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1607,
											"name": "Counters.Counter",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1863,
											"src": "946:16:13"
										},
										"referencedDeclaration": 1863,
										"src": "946:16:13",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": false,
									"id": 1614,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "1014:7:13",
									"nodeType": "VariableDeclaration",
									"scope": 1835,
									"src": "969:52:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1863_storage_$",
										"typeString": "mapping(address => struct Counters.Counter)"
									},
									"typeName": {
										"id": 1613,
										"keyType": {
											"id": 1610,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "977:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "969:36:13",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1863_storage_$",
											"typeString": "mapping(address => struct Counters.Counter)"
										},
										"valueType": {
											"id": 1612,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1611,
												"name": "Counters.Counter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1863,
												"src": "988:16:13"
											},
											"referencedDeclaration": 1863,
											"src": "988:16:13",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
												"typeString": "struct Counters.Counter"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1616,
									"mutability": "immutable",
									"name": "_CACHED_DOMAIN_SEPARATOR",
									"nameLocation": "1106:24:13",
									"nodeType": "VariableDeclaration",
									"scope": 1835,
									"src": "1080:50:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1615,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1080:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1618,
									"mutability": "immutable",
									"name": "_CACHED_CHAIN_ID",
									"nameLocation": "1215:16:13",
									"nodeType": "VariableDeclaration",
									"scope": 1835,
									"src": "1189:42:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1617,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1189:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1620,
									"mutability": "immutable",
									"name": "_CACHED_THIS",
									"nameLocation": "1316:12:13",
									"nodeType": "VariableDeclaration",
									"scope": 1835,
									"src": "1290:38:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1619,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1290:7:13",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1625,
									"mutability": "immutable",
									"name": "_PERMIT_TYPEHASH",
									"nameLocation": "1413:16:13",
									"nodeType": "VariableDeclaration",
									"scope": 1835,
									"src": "1387:148:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1621,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1387:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 1623,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1450:84:13",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 1622,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1440:9:13",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1624,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1440:95:13",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1654,
										"nodeType": "Block",
										"src": "1845:147:13",
										"statements": [
											{
												"expression": {
													"id": 1640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1637,
														"name": "_CACHED_CHAIN_ID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1618,
														"src": "1855:16:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1638,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1874:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1639,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "1874:13:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1855:32:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1641,
												"nodeType": "ExpressionStatement",
												"src": "1855:32:13"
											},
											{
												"expression": {
													"id": 1647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1642,
														"name": "_CACHED_THIS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1620,
														"src": "1897:12:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1645,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "1920:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ERC20Permit_$1835",
																	"typeString": "contract ERC20Permit"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_ERC20Permit_$1835",
																	"typeString": "contract ERC20Permit"
																}
															],
															"id": 1644,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1912:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1643,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1912:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 1646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1912:13:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1897:28:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1648,
												"nodeType": "ExpressionStatement",
												"src": "1897:28:13"
											},
											{
												"expression": {
													"id": 1652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1649,
														"name": "_CACHED_DOMAIN_SEPARATOR",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1616,
														"src": "1935:24:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1650,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1805,
															"src": "1962:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 1651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1962:23:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1935:50:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1653,
												"nodeType": "ExpressionStatement",
												"src": "1935:50:13"
											}
										]
									},
									"documentation": {
										"id": 1626,
										"nodeType": "StructuredDocumentation",
										"src": "1542:220:13",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 1655,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1633,
													"name": "name_",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1628,
													"src": "1829:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"id": 1634,
													"name": "symbol_",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1630,
													"src": "1836:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												}
											],
											"id": 1635,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1632,
												"name": "ERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1593,
												"src": "1823:5:13"
											},
											"nodeType": "ModifierInvocation",
											"src": "1823:21:13"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1793:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "1779:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1627,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1779:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1630,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1814:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "1800:21:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1629,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1800:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1778:44:13"
									},
									"returnParameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1845:0:13"
									},
									"scope": 1835,
									"src": "1767:225:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										233
									],
									"body": {
										"id": 1730,
										"nodeType": "Block",
										"src": "2251:453:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1675,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2269:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2269:15:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1677,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1664,
																"src": "2288:8:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2269:27:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
															"id": 1679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2298:31:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															},
															"value": "ERC20Permit: expired deadline"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															}
														],
														"id": 1674,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2261:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:69:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1681,
												"nodeType": "ExpressionStatement",
												"src": "2261:69:13"
											},
											{
												"assignments": [
													1683
												],
												"declarations": [
													{
														"constant": false,
														"id": 1683,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "2349:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 1730,
														"src": "2341:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1682,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2341:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1697,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1687,
																	"name": "_PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1625,
																	"src": "2383:16:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1688,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1658,
																	"src": "2401:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1689,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1660,
																	"src": "2408:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1690,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1662,
																	"src": "2417:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1692,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1658,
																			"src": "2434:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1691,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1834,
																		"src": "2424:9:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 1693,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2424:16:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1694,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1664,
																	"src": "2442:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1685,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2372:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1686,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2372:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1695,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2372:79:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1684,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2362:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2362:90:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2341:111:13"
											},
											{
												"assignments": [
													1699
												],
												"declarations": [
													{
														"constant": false,
														"id": 1699,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2471:4:13",
														"nodeType": "VariableDeclaration",
														"scope": 1730,
														"src": "2463:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1698,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2463:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1706,
												"initialValue": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1702,
																"name": "DOMAIN_SEPARATOR",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1774,
																"src": "2500:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 1703,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2500:18:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1704,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1683,
															"src": "2520:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1700,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2297,
															"src": "2478:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2297_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1701,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2276,
														"src": "2478:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 1705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2478:53:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2463:68:13"
											},
											{
												"assignments": [
													1708
												],
												"declarations": [
													{
														"constant": false,
														"id": 1708,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2550:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 1730,
														"src": "2542:14:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1707,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2542:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1716,
												"initialValue": {
													"arguments": [
														{
															"id": 1711,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1699,
															"src": "2573:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1712,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1666,
															"src": "2579:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1713,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1668,
															"src": "2582:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1714,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1670,
															"src": "2585:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1709,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2297,
															"src": "2559:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2297_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1710,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2232,
														"src": "2559:13:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2559:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2542:45:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1720,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1718,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1708,
																"src": "2605:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1719,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1658,
																"src": "2615:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2605:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
															"id": 1721,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2622:32:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															},
															"value": "ERC20Permit: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															}
														],
														"id": 1717,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2597:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2597:58:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1723,
												"nodeType": "ExpressionStatement",
												"src": "2597:58:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1725,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1658,
															"src": "2675:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1726,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1660,
															"src": "2682:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1727,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1662,
															"src": "2691:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1724,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1527,
														"src": "2666:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2666:31:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1729,
												"nodeType": "ExpressionStatement",
												"src": "2666:31:13"
											}
										]
									},
									"documentation": {
										"id": 1656,
										"nodeType": "StructuredDocumentation",
										"src": "1998:50:13",
										"text": " @dev See {IERC20Permit-permit}."
									},
									"functionSelector": "d505accf",
									"id": 1731,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "2062:6:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1672,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2242:8:13"
									},
									"parameters": {
										"id": 1671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2086:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "2078:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1657,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2078:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2109:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "2101:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2101:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1662,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2134:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "2126:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1664,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2157:8:13",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "2149:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1663,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1666,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "2181:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "2175:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1665,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2175:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1668,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2200:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "2192:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1667,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2192:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1670,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2219:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "2211:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1669,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2211:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2068:158:13"
									},
									"returnParameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2251:0:13"
									},
									"scope": 1835,
									"src": "2053:651:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										241
									],
									"body": {
										"id": 1746,
										"nodeType": "Block",
										"src": "2843:48:13",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"baseExpression": {
																"id": 1740,
																"name": "_nonces",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1614,
																"src": "2860:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1863_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 1742,
															"indexExpression": {
																"id": 1741,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1734,
																"src": "2868:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2860:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1863_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 1743,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1875,
														"src": "2860:22:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1863_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1863_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 1744,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2860:24:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1739,
												"id": 1745,
												"nodeType": "Return",
												"src": "2853:31:13"
											}
										]
									},
									"documentation": {
										"id": 1732,
										"nodeType": "StructuredDocumentation",
										"src": "2710:50:13",
										"text": " @dev See {IERC20Permit-nonces}."
									},
									"functionSelector": "7ecebe00",
									"id": 1747,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2774:6:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1736,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2816:8:13"
									},
									"parameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2789:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1747,
												"src": "2781:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1733,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2781:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2780:15:13"
									},
									"returnParameters": {
										"id": 1739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1738,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1747,
												"src": "2834:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2834:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2833:9:13"
									},
									"scope": 1835,
									"src": "2765:126:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										247
									],
									"body": {
										"id": 1773,
										"nodeType": "Block",
										"src": "3082:205:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1759,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1756,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3104:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Permit_$1835",
																		"typeString": "contract ERC20Permit"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Permit_$1835",
																		"typeString": "contract ERC20Permit"
																	}
																],
																"id": 1755,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3096:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1754,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3096:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1757,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3096:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 1758,
															"name": "_CACHED_THIS",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1620,
															"src": "3113:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3096:29:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1763,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1760,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3129:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1761,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3129:13:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 1762,
															"name": "_CACHED_CHAIN_ID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1618,
															"src": "3146:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3129:33:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3096:66:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1771,
													"nodeType": "Block",
													"src": "3226:55:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1768,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1805,
																	"src": "3247:21:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 1769,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3247:23:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 1753,
															"id": 1770,
															"nodeType": "Return",
															"src": "3240:30:13"
														}
													]
												},
												"id": 1772,
												"nodeType": "IfStatement",
												"src": "3092:189:13",
												"trueBody": {
													"id": 1767,
													"nodeType": "Block",
													"src": "3164:56:13",
													"statements": [
														{
															"expression": {
																"id": 1765,
																"name": "_CACHED_DOMAIN_SEPARATOR",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1616,
																"src": "3185:24:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 1753,
															"id": 1766,
															"nodeType": "Return",
															"src": "3178:31:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1748,
										"nodeType": "StructuredDocumentation",
										"src": "2897:60:13",
										"text": " @dev See {IERC20Permit-DOMAIN_SEPARATOR}."
									},
									"functionSelector": "3644e515",
									"id": 1774,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3024:16:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1750,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3055:8:13"
									},
									"parameters": {
										"id": 1749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3040:2:13"
									},
									"returnParameters": {
										"id": 1753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1752,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1774,
												"src": "3073:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1751,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3073:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3072:9:13"
									},
									"scope": 1835,
									"src": "3015:272:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1804,
										"nodeType": "Block",
										"src": "3357:374:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
																			"id": 1783,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3455:84:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																				"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
																			},
																			"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																				"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
																			}
																		],
																		"id": 1782,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "3445:9:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1784,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3445:95:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 1788,
																						"name": "name",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1060,
																						"src": "3578:4:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																							"typeString": "function () view returns (string memory)"
																						}
																					},
																					"id": 1789,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3578:6:13",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 1787,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3572:5:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																					"typeString": "type(bytes storage pointer)"
																				},
																				"typeName": {
																					"id": 1786,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "3572:5:13",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1790,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3572:13:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 1785,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "3562:9:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1791,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3562:24:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [
																		{
																			"hexValue": "31",
																			"id": 1793,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3618:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
																				"typeString": "literal_string \"1\""
																			},
																			"value": "1"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
																				"typeString": "literal_string \"1\""
																			}
																		],
																		"id": 1792,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "3608:9:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1794,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3608:14:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 1795,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "3644:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1796,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "3644:13:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1799,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3687:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ERC20Permit_$1835",
																				"typeString": "contract ERC20Permit"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_ERC20Permit_$1835",
																				"typeString": "contract ERC20Permit"
																			}
																		],
																		"id": 1798,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3679:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1797,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3679:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3679:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1780,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3413:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1781,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "3413:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1801,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3413:297:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1779,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3386:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1802,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3386:338:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1778,
												"id": 1803,
												"nodeType": "Return",
												"src": "3367:357:13"
											}
										]
									},
									"id": 1805,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "3302:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1775,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3323:2:13"
									},
									"returnParameters": {
										"id": 1778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1777,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1805,
												"src": "3348:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1776,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3348:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3347:9:13"
									},
									"scope": 1835,
									"src": "3293:438:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1833,
										"nodeType": "Block",
										"src": "3939:126:13",
										"statements": [
											{
												"assignments": [
													1817
												],
												"declarations": [
													{
														"constant": false,
														"id": 1817,
														"mutability": "mutable",
														"name": "nonce",
														"nameLocation": "3974:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1833,
														"src": "3949:30:13",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
															"typeString": "struct Counters.Counter"
														},
														"typeName": {
															"id": 1816,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1815,
																"name": "Counters.Counter",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1863,
																"src": "3949:16:13"
															},
															"referencedDeclaration": 1863,
															"src": "3949:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
																"typeString": "struct Counters.Counter"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1821,
												"initialValue": {
													"baseExpression": {
														"id": 1818,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1614,
														"src": "3982:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$1863_storage_$",
															"typeString": "mapping(address => struct Counters.Counter storage ref)"
														}
													},
													"id": 1820,
													"indexExpression": {
														"id": 1819,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1808,
														"src": "3990:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3982:14:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1863_storage",
														"typeString": "struct Counters.Counter storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3949:47:13"
											},
											{
												"expression": {
													"id": 1826,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1822,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1811,
														"src": "4006:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 1823,
																"name": "nonce",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1817,
																"src": "4016:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
																	"typeString": "struct Counters.Counter storage pointer"
																}
															},
															"id": 1824,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "current",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1875,
															"src": "4016:13:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$1863_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1863_storage_ptr_$",
																"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
															}
														},
														"id": 1825,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4016:15:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4006:25:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1827,
												"nodeType": "ExpressionStatement",
												"src": "4006:25:13"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1828,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1817,
															"src": "4041:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 1830,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1889,
														"src": "4041:15:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$1863_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1863_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 1831,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4041:17:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1832,
												"nodeType": "ExpressionStatement",
												"src": "4041:17:13"
											}
										]
									},
									"documentation": {
										"id": 1806,
										"nodeType": "StructuredDocumentation",
										"src": "3737:120:13",
										"text": " @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"
									},
									"id": 1834,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "3871:9:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1808,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3889:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1834,
												"src": "3881:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1807,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3881:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3880:15:13"
									},
									"returnParameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "current",
												"nameLocation": "3930:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1834,
												"src": "3922:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3922:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3921:17:13"
									},
									"scope": 1835,
									"src": "3862:203:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1836,
							"src": "868:3199:13",
							"usedErrors": []
						}
					],
					"src": "113:3955:13"
				},
				"id": 13
			},
			"openzeppelin-presets/utils/Context.sol": {
				"ast": {
					"absolutePath": "openzeppelin-presets/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1857
						]
					},
					"id": 1858,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1837,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:14"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1838,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:14",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1857,
							"linearizedBaseContracts": [
								1857
							],
							"name": "Context",
							"nameLocation": "626:7:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1846,
										"nodeType": "Block",
										"src": "702:34:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1843,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1842,
												"id": 1845,
												"nodeType": "Return",
												"src": "712:17:14"
											}
										]
									},
									"id": 1847,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1839,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:14"
									},
									"returnParameters": {
										"id": 1842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1841,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "693:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:14"
									},
									"scope": 1857,
									"src": "640:96:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1855,
										"nodeType": "Block",
										"src": "809:32:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1852,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1851,
												"id": 1854,
												"nodeType": "Return",
												"src": "819:15:14"
											}
										]
									},
									"id": 1856,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1848,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:14"
									},
									"returnParameters": {
										"id": 1851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1856,
												"src": "793:14:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1849,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:14"
									},
									"scope": 1857,
									"src": "742:99:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1858,
							"src": "608:235:14",
							"usedErrors": []
						}
					],
					"src": "86:758:14"
				},
				"id": 14
			},
			"openzeppelin-presets/utils/Counters.sol": {
				"ast": {
					"absolutePath": "openzeppelin-presets/utils/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							1931
						]
					},
					"id": 1932,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1859,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Counters",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1860,
								"nodeType": "StructuredDocumentation",
								"src": "112:311:15",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 1931,
							"linearizedBaseContracts": [
								1931
							],
							"name": "Counters",
							"nameLocation": "432:8:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counters.Counter",
									"id": 1863,
									"members": [
										{
											"constant": false,
											"id": 1862,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "794:6:15",
											"nodeType": "VariableDeclaration",
											"scope": 1863,
											"src": "786:14:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1861,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "786:7:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "454:7:15",
									"nodeType": "StructDefinition",
									"scope": 1931,
									"src": "447:374:15",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1874,
										"nodeType": "Block",
										"src": "901:38:15",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1871,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1866,
														"src": "918:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 1872,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1862,
													"src": "918:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1870,
												"id": 1873,
												"nodeType": "Return",
												"src": "911:21:15"
											}
										]
									},
									"id": 1875,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "836:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "860:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "844:23:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1865,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1864,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1863,
														"src": "844:7:15"
													},
													"referencedDeclaration": 1863,
													"src": "844:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:25:15"
									},
									"returnParameters": {
										"id": 1870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1869,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "892:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1868,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:9:15"
									},
									"scope": 1931,
									"src": "827:112:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1888,
										"nodeType": "Block",
										"src": "998:70:15",
										"statements": [
											{
												"id": 1887,
												"nodeType": "UncheckedBlock",
												"src": "1008:54:15",
												"statements": [
													{
														"expression": {
															"id": 1885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1881,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1878,
																	"src": "1032:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 1883,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1862,
																"src": "1032:14:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1884,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1050:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1032:19:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1886,
														"nodeType": "ExpressionStatement",
														"src": "1032:19:15"
													}
												]
											}
										]
									},
									"id": 1889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "954:9:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "980:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "964:23:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1877,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1876,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1863,
														"src": "964:7:15"
													},
													"referencedDeclaration": 1863,
													"src": "964:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:25:15"
									},
									"returnParameters": {
										"id": 1880,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:0:15"
									},
									"scope": 1931,
									"src": "945:123:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1916,
										"nodeType": "Block",
										"src": "1127:176:15",
										"statements": [
											{
												"assignments": [
													1896
												],
												"declarations": [
													{
														"constant": false,
														"id": 1896,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "1145:5:15",
														"nodeType": "VariableDeclaration",
														"scope": 1916,
														"src": "1137:13:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1895,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1137:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1899,
												"initialValue": {
													"expression": {
														"id": 1897,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1892,
														"src": "1153:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 1898,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1862,
													"src": "1153:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1137:30:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1903,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1901,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1896,
																"src": "1185:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1902,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1193:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1185:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 1904,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1196:29:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 1900,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1177:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1905,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1177:49:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1906,
												"nodeType": "ExpressionStatement",
												"src": "1177:49:15"
											},
											{
												"id": 1915,
												"nodeType": "UncheckedBlock",
												"src": "1236:61:15",
												"statements": [
													{
														"expression": {
															"id": 1913,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 1907,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1892,
																	"src": "1260:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 1909,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1862,
																"src": "1260:14:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1912,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1910,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1896,
																	"src": "1277:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1911,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1285:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1277:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1260:26:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1914,
														"nodeType": "ExpressionStatement",
														"src": "1260:26:15"
													}
												]
											}
										]
									},
									"id": 1917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "1083:9:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1109:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "1093:23:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1891,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1890,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1863,
														"src": "1093:7:15"
													},
													"referencedDeclaration": 1863,
													"src": "1093:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:25:15"
									},
									"returnParameters": {
										"id": 1894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1127:0:15"
									},
									"scope": 1931,
									"src": "1074:229:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1929,
										"nodeType": "Block",
										"src": "1358:35:15",
										"statements": [
											{
												"expression": {
													"id": 1927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1923,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1920,
															"src": "1368:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 1925,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1862,
														"src": "1368:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1926,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1385:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1368:18:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1928,
												"nodeType": "ExpressionStatement",
												"src": "1368:18:15"
											}
										]
									},
									"id": 1930,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "1318:5:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1920,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1340:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 1930,
												"src": "1324:23:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 1919,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1918,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1863,
														"src": "1324:7:15"
													},
													"referencedDeclaration": 1863,
													"src": "1324:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$1863_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:25:15"
									},
									"returnParameters": {
										"id": 1922,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1358:0:15"
									},
									"scope": 1931,
									"src": "1309:84:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1932,
							"src": "424:971:15",
							"usedErrors": []
						}
					],
					"src": "87:1309:15"
				},
				"id": 15
			},
			"openzeppelin-presets/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "openzeppelin-presets/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2297
						],
						"TWStrings": [
							1005
						]
					},
					"id": 2298,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1933,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:16"
						},
						{
							"absolutePath": "lib/TWStrings.sol",
							"file": "../../../lib/TWStrings.sol",
							"id": 1934,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2298,
							"sourceUnit": 1006,
							"src": "137:36:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1935,
								"nodeType": "StructuredDocumentation",
								"src": "175:205:16",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2297,
							"linearizedBaseContracts": [
								2297
							],
							"name": "ECDSA",
							"nameLocation": "389:5:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1941,
									"members": [
										{
											"id": 1936,
											"name": "NoError",
											"nameLocation": "429:7:16",
											"nodeType": "EnumValue",
											"src": "429:7:16"
										},
										{
											"id": 1937,
											"name": "InvalidSignature",
											"nameLocation": "446:16:16",
											"nodeType": "EnumValue",
											"src": "446:16:16"
										},
										{
											"id": 1938,
											"name": "InvalidSignatureLength",
											"nameLocation": "472:22:16",
											"nodeType": "EnumValue",
											"src": "472:22:16"
										},
										{
											"id": 1939,
											"name": "InvalidSignatureS",
											"nameLocation": "504:17:16",
											"nodeType": "EnumValue",
											"src": "504:17:16"
										},
										{
											"id": 1940,
											"name": "InvalidSignatureV",
											"nameLocation": "531:17:16",
											"nodeType": "EnumValue",
											"src": "531:17:16"
										}
									],
									"name": "RecoverError",
									"nameLocation": "406:12:16",
									"nodeType": "EnumDefinition",
									"src": "401:175:16"
								},
								{
									"body": {
										"id": 1984,
										"nodeType": "Block",
										"src": "636:457:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1941",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 1950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1947,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1944,
														"src": "650:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1941",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1948,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1941,
															"src": "659:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1941_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 1949,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1936,
														"src": "659:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1941",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "650:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1941",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1956,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1953,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1944,
															"src": "746:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1954,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1941,
																"src": "755:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1941_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1955,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1937,
															"src": "755:29:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "746:38:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 1965,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1962,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1944,
																"src": "855:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1941",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1963,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "864:12:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1941_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 1964,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1938,
																"src": "864:35:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1941",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "855:44:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1941",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 1974,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1971,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1944,
																	"src": "977:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1941",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1972,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1941,
																		"src": "986:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1941_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 1973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1939,
																	"src": "986:30:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1941",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "977:39:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1980,
															"nodeType": "IfStatement",
															"src": "973:114:16",
															"trueBody": {
																"id": 1979,
																"nodeType": "Block",
																"src": "1018:69:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
																					"id": 1976,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1039:36:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					},
																					"value": "ECDSA: invalid signature 's' value"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					}
																				],
																				"id": 1975,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "1032:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1977,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1032:44:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1978,
																		"nodeType": "ExpressionStatement",
																		"src": "1032:44:16"
																	}
																]
															}
														},
														"id": 1981,
														"nodeType": "IfStatement",
														"src": "851:236:16",
														"trueBody": {
															"id": 1970,
															"nodeType": "Block",
															"src": "901:66:16",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																				"id": 1967,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "922:33:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				},
																				"value": "ECDSA: invalid signature length"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				}
																			],
																			"id": 1966,
																			"name": "revert",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				4294967277,
																				4294967277
																			],
																			"referencedDeclaration": 4294967277,
																			"src": "915:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																				"typeString": "function (string memory) pure"
																			}
																		},
																		"id": 1968,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "915:41:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1969,
																	"nodeType": "ExpressionStatement",
																	"src": "915:41:16"
																}
															]
														}
													},
													"id": 1982,
													"nodeType": "IfStatement",
													"src": "742:345:16",
													"trueBody": {
														"id": 1961,
														"nodeType": "Block",
														"src": "786:59:16",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																			"id": 1958,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "807:26:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			},
																			"value": "ECDSA: invalid signature"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			}
																		],
																		"id": 1957,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "800:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 1959,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "800:34:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1960,
																"nodeType": "ExpressionStatement",
																"src": "800:34:16"
															}
														]
													}
												},
												"id": 1983,
												"nodeType": "IfStatement",
												"src": "646:441:16",
												"trueBody": {
													"id": 1952,
													"nodeType": "Block",
													"src": "681:55:16",
													"statements": [
														{
															"functionReturnParameters": 1946,
															"id": 1951,
															"nodeType": "Return",
															"src": "695:7:16"
														}
													]
												}
											}
										]
									},
									"id": 1985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "591:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1944,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "616:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "603:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1941",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1943,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1942,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1941,
														"src": "603:12:16"
													},
													"referencedDeclaration": 1941,
													"src": "603:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1941",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "602:20:16"
									},
									"returnParameters": {
										"id": 1946,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "636:0:16"
									},
									"scope": 2297,
									"src": "582:511:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2030,
										"nodeType": "Block",
										"src": "2261:626:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2001,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1998,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1990,
															"src": "2275:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1999,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2275:16:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 2000,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2295:2:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2275:22:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2028,
													"nodeType": "Block",
													"src": "2800:81:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2022,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2830:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2021,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2822:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2020,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2822:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2023,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2822:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2024,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1941,
																			"src": "2834:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1941_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2025,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1938,
																		"src": "2834:35:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1941",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 2026,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2821:49:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1997,
															"id": 2027,
															"nodeType": "Return",
															"src": "2814:56:16"
														}
													]
												},
												"id": 2029,
												"nodeType": "IfStatement",
												"src": "2271:610:16",
												"trueBody": {
													"id": 2019,
													"nodeType": "Block",
													"src": "2299:495:16",
													"statements": [
														{
															"assignments": [
																2003
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2003,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2321:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2019,
																	"src": "2313:9:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2002,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2313:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2004,
															"nodeType": "VariableDeclarationStatement",
															"src": "2313:9:16"
														},
														{
															"assignments": [
																2006
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2006,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2344:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2019,
																	"src": "2336:9:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2005,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2336:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2007,
															"nodeType": "VariableDeclarationStatement",
															"src": "2336:9:16"
														},
														{
															"assignments": [
																2009
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2009,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2365:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2019,
																	"src": "2359:7:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 2008,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2359:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2010,
															"nodeType": "VariableDeclarationStatement",
															"src": "2359:7:16"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2567:171:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2585:32:16",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2600:9:16"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2611:4:16",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2596:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2596:20:16"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2590:5:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:27:16"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "2585:1:16"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2634:32:16",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2649:9:16"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2660:4:16",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2645:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2645:20:16"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2639:5:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2639:27:16"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "2634:1:16"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2683:41:16",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2693:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "2706:9:16"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2717:4:16",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2702:3:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2702:20:16"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2696:5:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2696:27:16"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "2688:4:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2688:36:16"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "2683:1:16"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 2003,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2585:1:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2006,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2634:1:16",
																	"valueSize": 1
																},
																{
																	"declaration": 1990,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2600:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 1990,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2649:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 1990,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2706:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2009,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2683:1:16",
																	"valueSize": 1
																}
															],
															"id": 2011,
															"nodeType": "InlineAssembly",
															"src": "2558:180:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2013,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1988,
																		"src": "2769:4:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2014,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2009,
																		"src": "2775:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 2015,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2003,
																		"src": "2778:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2016,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2006,
																		"src": "2781:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2012,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		2031,
																		2105,
																		2199
																	],
																	"referencedDeclaration": 2199,
																	"src": "2758:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1941_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																	}
																},
																"id": 2017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2758:25:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1997,
															"id": 2018,
															"nodeType": "Return",
															"src": "2751:32:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1986,
										"nodeType": "StructuredDocumentation",
										"src": "1099:1053:16",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
									},
									"id": 2031,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2166:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2185:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "2177:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1987,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2177:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2204:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "2191:22:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1989,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2191:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2176:38:16"
									},
									"returnParameters": {
										"id": 1997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1993,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "2238:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1992,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2238:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "2247:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1941",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1995,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1994,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1941,
														"src": "2247:12:16"
													},
													"referencedDeclaration": 1941,
													"src": "2247:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1941",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2237:23:16"
									},
									"scope": 2297,
									"src": "2157:730:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2057,
										"nodeType": "Block",
										"src": "3760:140:16",
										"statements": [
											{
												"assignments": [
													2042,
													2045
												],
												"declarations": [
													{
														"constant": false,
														"id": 2042,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3779:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2057,
														"src": "3771:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2041,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3771:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2045,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3803:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2057,
														"src": "3790:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1941",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2044,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2043,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1941,
																"src": "3790:12:16"
															},
															"referencedDeclaration": 1941,
															"src": "3790:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2050,
												"initialValue": {
													"arguments": [
														{
															"id": 2047,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "3823:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2048,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2036,
															"src": "3829:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2046,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2031,
															2105,
															2199
														],
														"referencedDeclaration": 2031,
														"src": "3812:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1941_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 2049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3812:27:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3770:69:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2052,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2045,
															"src": "3861:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 2051,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1985,
														"src": "3849:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1941_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 2053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3849:18:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2054,
												"nodeType": "ExpressionStatement",
												"src": "3849:18:16"
											},
											{
												"expression": {
													"id": 2055,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2042,
													"src": "3884:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2040,
												"id": 2056,
												"nodeType": "Return",
												"src": "3877:16:16"
											}
										]
									},
									"documentation": {
										"id": 2032,
										"nodeType": "StructuredDocumentation",
										"src": "2893:775:16",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 2058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3682:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2034,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3698:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2058,
												"src": "3690:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2033,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3690:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2036,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3717:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2058,
												"src": "3704:22:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2035,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3704:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3689:38:16"
									},
									"returnParameters": {
										"id": 2040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2039,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2058,
												"src": "3751:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3751:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3750:9:16"
									},
									"scope": 2297,
									"src": "3673:227:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2104,
										"nodeType": "Block",
										"src": "4287:203:16",
										"statements": [
											{
												"assignments": [
													2074
												],
												"declarations": [
													{
														"constant": false,
														"id": 2074,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "4305:1:16",
														"nodeType": "VariableDeclaration",
														"scope": 2104,
														"src": "4297:9:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2073,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4297:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2081,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 2080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2075,
														"name": "vs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2065,
														"src": "4309:2:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																"id": 2078,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4322:66:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																},
																"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																}
															],
															"id": 2077,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4314:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes32_$",
																"typeString": "type(bytes32)"
															},
															"typeName": {
																"id": 2076,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "4314:7:16",
																"typeDescriptions": {}
															}
														},
														"id": 2079,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4314:75:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4309:80:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4297:92:16"
											},
											{
												"assignments": [
													2083
												],
												"declarations": [
													{
														"constant": false,
														"id": 2083,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "4405:1:16",
														"nodeType": "VariableDeclaration",
														"scope": 2104,
														"src": "4399:7:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 2082,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4399:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2096,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2094,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2091,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"id": 2088,
																					"name": "vs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2065,
																					"src": "4424:2:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 2087,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4416:7:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 2086,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4416:7:16",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2089,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4416:11:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">>",
																		"rightExpression": {
																			"hexValue": "323535",
																			"id": 2090,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4431:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_255_by_1",
																				"typeString": "int_const 255"
																			},
																			"value": "255"
																		},
																		"src": "4416:18:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2092,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4415:20:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "3237",
																"id": 2093,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4438:2:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_27_by_1",
																	"typeString": "int_const 27"
																},
																"value": "27"
															},
															"src": "4415:25:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2085,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4409:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 2084,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4409:5:16",
															"typeDescriptions": {}
														}
													},
													"id": 2095,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4409:32:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4399:42:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2098,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2061,
															"src": "4469:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2099,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "4475:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2100,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2063,
															"src": "4478:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2101,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2074,
															"src": "4481:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2097,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2031,
															2105,
															2199
														],
														"referencedDeclaration": 2199,
														"src": "4458:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1941_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 2102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4458:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 2072,
												"id": 2103,
												"nodeType": "Return",
												"src": "4451:32:16"
											}
										]
									},
									"documentation": {
										"id": 2059,
										"nodeType": "StructuredDocumentation",
										"src": "3906:243:16",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
									},
									"id": 2105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4163:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4191:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2105,
												"src": "4183:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2060,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4183:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4213:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2105,
												"src": "4205:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2062,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4205:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2065,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4232:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 2105,
												"src": "4224:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2064,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4224:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4173:67:16"
									},
									"returnParameters": {
										"id": 2072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2068,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2105,
												"src": "4264:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4264:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2071,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2105,
												"src": "4273:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1941",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2070,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2069,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1941,
														"src": "4273:12:16"
													},
													"referencedDeclaration": 1941,
													"src": "4273:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1941",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4263:23:16"
									},
									"scope": 2297,
									"src": "4154:336:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2134,
										"nodeType": "Block",
										"src": "4771:136:16",
										"statements": [
											{
												"assignments": [
													2118,
													2121
												],
												"declarations": [
													{
														"constant": false,
														"id": 2118,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4790:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2134,
														"src": "4782:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2117,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4782:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2121,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4814:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2134,
														"src": "4801:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1941",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2120,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2119,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1941,
																"src": "4801:12:16"
															},
															"referencedDeclaration": 1941,
															"src": "4801:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2127,
												"initialValue": {
													"arguments": [
														{
															"id": 2123,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2108,
															"src": "4834:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2124,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2110,
															"src": "4840:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2125,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2112,
															"src": "4843:2:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2122,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2031,
															2105,
															2199
														],
														"referencedDeclaration": 2105,
														"src": "4823:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1941_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 2126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4823:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4781:65:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2129,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2121,
															"src": "4868:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 2128,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1985,
														"src": "4856:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1941_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 2130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4856:18:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2131,
												"nodeType": "ExpressionStatement",
												"src": "4856:18:16"
											},
											{
												"expression": {
													"id": 2132,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2118,
													"src": "4891:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2116,
												"id": 2133,
												"nodeType": "Return",
												"src": "4884:16:16"
											}
										]
									},
									"documentation": {
										"id": 2106,
										"nodeType": "StructuredDocumentation",
										"src": "4496:154:16",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
									},
									"id": 2135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4664:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2108,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4689:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2135,
												"src": "4681:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2107,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4681:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2110,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4711:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2135,
												"src": "4703:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4703:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2112,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4730:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 2135,
												"src": "4722:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2111,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4722:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4671:67:16"
									},
									"returnParameters": {
										"id": 2116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2135,
												"src": "4762:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4762:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4761:9:16"
									},
									"scope": 2297,
									"src": "4655:252:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2198,
										"nodeType": "Block",
										"src": "5230:1345:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2154,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2144,
																"src": "6126:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2153,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6118:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2152,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6118:7:16",
																"typeDescriptions": {}
															}
														},
														"id": 2155,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6118:10:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 2156,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6131:66:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6118:79:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2167,
												"nodeType": "IfStatement",
												"src": "6114:161:16",
												"trueBody": {
													"id": 2166,
													"nodeType": "Block",
													"src": "6199:76:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2160,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6229:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2159,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6221:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2158,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6221:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6221:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2162,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1941,
																			"src": "6233:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1941_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2163,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1939,
																		"src": "6233:30:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1941",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 2164,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6220:44:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 2151,
															"id": 2165,
															"nodeType": "Return",
															"src": "6213:51:16"
														}
													]
												}
											},
											{
												"assignments": [
													2169
												],
												"declarations": [
													{
														"constant": false,
														"id": 2169,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6377:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2198,
														"src": "6369:14:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2168,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6369:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2176,
												"initialValue": {
													"arguments": [
														{
															"id": 2171,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2138,
															"src": "6396:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2172,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2140,
															"src": "6402:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2173,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2142,
															"src": "6405:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2174,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2144,
															"src": "6408:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2170,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6386:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 2175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6386:24:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6369:41:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2177,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2169,
														"src": "6424:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2180,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6442:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2179,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6434:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2178,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6434:7:16",
																"typeDescriptions": {}
															}
														},
														"id": 2181,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6434:10:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6424:20:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2192,
												"nodeType": "IfStatement",
												"src": "6420:101:16",
												"trueBody": {
													"id": 2191,
													"nodeType": "Block",
													"src": "6446:75:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2185,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6476:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2184,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6468:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2183,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6468:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2186,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6468:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2187,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1941,
																			"src": "6480:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1941_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1937,
																		"src": "6480:29:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1941",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 2189,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6467:43:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 2151,
															"id": 2190,
															"nodeType": "Return",
															"src": "6460:50:16"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 2193,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2169,
															"src": "6539:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2194,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1941,
																"src": "6547:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1941_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2195,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1936,
															"src": "6547:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"id": 2196,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6538:30:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 2151,
												"id": 2197,
												"nodeType": "Return",
												"src": "6531:37:16"
											}
										]
									},
									"documentation": {
										"id": 2136,
										"nodeType": "StructuredDocumentation",
										"src": "4913:163:16",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
									},
									"id": 2199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5090:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2138,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5118:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2199,
												"src": "5110:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2137,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2140,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5138:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2199,
												"src": "5132:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2139,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5132:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2142,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5157:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2199,
												"src": "5149:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2141,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5149:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5176:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2199,
												"src": "5168:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2143,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5168:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5100:83:16"
									},
									"returnParameters": {
										"id": 2151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2199,
												"src": "5207:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5207:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2199,
												"src": "5216:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1941",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2149,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2148,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1941,
														"src": "5216:12:16"
													},
													"referencedDeclaration": 1941,
													"src": "5216:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1941",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5206:23:16"
									},
									"scope": 2297,
									"src": "5081:1494:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2231,
										"nodeType": "Block",
										"src": "6840:138:16",
										"statements": [
											{
												"assignments": [
													2214,
													2217
												],
												"declarations": [
													{
														"constant": false,
														"id": 2214,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6859:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2231,
														"src": "6851:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2213,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6851:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2217,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6883:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2231,
														"src": "6870:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1941",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2216,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2215,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1941,
																"src": "6870:12:16"
															},
															"referencedDeclaration": 1941,
															"src": "6870:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2224,
												"initialValue": {
													"arguments": [
														{
															"id": 2219,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2202,
															"src": "6903:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2220,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2204,
															"src": "6909:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2221,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2206,
															"src": "6912:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2222,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2208,
															"src": "6915:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2218,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2031,
															2105,
															2199
														],
														"referencedDeclaration": 2199,
														"src": "6892:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1941_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 2223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6892:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1941_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6850:67:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2226,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2217,
															"src": "6939:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1941",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 2225,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1985,
														"src": "6927:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1941_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 2227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6927:18:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2228,
												"nodeType": "ExpressionStatement",
												"src": "6927:18:16"
											},
											{
												"expression": {
													"id": 2229,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2214,
													"src": "6962:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2212,
												"id": 2230,
												"nodeType": "Return",
												"src": "6955:16:16"
											}
										]
									},
									"documentation": {
										"id": 2200,
										"nodeType": "StructuredDocumentation",
										"src": "6581:122:16",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6717:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2202,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6742:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2232,
												"src": "6734:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2201,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6734:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2204,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6762:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2232,
												"src": "6756:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2203,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6756:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2206,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6781:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2232,
												"src": "6773:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2205,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6773:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2208,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6800:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2232,
												"src": "6792:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2207,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6792:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6724:83:16"
									},
									"returnParameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2211,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2232,
												"src": "6831:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6831:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6830:9:16"
									},
									"scope": 2297,
									"src": "6708:270:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2241,
										"nodeType": "Block",
										"src": "7354:310:16",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7510:148:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7531:4:16",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7537:34:16",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7524:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7524:48:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7524:48:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7592:4:16",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "hash",
																		"nodeType": "YulIdentifier",
																		"src": "7598:4:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7585:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7585:18:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7585:18:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7616:32:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7637:4:16",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:4:16",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "7627:9:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7627:21:16"
															},
															"variableNames": [
																{
																	"name": "message",
																	"nodeType": "YulIdentifier",
																	"src": "7616:7:16"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2235,
														"isOffset": false,
														"isSlot": false,
														"src": "7598:4:16",
														"valueSize": 1
													},
													{
														"declaration": 2238,
														"isOffset": false,
														"isSlot": false,
														"src": "7616:7:16",
														"valueSize": 1
													}
												],
												"id": 2240,
												"nodeType": "InlineAssembly",
												"src": "7501:157:16"
											}
										]
									},
									"documentation": {
										"id": 2233,
										"nodeType": "StructuredDocumentation",
										"src": "6984:279:16",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 2242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "7277:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2235,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "7308:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2242,
												"src": "7300:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2234,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7300:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7299:14:16"
									},
									"returnParameters": {
										"id": 2239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "7345:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 2242,
												"src": "7337:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2237,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7337:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7336:17:16"
									},
									"scope": 2297,
									"src": "7268:396:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2263,
										"nodeType": "Block",
										"src": "8029:118:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8073:32:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 2256,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2245,
																				"src": "8126:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2257,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "8126:8:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 2254,
																			"name": "TWStrings",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1005,
																			"src": "8107:9:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TWStrings_$1005_$",
																				"typeString": "type(library TWStrings)"
																			}
																		},
																		"id": 2255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "toString",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 887,
																		"src": "8107:18:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 2258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8107:28:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 2259,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2245,
																	"src": "8137:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2251,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8056:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2252,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "8056:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8056:83:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2250,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8046:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8046:94:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2249,
												"id": 2262,
												"nodeType": "Return",
												"src": "8039:101:16"
											}
										]
									},
									"documentation": {
										"id": 2243,
										"nodeType": "StructuredDocumentation",
										"src": "7670:274:16",
										"text": " @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 2264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "7958:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2245,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7994:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2264,
												"src": "7981:14:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2244,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7981:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7980:16:16"
									},
									"returnParameters": {
										"id": 2249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2264,
												"src": "8020:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2247,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8020:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8019:9:16"
									},
									"scope": 2297,
									"src": "7949:198:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2275,
										"nodeType": "Block",
										"src": "8593:290:16",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8655:222:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8669:22:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8686:4:16",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8680:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8680:11:16"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nodeType": "YulTypedName",
																	"src": "8673:3:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8711:3:16"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8716:10:16",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8704:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8704:23:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8704:23:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "8751:3:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8756:4:16",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8747:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8747:14:16"
																	},
																	{
																		"name": "domainSeparator",
																		"nodeType": "YulIdentifier",
																		"src": "8763:15:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8740:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8740:39:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8740:39:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "8803:3:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8808:4:16",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8799:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8799:14:16"
																	},
																	{
																		"name": "structHash",
																		"nodeType": "YulIdentifier",
																		"src": "8815:10:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8792:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8792:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8792:34:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8839:28:16",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8857:3:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8862:4:16",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "8847:9:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8847:20:16"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "8839:4:16"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2272,
														"isOffset": false,
														"isSlot": false,
														"src": "8839:4:16",
														"valueSize": 1
													},
													{
														"declaration": 2267,
														"isOffset": false,
														"isSlot": false,
														"src": "8763:15:16",
														"valueSize": 1
													},
													{
														"declaration": 2269,
														"isOffset": false,
														"isSlot": false,
														"src": "8815:10:16",
														"valueSize": 1
													}
												],
												"id": 2274,
												"nodeType": "InlineAssembly",
												"src": "8646:231:16"
											}
										]
									},
									"documentation": {
										"id": 2265,
										"nodeType": "StructuredDocumentation",
										"src": "8153:328:16",
										"text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
									},
									"id": 2276,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "8495:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2267,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "8519:15:16",
												"nodeType": "VariableDeclaration",
												"scope": 2276,
												"src": "8511:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2266,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8511:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2269,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "8544:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2276,
												"src": "8536:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2268,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8536:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8510:45:16"
									},
									"returnParameters": {
										"id": 2273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2272,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8587:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2276,
												"src": "8579:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2271,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8579:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8578:14:16"
									},
									"scope": 2297,
									"src": "8486:397:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2295,
										"nodeType": "Block",
										"src": "9198:80:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2289,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9242:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2290,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2279,
																	"src": "9254:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2291,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2281,
																	"src": "9265:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2287,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9225:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2288,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "9225:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2292,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9225:45:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2286,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9215:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9215:56:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2285,
												"id": 2294,
												"nodeType": "Return",
												"src": "9208:63:16"
											}
										]
									},
									"documentation": {
										"id": 2277,
										"nodeType": "StructuredDocumentation",
										"src": "8889:193:16",
										"text": " @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."
									},
									"id": 2296,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "9096:31:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2279,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "9136:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "9128:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9128:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2281,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9160:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "9147:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2280,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9147:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9127:38:16"
									},
									"returnParameters": {
										"id": 2285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2284,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2296,
												"src": "9189:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2283,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9189:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9188:9:16"
									},
									"scope": 2297,
									"src": "9087:191:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2298,
							"src": "381:8899:16",
							"usedErrors": []
						}
					],
					"src": "112:9169:16"
				},
				"id": 16
			},
			"openzeppelin-presets/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "openzeppelin-presets/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"ECDSA": [
							2297
						],
						"EIP712": [
							2451
						],
						"TWStrings": [
							1005
						]
					},
					"id": 2452,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2299,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "104:23:17"
						},
						{
							"absolutePath": "openzeppelin-presets/utils/cryptography/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 2300,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2452,
							"sourceUnit": 2298,
							"src": "129:21:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2301,
								"nodeType": "StructuredDocumentation",
								"src": "152:1142:17",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._"
							},
							"fullyImplemented": true,
							"id": 2451,
							"linearizedBaseContracts": [
								2451
							],
							"name": "EIP712",
							"nameLocation": "1313:6:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 2303,
									"mutability": "immutable",
									"name": "_CACHED_DOMAIN_SEPARATOR",
									"nameLocation": "1589:24:17",
									"nodeType": "VariableDeclaration",
									"scope": 2451,
									"src": "1563:50:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2302,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1563:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2305,
									"mutability": "immutable",
									"name": "_CACHED_CHAIN_ID",
									"nameLocation": "1645:16:17",
									"nodeType": "VariableDeclaration",
									"scope": 2451,
									"src": "1619:42:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2304,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1619:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2307,
									"mutability": "immutable",
									"name": "_CACHED_THIS",
									"nameLocation": "1693:12:17",
									"nodeType": "VariableDeclaration",
									"scope": 2451,
									"src": "1667:38:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2306,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1667:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2309,
									"mutability": "immutable",
									"name": "_HASHED_NAME",
									"nameLocation": "1738:12:17",
									"nodeType": "VariableDeclaration",
									"scope": 2451,
									"src": "1712:38:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2308,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1712:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2311,
									"mutability": "immutable",
									"name": "_HASHED_VERSION",
									"nameLocation": "1782:15:17",
									"nodeType": "VariableDeclaration",
									"scope": 2451,
									"src": "1756:41:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2310,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1756:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2313,
									"mutability": "immutable",
									"name": "_TYPE_HASH",
									"nameLocation": "1829:10:17",
									"nodeType": "VariableDeclaration",
									"scope": 2451,
									"src": "1803:36:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2312,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1803:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2377,
										"nodeType": "Block",
										"src": "2510:547:17",
										"statements": [
											{
												"assignments": [
													2322
												],
												"declarations": [
													{
														"constant": false,
														"id": 2322,
														"mutability": "mutable",
														"name": "hashedName",
														"nameLocation": "2528:10:17",
														"nodeType": "VariableDeclaration",
														"scope": 2377,
														"src": "2520:18:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2321,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2520:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2329,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2326,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2316,
																	"src": "2557:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2325,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2551:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 2324,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2551:5:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2551:11:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2323,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2541:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2541:22:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2520:43:17"
											},
											{
												"assignments": [
													2331
												],
												"declarations": [
													{
														"constant": false,
														"id": 2331,
														"mutability": "mutable",
														"name": "hashedVersion",
														"nameLocation": "2581:13:17",
														"nodeType": "VariableDeclaration",
														"scope": 2377,
														"src": "2573:21:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2330,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2573:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2338,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2335,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2318,
																	"src": "2613:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 2334,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2607:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 2333,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2607:5:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2607:14:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2332,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2597:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2597:25:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2573:49:17"
											},
											{
												"assignments": [
													2340
												],
												"declarations": [
													{
														"constant": false,
														"id": 2340,
														"mutability": "mutable",
														"name": "typeHash",
														"nameLocation": "2640:8:17",
														"nodeType": "VariableDeclaration",
														"scope": 2377,
														"src": "2632:16:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2339,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2632:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2344,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
															"id": 2342,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2674:84:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
															},
															"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
															}
														],
														"id": 2341,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2651:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2343,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2651:117:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2632:136:17"
											},
											{
												"expression": {
													"id": 2347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2345,
														"name": "_HASHED_NAME",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2309,
														"src": "2778:12:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2346,
														"name": "hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2322,
														"src": "2793:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2778:25:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2348,
												"nodeType": "ExpressionStatement",
												"src": "2778:25:17"
											},
											{
												"expression": {
													"id": 2351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2349,
														"name": "_HASHED_VERSION",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2311,
														"src": "2813:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2350,
														"name": "hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2331,
														"src": "2831:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2813:31:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2352,
												"nodeType": "ExpressionStatement",
												"src": "2813:31:17"
											},
											{
												"expression": {
													"id": 2356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2353,
														"name": "_CACHED_CHAIN_ID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2305,
														"src": "2854:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2354,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2873:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2355,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "2873:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2854:32:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2357,
												"nodeType": "ExpressionStatement",
												"src": "2854:32:17"
											},
											{
												"expression": {
													"id": 2364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2358,
														"name": "_CACHED_DOMAIN_SEPARATOR",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2303,
														"src": "2896:24:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2360,
																"name": "typeHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2340,
																"src": "2945:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 2361,
																"name": "hashedName",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2322,
																"src": "2955:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 2362,
																"name": "hashedVersion",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2331,
																"src": "2967:13:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2359,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2434,
															"src": "2923:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
															}
														},
														"id": 2363,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2923:58:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2896:85:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2365,
												"nodeType": "ExpressionStatement",
												"src": "2896:85:17"
											},
											{
												"expression": {
													"id": 2371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2366,
														"name": "_CACHED_THIS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2307,
														"src": "2991:12:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2369,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3014:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2451",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2451",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2368,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3006:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2367,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3006:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 2370,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3006:13:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2991:28:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2372,
												"nodeType": "ExpressionStatement",
												"src": "2991:28:17"
											},
											{
												"expression": {
													"id": 2375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2373,
														"name": "_TYPE_HASH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2313,
														"src": "3029:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2374,
														"name": "typeHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2340,
														"src": "3042:8:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3029:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2376,
												"nodeType": "ExpressionStatement",
												"src": "3029:21:17"
											}
										]
									},
									"documentation": {
										"id": 2314,
										"nodeType": "StructuredDocumentation",
										"src": "1891:559:17",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2378,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2316,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "2481:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2378,
												"src": "2467:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2315,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2467:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2318,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2501:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2378,
												"src": "2487:21:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2317,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2487:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2466:43:17"
									},
									"returnParameters": {
										"id": 2320,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2510:0:17"
									},
									"scope": 2451,
									"src": "2455:602:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2406,
										"nodeType": "Block",
										"src": "3205:246:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2386,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3227:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2451",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2451",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2385,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3219:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2384,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3219:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3219:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2388,
															"name": "_CACHED_THIS",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2307,
															"src": "3236:12:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3219:29:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2390,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3252:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3252:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2392,
															"name": "_CACHED_CHAIN_ID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2305,
															"src": "3269:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3252:33:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3219:66:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2404,
													"nodeType": "Block",
													"src": "3349:96:17",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2399,
																		"name": "_TYPE_HASH",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2313,
																		"src": "3392:10:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2400,
																		"name": "_HASHED_NAME",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2309,
																		"src": "3404:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2401,
																		"name": "_HASHED_VERSION",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2311,
																		"src": "3418:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2398,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2434,
																	"src": "3370:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																		"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
																	}
																},
																"id": 2402,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3370:64:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2383,
															"id": 2403,
															"nodeType": "Return",
															"src": "3363:71:17"
														}
													]
												},
												"id": 2405,
												"nodeType": "IfStatement",
												"src": "3215:230:17",
												"trueBody": {
													"id": 2397,
													"nodeType": "Block",
													"src": "3287:56:17",
													"statements": [
														{
															"expression": {
																"id": 2395,
																"name": "_CACHED_DOMAIN_SEPARATOR",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2303,
																"src": "3308:24:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2383,
															"id": 2396,
															"nodeType": "Return",
															"src": "3301:31:17"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2379,
										"nodeType": "StructuredDocumentation",
										"src": "3063:75:17",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3152:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3170:2:17"
									},
									"returnParameters": {
										"id": 2383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2382,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2407,
												"src": "3196:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2381,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:17"
									},
									"scope": 2451,
									"src": "3143:308:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2433,
										"nodeType": "Block",
										"src": "3606:108:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2421,
																	"name": "typeHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2409,
																	"src": "3644:8:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2422,
																	"name": "nameHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2411,
																	"src": "3654:8:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2423,
																	"name": "versionHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2413,
																	"src": "3664:11:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2424,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "3677:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2425,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "3677:13:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2428,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3700:4:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2451",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2451",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3692:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2426,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3692:7:17",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3692:13:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2419,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3633:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2420,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "3633:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2430,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3633:73:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2418,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3623:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3623:84:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2417,
												"id": 2432,
												"nodeType": "Return",
												"src": "3616:91:17"
											}
										]
									},
									"id": 2434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "3466:21:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2409,
												"mutability": "mutable",
												"name": "typeHash",
												"nameLocation": "3505:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "3497:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2408,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3497:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2411,
												"mutability": "mutable",
												"name": "nameHash",
												"nameLocation": "3531:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "3523:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2410,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2413,
												"mutability": "mutable",
												"name": "versionHash",
												"nameLocation": "3557:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "3549:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2412,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3549:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:87:17"
									},
									"returnParameters": {
										"id": 2417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "3597:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2415,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3597:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3596:9:17"
									},
									"scope": 2451,
									"src": "3457:257:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2449,
										"nodeType": "Block",
										"src": "4425:79:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2444,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2407,
																"src": "4464:18:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2445,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4464:20:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2446,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2437,
															"src": "4486:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2442,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2297,
															"src": "4442:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2297_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 2443,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2276,
														"src": "4442:21:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4442:55:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2441,
												"id": 2448,
												"nodeType": "Return",
												"src": "4435:62:17"
											}
										]
									},
									"documentation": {
										"id": 2435,
										"nodeType": "StructuredDocumentation",
										"src": "3720:614:17",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4348:16:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2437,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4373:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2450,
												"src": "4365:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2436,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4365:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4364:20:17"
									},
									"returnParameters": {
										"id": 2441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2440,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2450,
												"src": "4416:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2439,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4416:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4415:9:17"
									},
									"scope": 2451,
									"src": "4339:165:17",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2452,
							"src": "1295:3211:17",
							"usedErrors": []
						}
					],
					"src": "104:4403:17"
				},
				"id": 17
			}
		}
	}
}